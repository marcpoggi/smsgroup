android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    android.support.v4.util.SimpleArrayMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> b
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    android.support.v4.util.SimpleArrayMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    android.support.v4.util.SimpleArrayMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SimpleArrayMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.k:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.s:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.u:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.w:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.x:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.y:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.z:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.aa:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ab:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.ArrayMap -> android.support.v4.c.a:
    android.support.v4.util.MapCollections mCollections -> a
    android.support.v4.util.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
android.support.v4.util.ArrayMap$1 -> android.support.v4.c.b:
    android.support.v4.util.ArrayMap this$0 -> a
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.ContainerHelpers -> android.support.v4.c.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.d:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.e:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.MapCollections -> android.support.v4.c.f:
    android.support.v4.util.MapCollections$EntrySet mEntrySet -> b
    android.support.v4.util.MapCollections$KeySet mKeySet -> c
    android.support.v4.util.MapCollections$ValuesCollection mValues -> d
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.MapCollections$ArrayIterator -> android.support.v4.c.g:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    android.support.v4.util.MapCollections this$0 -> e
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
android.support.v4.util.MapCollections$EntrySet -> android.support.v4.c.h:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
android.support.v4.util.MapCollections$KeySet -> android.support.v4.c.i:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
android.support.v4.util.MapCollections$MapIterator -> android.support.v4.c.j:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    android.support.v4.util.MapCollections this$0 -> d
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
android.support.v4.util.MapCollections$ValuesCollection -> android.support.v4.c.k:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
android.support.v4.util.SimpleArrayMap -> android.support.v4.c.l:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfValue(java.lang.Object) -> a
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.m:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> d
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.view.GravityCompat -> android.support.v4.view.a:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.b:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.c:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.d:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.e:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.f:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.g:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.h:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.i:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.j:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.k:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.l:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.m:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.n:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.o:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.p:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.q:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.r:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.s:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.t:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.u:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.v:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.w:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.x:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.y:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.z:
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.aa:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ab:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ac:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ad:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ae:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.view.af:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ag:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.ah:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.ai:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.aj:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.ak:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.al:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.am:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> aa
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> ab
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ac
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ad
    int mDrawingOrder -> ae
    java.util.ArrayList mDrawingOrderedChildren -> af
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> ag
    java.lang.Runnable mEndScrollRunnable -> ah
    int mScrollState -> ai
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestParentDisallowInterceptTouchEvent(boolean) -> c
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.an:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ao:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ap:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.aq:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ar:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.as:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.at:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.au:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.av:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.aw:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.ax:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.CursorAdapter -> android.support.v4.widget.a:
    boolean mDataValid -> a
    boolean mAutoRequery -> b
    android.database.Cursor mCursor -> c
    android.content.Context mContext -> d
    int mRowIDColumn -> e
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> f
    android.database.DataSetObserver mDataSetObserver -> g
    android.support.v4.widget.CursorFilter mCursorFilter -> h
    android.widget.FilterQueryProvider mFilterQueryProvider -> i
    void init(android.content.Context,android.database.Cursor,int) -> a
    android.database.Cursor getCursor() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.widget.Filter getFilter() -> getFilter
    void onContentChanged() -> b
android.support.v4.widget.CursorAdapter$1 -> android.support.v4.widget.b:
android.support.v4.widget.CursorAdapter$ChangeObserver -> android.support.v4.widget.c:
    android.support.v4.widget.CursorAdapter this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> android.support.v4.widget.d:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.widget.CursorFilter -> android.support.v4.widget.e:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> a
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> android.support.v4.widget.f:
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.database.Cursor getCursor() -> a
    void changeCursor(android.database.Cursor) -> a
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewAbsoluteGravity(android.view.View) -> e
    boolean checkDrawerViewAbsoluteGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.g:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.h:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.i:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.j:
    int mAbsGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.k:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.l:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.m:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.n:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.o:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ResourceCursorAdapter -> android.support.v4.widget.p:
    int mLayout -> j
    int mDropDownLayout -> k
    android.view.LayoutInflater mInflater -> l
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.q:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.r:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.s:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.t:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.u:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.v:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SimpleCursorAdapter -> android.support.v4.widget.w:
    int[] mFrom -> j
    int[] mTo -> k
    int mStringConversionColumn -> m
    android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter mCursorToStringConverter -> n
    android.support.v4.widget.SimpleCursorAdapter$ViewBinder mViewBinder -> o
    java.lang.String[] mOriginalFrom -> l
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void setViewImage(android.widget.ImageView,java.lang.String) -> a
    void setViewText(android.widget.TextView,java.lang.String) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    void findColumns(java.lang.String[]) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter -> android.support.v4.widget.x:
    java.lang.CharSequence convertToString(android.database.Cursor) -> a
android.support.v4.widget.SimpleCursorAdapter$ViewBinder -> android.support.v4.widget.y:
    boolean setViewValue(android.view.View,android.database.Cursor,int) -> a
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.z:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.aa:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.ab:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.ac:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.ad:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.ae:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.af:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.ag:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.ah:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.ai:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> d
    void ensureMotionHistorySizeForId(int) -> e
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.aj:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.ak:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.feeltest.smsgroup.DBManager -> com.feeltest.smsgroup.a:
    com.feeltest.smsgroup.DBManager _sharedmanager -> a
    android.content.Context _sharedContext -> b
    com.feeltest.smsgroup.Sql databaseHelper -> c
    android.database.sqlite.SQLiteDatabase db -> d
    com.feeltest.smsgroup.DBManager sharedManager() -> a
    void setSharedContext(android.content.Context) -> a
    void open() -> b
    com.feeltest.smsgroup.Groupe savegroupe(com.feeltest.smsgroup.Groupe) -> a
    java.util.ArrayList getAllGroup() -> c
    java.util.ArrayList getAllTesteur(int) -> a
    com.feeltest.smsgroup.Testeur savetesteur(com.feeltest.smsgroup.Testeur) -> a
    void deleteTesteur(java.util.ArrayList) -> a
    void deleteGroupe(int) -> b
    void moveTesteurto(int,int) -> a
    int updateGroupe(int,java.lang.String) -> a
    int update(com.feeltest.smsgroup.Testeur) -> b
    long update_message(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> a
    android.database.Cursor getAllMessages() -> d
    java.util.ArrayList getAllGroupName() -> e
    java.util.ArrayList getAllGroupId() -> f
    int moveTesteursto(java.util.ArrayList,java.lang.Integer) -> a
    java.lang.String makePlaceholders(int) -> c
com.feeltest.smsgroup.Groupe -> com.feeltest.smsgroup.b:
    int id -> a
    java.lang.String nomgroup -> b
    boolean checked -> c
    int getId() -> a
    void setId(int) -> a
    java.lang.String getnomgroup() -> b
    void setnomgroup(java.lang.String) -> a
com.feeltest.smsgroup.LastMessagesActivity -> com.feeltest.smsgroup.LastMessagesActivity:
    java.util.ArrayList idtesteur -> a
    android.database.Cursor messages -> b
    void onCreate(android.os.Bundle) -> onCreate
com.feeltest.smsgroup.LastMessagesActivity$1 -> com.feeltest.smsgroup.c:
    com.feeltest.smsgroup.LastMessagesActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.feeltest.smsgroup.MainActivity -> com.feeltest.smsgroup.MainActivity:
    int ACTIVITY_CHOOSE_FILE -> a
    android.widget.ListView malisteview -> c
    com.feeltest.smsgroup.MonArrayAdapterGroup monadapter -> d
    java.util.ArrayList listegroupe -> e
    android.content.BroadcastReceiver mbroadcastreceiver -> f
    android.content.Context context -> g
    android.app.ProgressDialog p -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void editgroupe(int,int) -> a
    void envoitexto(int) -> a
    void sendsms(java.lang.String,int) -> a
    void delete_groupe(int,int) -> b
    void add_group() -> c
    void ajoutmanuel() -> a
    int creegroup(java.lang.String) -> a
    void ajoutcsv() -> b
    void readlastmessage(int) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    android.widget.ListView access$000(com.feeltest.smsgroup.MainActivity) -> a
    android.content.BroadcastReceiver access$100(com.feeltest.smsgroup.MainActivity) -> b
    java.util.ArrayList access$200(com.feeltest.smsgroup.MainActivity) -> c
    android.content.Context access$300(com.feeltest.smsgroup.MainActivity) -> d
com.feeltest.smsgroup.MainActivity$1 -> com.feeltest.smsgroup.d:
    com.feeltest.smsgroup.MainActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.feeltest.smsgroup.MainActivity$10 -> com.feeltest.smsgroup.e:
    com.feeltest.smsgroup.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$11 -> com.feeltest.smsgroup.f:
    com.feeltest.smsgroup.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$12 -> com.feeltest.smsgroup.g:
    android.widget.EditText val$input -> a
    com.feeltest.smsgroup.MainActivity this$0 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$13 -> com.feeltest.smsgroup.h:
    com.feeltest.smsgroup.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$2 -> com.feeltest.smsgroup.i:
    com.feeltest.smsgroup.MainActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.feeltest.smsgroup.MainActivity$3 -> com.feeltest.smsgroup.j:
    com.feeltest.smsgroup.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$4 -> com.feeltest.smsgroup.k:
    android.widget.EditText val$input -> a
    int val$id_group3 -> b
    int val$position4 -> c
    com.feeltest.smsgroup.MainActivity this$0 -> d
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$5 -> com.feeltest.smsgroup.l:
    com.feeltest.smsgroup.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$6 -> com.feeltest.smsgroup.m:
    android.widget.TextView val$sms_count -> a
    com.feeltest.smsgroup.MainActivity this$0 -> b
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.feeltest.smsgroup.MainActivity$7 -> com.feeltest.smsgroup.n:
    com.feeltest.smsgroup.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$8 -> com.feeltest.smsgroup.o:
    int val$id_group3 -> a
    android.widget.EditText val$input -> b
    com.feeltest.smsgroup.MainActivity this$0 -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.MainActivity$9 -> com.feeltest.smsgroup.p:
    java.util.ArrayList val$listetesteur -> a
    java.lang.String val$body -> b
    com.feeltest.smsgroup.MainActivity this$0 -> c
    void run() -> run
com.feeltest.smsgroup.MonArrayAdapterGroup -> com.feeltest.smsgroup.q:
    android.content.Context context -> a
    android.view.LayoutInflater inflator -> b
    java.util.List monarray -> c
    int selectedItem -> d
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.feeltest.smsgroup.Groupe getItem(int) -> a
    int getId(int) -> b
    void setSelectedItem(int) -> c
    int getSelectedItem() -> a
    java.lang.Object getItem(int) -> getItem
com.feeltest.smsgroup.MonArrayAdapterTesteur -> com.feeltest.smsgroup.s:
    android.content.Context context -> a
    android.view.LayoutInflater inflator -> b
    java.util.List monarray -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.feeltest.smsgroup.Testeur getItem(int) -> a
    int getId(int) -> b
    java.lang.Object getItem(int) -> getItem
com.feeltest.smsgroup.R -> com.feeltest.smsgroup.R:
com.feeltest.smsgroup.R$array -> com.feeltest.smsgroup.R$array:
    int choix_import -> choix_import
com.feeltest.smsgroup.R$attr -> com.feeltest.smsgroup.R$attr:
com.feeltest.smsgroup.R$color -> com.feeltest.smsgroup.R$color:
    int aqua -> aqua
    int black -> black
    int blue -> blue
    int fuchsia -> fuchsia
    int gray -> gray
    int green -> green
    int lime -> lime
    int maroon -> maroon
    int navy -> navy
    int olive -> olive
    int purple -> purple
    int red -> red
    int silver -> silver
    int teal -> teal
    int white -> white
    int yellow -> yellow
com.feeltest.smsgroup.R$dimen -> com.feeltest.smsgroup.R$dimen:
    int activity_horizontal_margin -> activity_horizontal_margin
    int activity_vertical_margin -> activity_vertical_margin
    int taille_liste_principal -> taille_liste_principal
com.feeltest.smsgroup.R$drawable -> com.feeltest.smsgroup.R$drawable:
    int group_icon -> group_icon
    int ic_launcher -> ic_launcher
    int ic_launcher_256 -> ic_launcher_256
    int ic_launcher_512 -> ic_launcher_512
    int ic_launcher_512_opaque -> ic_launcher_512_opaque
    int ic_menu_call -> ic_menu_call
    int ic_menu_call_dis -> ic_menu_call_dis
    int icone_edit -> icone_edit
    int icone_edit_dis -> icone_edit_dis
    int icone_mail -> icone_mail
    int icone_mail_dis -> icone_mail_dis
    int icone_plus -> icone_plus
    int icone_plus_dis -> icone_plus_dis
    int icone_poubelle -> icone_poubelle
    int icone_sms_couleur -> icone_sms_couleur
    int icone_sms_couleur_dis -> icone_sms_couleur_dis
    int icone_view -> icone_view
    int icone_view_dis -> icone_view_dis
    int list_selector -> list_selector
    int mainimg_groupsms1 -> mainimg_groupsms1
    int pres1024_500_opaque -> pres1024_500_opaque
    int selector_call -> selector_call
    int selector_edit -> selector_edit
    int selector_mail -> selector_mail
    int selector_plus -> selector_plus
    int selector_view -> selector_view
    int testeur_icon -> testeur_icon
com.feeltest.smsgroup.R$id -> com.feeltest.smsgroup.R$id:
    int Button02 -> Button02
    int Button03 -> Button03
    int ImageButton1 -> ImageButton1
    int ImageButton4 -> ImageButton4
    int LinearLayout1 -> LinearLayout1
    int TextView1 -> TextView1
    int counter -> counter
    int editName -> editName
    int editTel -> editTel
    int edit_texto -> edit_texto
    int imageView1 -> imageView1
    int item_add -> item_add
    int item_add1 -> item_add1
    int item_add2 -> item_add2
    int item_call -> item_call
    int item_edit -> item_edit
    int item_filsms -> item_filsms
    int item_help -> item_help
    int item_last -> item_last
    int item_mail -> item_mail
    int item_poubelle -> item_poubelle
    int item_view -> item_view
    int listView_main -> listView_main
    int listlastmsg -> listlastmsg
    int textView2 -> textView2
com.feeltest.smsgroup.R$layout -> com.feeltest.smsgroup.R$layout:
    int actionbar_view -> actionbar_view
    int activity_last_messages -> activity_last_messages
    int activity_main -> activity_main
    int activity_testeur -> activity_testeur
    int datatesteur_view -> datatesteur_view
    int lignegroup -> lignegroup
    int lignetesteur -> lignetesteur
    int textesms -> textesms
com.feeltest.smsgroup.R$menu -> com.feeltest.smsgroup.R$menu:
    int contact_menu -> contact_menu
    int main_menu -> main_menu
com.feeltest.smsgroup.R$string -> com.feeltest.smsgroup.R$string:
    int add -> add
    int add_man -> add_man
    int add_rep -> add_rep
    int aide -> aide
    int annuler -> annuler
    int app_name -> app_name
    int call -> call
    int choixfichier -> choixfichier
    int contactname -> contactname
    int dernier -> dernier
    int edit -> edit
    int filsms -> filsms
    int groupname -> groupname
    int move -> move
    int orphelin -> orphelin
    int poubelle -> poubelle
    int progress_message -> progress_message
    int redaction -> redaction
    int telephone -> telephone
    int telname -> telname
    int title_activity_last_messages -> title_activity_last_messages
    int title_activity_main -> title_activity_main
    int title_activity_testeur -> title_activity_testeur
com.feeltest.smsgroup.R$style -> com.feeltest.smsgroup.R$style:
    int AppBaseTheme -> AppBaseTheme
    int AppTheme -> AppTheme
    int defaultTextView -> defaultTextView
    int texte_liste_principal -> texte_liste_principal
com.feeltest.smsgroup.Sql -> com.feeltest.smsgroup.t:
    android.content.Context mcontext -> a
    java.lang.String ORPHELIN -> b
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.feeltest.smsgroup.Testeur -> com.feeltest.smsgroup.u:
    int id -> a
    java.lang.String nomprenom -> b
    boolean checked -> c
    java.lang.String tel -> d
    int id_group -> e
    int getId() -> a
    void setId(int) -> a
    java.lang.String getNomPrenom() -> b
    void setNomPrenom(java.lang.String) -> a
    java.lang.String getTel() -> c
    void setTel(java.lang.String) -> b
    int getId_group() -> d
    void setId_group(int) -> b
com.feeltest.smsgroup.TesteurActivity -> com.feeltest.smsgroup.TesteurActivity:
    int ID_MENU_MOVE -> b
    android.widget.ListView malisteview -> c
    java.util.ArrayList listetesteur -> d
    com.feeltest.smsgroup.MonArrayAdapterTesteur monadapter -> e
    int id_group -> f
    java.util.ArrayList checked -> g
    android.content.Context context -> h
    android.content.BroadcastReceiver mbroadcastreceiver -> i
    android.app.ProgressDialog p -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void move(java.util.ArrayList) -> a
    void readcontactmessage(java.lang.String) -> b
    void callcontact(java.lang.String) -> c
    void editcontact(int) -> a
    void creetexto(java.util.ArrayList) -> b
    void sendsms(java.lang.String) -> a
    void delete_testeur(java.util.ArrayList) -> c
    int trouvePosition(java.lang.Integer) -> a
    void ajoutmanuel() -> a
    void creetesteur(java.lang.String,java.lang.String) -> a
    int updateTesteur(int,java.lang.String,java.lang.String,int) -> a
    void onPause() -> onPause
    void onResume() -> onResume
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    com.feeltest.smsgroup.MonArrayAdapterTesteur access$000(com.feeltest.smsgroup.TesteurActivity) -> a
    java.util.ArrayList access$100(com.feeltest.smsgroup.TesteurActivity) -> b
    android.content.BroadcastReceiver access$200(com.feeltest.smsgroup.TesteurActivity) -> c
    int access$300(com.feeltest.smsgroup.TesteurActivity,java.lang.Integer) -> a
    java.util.ArrayList access$400(com.feeltest.smsgroup.TesteurActivity) -> d
    android.content.Context access$500(com.feeltest.smsgroup.TesteurActivity) -> e
com.feeltest.smsgroup.TesteurActivity$1 -> com.feeltest.smsgroup.v:
    com.feeltest.smsgroup.TesteurActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void toggle_check(int) -> a
com.feeltest.smsgroup.TesteurActivity$10 -> com.feeltest.smsgroup.w:
    java.util.ArrayList val$checked -> a
    android.widget.EditText val$input -> b
    com.feeltest.smsgroup.TesteurActivity this$0 -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.TesteurActivity$11 -> com.feeltest.smsgroup.x:
    java.lang.String val$body -> a
    com.feeltest.smsgroup.TesteurActivity this$0 -> b
    void run() -> run
com.feeltest.smsgroup.TesteurActivity$12 -> com.feeltest.smsgroup.y:
    android.view.View val$mavue -> a
    com.feeltest.smsgroup.TesteurActivity this$0 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.TesteurActivity$13 -> com.feeltest.smsgroup.z:
    com.feeltest.smsgroup.TesteurActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.TesteurActivity$2 -> com.feeltest.smsgroup.aa:
    com.feeltest.smsgroup.TesteurActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.feeltest.smsgroup.TesteurActivity$3 -> com.feeltest.smsgroup.ab:
    com.feeltest.smsgroup.TesteurActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.TesteurActivity$4 -> com.feeltest.smsgroup.ac:
    java.util.ArrayList val$checked2 -> a
    java.util.List val$listegroupeid -> b
    com.feeltest.smsgroup.TesteurActivity this$0 -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.TesteurActivity$5 -> com.feeltest.smsgroup.ad:
    com.feeltest.smsgroup.TesteurActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.TesteurActivity$6 -> com.feeltest.smsgroup.ae:
    android.view.View val$mavue -> a
    int val$id_contact -> b
    int val$position -> c
    com.feeltest.smsgroup.TesteurActivity this$0 -> d
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.TesteurActivity$7 -> com.feeltest.smsgroup.af:
    com.feeltest.smsgroup.TesteurActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.feeltest.smsgroup.TesteurActivity$8 -> com.feeltest.smsgroup.ag:
    android.widget.TextView val$sms_count -> a
    com.feeltest.smsgroup.TesteurActivity this$0 -> b
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.feeltest.smsgroup.TesteurActivity$9 -> com.feeltest.smsgroup.ah:
    com.feeltest.smsgroup.TesteurActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.common.annotations.Beta -> com.google.common.annotations.Beta:
com.google.common.annotations.GwtCompatible -> com.google.common.annotations.GwtCompatible:
    boolean serializable() -> serializable
    boolean emulated() -> emulated
com.google.common.annotations.GwtIncompatible -> com.google.common.annotations.GwtIncompatible:
    java.lang.String value() -> value
com.google.common.annotations.VisibleForTesting -> com.google.common.annotations.VisibleForTesting:
com.google.common.base.Absent -> com.google.common.base.Absent:
    com.google.common.base.Absent INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Optional withType() -> withType
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
com.google.common.base.AbstractIterator -> com.google.common.base.AbstractIterator:
    com.google.common.base.AbstractIterator$State state -> state
    java.lang.Object next -> next
    java.lang.Object computeNext() -> computeNext
    java.lang.Object endOfData() -> endOfData
    boolean hasNext() -> hasNext
    boolean tryToComputeNext() -> tryToComputeNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.base.AbstractIterator$1 -> com.google.common.base.AbstractIterator$1:
    int[] $SwitchMap$com$google$common$base$AbstractIterator$State -> $SwitchMap$com$google$common$base$AbstractIterator$State
com.google.common.base.AbstractIterator$State -> com.google.common.base.AbstractIterator$State:
    com.google.common.base.AbstractIterator$State READY -> READY
    com.google.common.base.AbstractIterator$State NOT_READY -> NOT_READY
    com.google.common.base.AbstractIterator$State DONE -> DONE
    com.google.common.base.AbstractIterator$State FAILED -> FAILED
    com.google.common.base.AbstractIterator$State[] $VALUES -> $VALUES
    com.google.common.base.AbstractIterator$State[] values() -> values
    com.google.common.base.AbstractIterator$State valueOf(java.lang.String) -> valueOf
com.google.common.base.Ascii -> com.google.common.base.Ascii:
    byte NUL -> NUL
    byte SOH -> SOH
    byte STX -> STX
    byte ETX -> ETX
    byte EOT -> EOT
    byte ENQ -> ENQ
    byte ACK -> ACK
    byte BEL -> BEL
    byte BS -> BS
    byte HT -> HT
    byte LF -> LF
    byte NL -> NL
    byte VT -> VT
    byte FF -> FF
    byte CR -> CR
    byte SO -> SO
    byte SI -> SI
    byte DLE -> DLE
    byte DC1 -> DC1
    byte XON -> XON
    byte DC2 -> DC2
    byte DC3 -> DC3
    byte XOFF -> XOFF
    byte DC4 -> DC4
    byte NAK -> NAK
    byte SYN -> SYN
    byte ETB -> ETB
    byte CAN -> CAN
    byte EM -> EM
    byte SUB -> SUB
    byte ESC -> ESC
    byte FS -> FS
    byte GS -> GS
    byte RS -> RS
    byte US -> US
    byte SP -> SP
    byte SPACE -> SPACE
    byte DEL -> DEL
    char MIN -> MIN
    char MAX -> MAX
    java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    java.lang.String toLowerCase(java.lang.CharSequence) -> toLowerCase
    char toLowerCase(char) -> toLowerCase
    java.lang.String toUpperCase(java.lang.String) -> toUpperCase
    java.lang.String toUpperCase(java.lang.CharSequence) -> toUpperCase
    char toUpperCase(char) -> toUpperCase
    boolean isLowerCase(char) -> isLowerCase
    boolean isUpperCase(char) -> isUpperCase
    java.lang.String truncate(java.lang.CharSequence,int,java.lang.String) -> truncate
    boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> equalsIgnoreCase
    int getAlphaIndex(char) -> getAlphaIndex
com.google.common.base.CaseFormat -> com.google.common.base.CaseFormat:
    com.google.common.base.CaseFormat LOWER_HYPHEN -> LOWER_HYPHEN
    com.google.common.base.CaseFormat LOWER_UNDERSCORE -> LOWER_UNDERSCORE
    com.google.common.base.CaseFormat LOWER_CAMEL -> LOWER_CAMEL
    com.google.common.base.CaseFormat UPPER_CAMEL -> UPPER_CAMEL
    com.google.common.base.CaseFormat UPPER_UNDERSCORE -> UPPER_UNDERSCORE
    com.google.common.base.CharMatcher wordBoundary -> wordBoundary
    java.lang.String wordSeparator -> wordSeparator
    com.google.common.base.CaseFormat[] $VALUES -> $VALUES
    com.google.common.base.CaseFormat[] values() -> values
    com.google.common.base.CaseFormat valueOf(java.lang.String) -> valueOf
    java.lang.String to(com.google.common.base.CaseFormat,java.lang.String) -> to
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> convert
    com.google.common.base.Converter converterTo(com.google.common.base.CaseFormat) -> converterTo
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
    java.lang.String normalizeFirstWord(java.lang.String) -> normalizeFirstWord
    java.lang.String firstCharOnlyToUpper(java.lang.String) -> firstCharOnlyToUpper
    java.lang.String access$100(java.lang.String) -> access$100
com.google.common.base.CaseFormat$1 -> com.google.common.base.CaseFormat$1:
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> convert
com.google.common.base.CaseFormat$2 -> com.google.common.base.CaseFormat$2:
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> convert
com.google.common.base.CaseFormat$3 -> com.google.common.base.CaseFormat$3:
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
com.google.common.base.CaseFormat$4 -> com.google.common.base.CaseFormat$4:
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
com.google.common.base.CaseFormat$5 -> com.google.common.base.CaseFormat$5:
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> convert
com.google.common.base.CaseFormat$StringConverter -> com.google.common.base.CaseFormat$StringConverter:
    com.google.common.base.CaseFormat sourceFormat -> sourceFormat
    com.google.common.base.CaseFormat targetFormat -> targetFormat
    long serialVersionUID -> serialVersionUID
    java.lang.String doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.String) -> doBackward
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.base.CharMatcher -> com.google.common.base.CharMatcher:
    com.google.common.base.CharMatcher BREAKING_WHITESPACE -> BREAKING_WHITESPACE
    com.google.common.base.CharMatcher ASCII -> ASCII
    java.lang.String ZEROES -> ZEROES
    java.lang.String NINES -> NINES
    com.google.common.base.CharMatcher DIGIT -> DIGIT
    com.google.common.base.CharMatcher JAVA_DIGIT -> JAVA_DIGIT
    com.google.common.base.CharMatcher JAVA_LETTER -> JAVA_LETTER
    com.google.common.base.CharMatcher JAVA_LETTER_OR_DIGIT -> JAVA_LETTER_OR_DIGIT
    com.google.common.base.CharMatcher JAVA_UPPER_CASE -> JAVA_UPPER_CASE
    com.google.common.base.CharMatcher JAVA_LOWER_CASE -> JAVA_LOWER_CASE
    com.google.common.base.CharMatcher JAVA_ISO_CONTROL -> JAVA_ISO_CONTROL
    com.google.common.base.CharMatcher INVISIBLE -> INVISIBLE
    com.google.common.base.CharMatcher SINGLE_WIDTH -> SINGLE_WIDTH
    com.google.common.base.CharMatcher ANY -> ANY
    com.google.common.base.CharMatcher NONE -> NONE
    java.lang.String description -> description
    int DISTINCT_CHARS -> DISTINCT_CHARS
    java.lang.String WHITESPACE_TABLE -> WHITESPACE_TABLE
    int WHITESPACE_MULTIPLIER -> WHITESPACE_MULTIPLIER
    int WHITESPACE_SHIFT -> WHITESPACE_SHIFT
    com.google.common.base.CharMatcher WHITESPACE -> WHITESPACE
    java.lang.String showCharacter(char) -> showCharacter
    com.google.common.base.CharMatcher is(char) -> is
    com.google.common.base.CharMatcher isNot(char) -> isNot
    com.google.common.base.CharMatcher anyOf(java.lang.CharSequence) -> anyOf
    com.google.common.base.CharMatcher isEither(char,char) -> isEither
    com.google.common.base.CharMatcher noneOf(java.lang.CharSequence) -> noneOf
    com.google.common.base.CharMatcher inRange(char,char) -> inRange
    com.google.common.base.CharMatcher inRange(char,char,java.lang.String) -> inRange
    com.google.common.base.CharMatcher forPredicate(com.google.common.base.Predicate) -> forPredicate
    boolean matches(char) -> matches
    com.google.common.base.CharMatcher negate() -> negate
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher precomputed() -> precomputed
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
    com.google.common.base.CharMatcher precomputedInternal() -> precomputedInternal
    com.google.common.base.CharMatcher precomputedPositive(int,java.util.BitSet,java.lang.String) -> precomputedPositive
    boolean isSmall(int,int) -> isSmall
    void setBits(java.util.BitSet) -> setBits
    boolean matchesAnyOf(java.lang.CharSequence) -> matchesAnyOf
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    int countIn(java.lang.CharSequence) -> countIn
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String retainFrom(java.lang.CharSequence) -> retainFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    java.lang.String trimLeadingFrom(java.lang.CharSequence) -> trimLeadingFrom
    java.lang.String trimTrailingFrom(java.lang.CharSequence) -> trimTrailingFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimAndCollapseFrom(java.lang.CharSequence,char) -> trimAndCollapseFrom
    java.lang.String finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean) -> finishCollapseFrom
    boolean apply(java.lang.Character) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$1 -> com.google.common.base.CharMatcher$1:
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$10 -> com.google.common.base.CharMatcher$10:
    char val$match -> val$match
    boolean matches(char) -> matches
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    void setBits(java.util.BitSet) -> setBits
    com.google.common.base.CharMatcher negate() -> negate
com.google.common.base.CharMatcher$11 -> com.google.common.base.CharMatcher$11:
    char[] val$chars -> val$chars
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$12 -> com.google.common.base.CharMatcher$12:
    char val$match1 -> val$match1
    char val$match2 -> val$match2
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.CharMatcher$13 -> com.google.common.base.CharMatcher$13:
    char val$startInclusive -> val$startInclusive
    char val$endInclusive -> val$endInclusive
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.CharMatcher$14 -> com.google.common.base.CharMatcher$14:
    com.google.common.base.Predicate val$predicate -> val$predicate
    boolean matches(char) -> matches
    boolean apply(java.lang.Character) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$15 -> com.google.common.base.CharMatcher$15:
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.CharMatcher$2 -> com.google.common.base.CharMatcher$2:
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$3 -> com.google.common.base.CharMatcher$3:
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$4 -> com.google.common.base.CharMatcher$4:
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$5 -> com.google.common.base.CharMatcher$5:
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$6 -> com.google.common.base.CharMatcher$6:
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$7 -> com.google.common.base.CharMatcher$7:
    boolean matches(char) -> matches
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    int countIn(java.lang.CharSequence) -> countIn
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
com.google.common.base.CharMatcher$8 -> com.google.common.base.CharMatcher$8:
    boolean matches(char) -> matches
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    java.lang.String trimLeadingFrom(java.lang.CharSequence) -> trimLeadingFrom
    java.lang.String trimTrailingFrom(java.lang.CharSequence) -> trimTrailingFrom
    int countIn(java.lang.CharSequence) -> countIn
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
com.google.common.base.CharMatcher$9 -> com.google.common.base.CharMatcher$9:
    char val$match -> val$match
    boolean matches(char) -> matches
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.CharMatcher$And -> com.google.common.base.CharMatcher$And:
    com.google.common.base.CharMatcher first -> first
    com.google.common.base.CharMatcher second -> second
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$BitSetMatcher -> com.google.common.base.CharMatcher$BitSetMatcher:
    java.util.BitSet table -> table
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.CharMatcher$FastMatcher -> com.google.common.base.CharMatcher$FastMatcher:
    com.google.common.base.CharMatcher precomputed() -> precomputed
    com.google.common.base.CharMatcher negate() -> negate
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$NegatedFastMatcher -> com.google.common.base.CharMatcher$NegatedFastMatcher:
    com.google.common.base.CharMatcher precomputed() -> precomputed
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
com.google.common.base.CharMatcher$NegatedMatcher -> com.google.common.base.CharMatcher$NegatedMatcher:
    com.google.common.base.CharMatcher original -> original
    boolean matches(char) -> matches
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    int countIn(java.lang.CharSequence) -> countIn
    void setBits(java.util.BitSet) -> setBits
    com.google.common.base.CharMatcher negate() -> negate
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$Or -> com.google.common.base.CharMatcher$Or:
    com.google.common.base.CharMatcher first -> first
    com.google.common.base.CharMatcher second -> second
    void setBits(java.util.BitSet) -> setBits
    boolean matches(char) -> matches
    com.google.common.base.CharMatcher withToString(java.lang.String) -> withToString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.CharMatcher$RangesMatcher -> com.google.common.base.CharMatcher$RangesMatcher:
    char[] rangeStarts -> rangeStarts
    char[] rangeEnds -> rangeEnds
    boolean matches(char) -> matches
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Charsets -> com.google.common.base.Charsets:
    java.nio.charset.Charset US_ASCII -> US_ASCII
    java.nio.charset.Charset ISO_8859_1 -> ISO_8859_1
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.nio.charset.Charset UTF_16BE -> UTF_16BE
    java.nio.charset.Charset UTF_16LE -> UTF_16LE
    java.nio.charset.Charset UTF_16 -> UTF_16
com.google.common.base.Converter -> com.google.common.base.Converter:
    boolean handleNullAutomatically -> handleNullAutomatically
    com.google.common.base.Converter reverse -> reverse
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object convert(java.lang.Object) -> convert
    java.lang.Object correctedDoForward(java.lang.Object) -> correctedDoForward
    java.lang.Object correctedDoBackward(java.lang.Object) -> correctedDoBackward
    java.lang.Iterable convertAll(java.lang.Iterable) -> convertAll
    com.google.common.base.Converter reverse() -> reverse
    com.google.common.base.Converter andThen(com.google.common.base.Converter) -> andThen
    com.google.common.base.Converter doAndThen(com.google.common.base.Converter) -> doAndThen
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    com.google.common.base.Converter from(com.google.common.base.Function,com.google.common.base.Function) -> from
    com.google.common.base.Converter identity() -> identity
com.google.common.base.Converter$1 -> com.google.common.base.Converter$1:
    java.lang.Iterable val$fromIterable -> val$fromIterable
    com.google.common.base.Converter this$0 -> this$0
    java.util.Iterator iterator() -> iterator
com.google.common.base.Converter$1$1 -> com.google.common.base.Converter$1$1:
    java.util.Iterator fromIterator -> fromIterator
    com.google.common.base.Converter$1 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.base.Converter$ConverterComposition -> com.google.common.base.Converter$ConverterComposition:
    com.google.common.base.Converter first -> first
    com.google.common.base.Converter second -> second
    long serialVersionUID -> serialVersionUID
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object correctedDoForward(java.lang.Object) -> correctedDoForward
    java.lang.Object correctedDoBackward(java.lang.Object) -> correctedDoBackward
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Converter$FunctionBasedConverter -> com.google.common.base.Converter$FunctionBasedConverter:
    com.google.common.base.Function forwardFunction -> forwardFunction
    com.google.common.base.Function backwardFunction -> backwardFunction
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Converter$IdentityConverter -> com.google.common.base.Converter$IdentityConverter:
    com.google.common.base.Converter$IdentityConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    com.google.common.base.Converter$IdentityConverter reverse() -> reverse
    com.google.common.base.Converter doAndThen(com.google.common.base.Converter) -> doAndThen
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    com.google.common.base.Converter reverse() -> reverse
com.google.common.base.Converter$ReverseConverter -> com.google.common.base.Converter$ReverseConverter:
    com.google.common.base.Converter original -> original
    long serialVersionUID -> serialVersionUID
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object correctedDoForward(java.lang.Object) -> correctedDoForward
    java.lang.Object correctedDoBackward(java.lang.Object) -> correctedDoBackward
    com.google.common.base.Converter reverse() -> reverse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Defaults -> com.google.common.base.Defaults:
    java.util.Map DEFAULTS -> DEFAULTS
    void put(java.util.Map,java.lang.Class,java.lang.Object) -> put
    java.lang.Object defaultValue(java.lang.Class) -> defaultValue
com.google.common.base.Enums -> com.google.common.base.Enums:
    java.util.Map enumConstantCache -> enumConstantCache
    java.lang.reflect.Field getField(java.lang.Enum) -> getField
    com.google.common.base.Optional getIfPresent(java.lang.Class,java.lang.String) -> getIfPresent
    java.util.Map populateCache(java.lang.Class) -> populateCache
    java.util.Map getEnumConstants(java.lang.Class) -> getEnumConstants
    com.google.common.base.Converter stringConverter(java.lang.Class) -> stringConverter
com.google.common.base.Enums$StringConverter -> com.google.common.base.Enums$StringConverter:
    java.lang.Class enumClass -> enumClass
    long serialVersionUID -> serialVersionUID
    java.lang.Enum doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Enum) -> doBackward
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.base.Equivalence -> com.google.common.base.Equivalence:
    boolean equivalent(java.lang.Object,java.lang.Object) -> equivalent
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int hash(java.lang.Object) -> hash
    int doHash(java.lang.Object) -> doHash
    com.google.common.base.Equivalence onResultOf(com.google.common.base.Function) -> onResultOf
    com.google.common.base.Equivalence$Wrapper wrap(java.lang.Object) -> wrap
    com.google.common.base.Equivalence pairwise() -> pairwise
    com.google.common.base.Predicate equivalentTo(java.lang.Object) -> equivalentTo
    com.google.common.base.Equivalence equals() -> equals
    com.google.common.base.Equivalence identity() -> identity
com.google.common.base.Equivalence$1 -> com.google.common.base.Equivalence$1:
com.google.common.base.Equivalence$Equals -> com.google.common.base.Equivalence$Equals:
    com.google.common.base.Equivalence$Equals INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    java.lang.Object readResolve() -> readResolve
com.google.common.base.Equivalence$EquivalentToPredicate -> com.google.common.base.Equivalence$EquivalentToPredicate:
    com.google.common.base.Equivalence equivalence -> equivalence
    java.lang.Object target -> target
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Equivalence$Identity -> com.google.common.base.Equivalence$Identity:
    com.google.common.base.Equivalence$Identity INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    java.lang.Object readResolve() -> readResolve
com.google.common.base.Equivalence$Wrapper -> com.google.common.base.Equivalence$Wrapper:
    com.google.common.base.Equivalence equivalence -> equivalence
    java.lang.Object reference -> reference
    long serialVersionUID -> serialVersionUID
    java.lang.Object get() -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.FinalizablePhantomReference -> com.google.common.base.FinalizablePhantomReference:
com.google.common.base.FinalizableReference -> com.google.common.base.FinalizableReference:
    void finalizeReferent() -> finalizeReferent
com.google.common.base.FinalizableReferenceQueue -> com.google.common.base.FinalizableReferenceQueue:
    java.util.logging.Logger logger -> logger
    java.lang.String FINALIZER_CLASS_NAME -> FINALIZER_CLASS_NAME
    java.lang.reflect.Method startFinalizer -> startFinalizer
    java.lang.ref.ReferenceQueue queue -> queue
    java.lang.ref.PhantomReference frqRef -> frqRef
    boolean threadStarted -> threadStarted
    void close() -> close
    void cleanUp() -> cleanUp
    java.lang.Class loadFinalizer(com.google.common.base.FinalizableReferenceQueue$FinalizerLoader[]) -> loadFinalizer
    java.lang.reflect.Method getStartFinalizer(java.lang.Class) -> getStartFinalizer
    java.util.logging.Logger access$000() -> access$000
com.google.common.base.FinalizableReferenceQueue$DecoupledLoader -> com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:
    java.lang.String LOADING_ERROR -> LOADING_ERROR
    java.lang.Class loadFinalizer() -> loadFinalizer
    java.net.URL getBaseUrl() -> getBaseUrl
    java.net.URLClassLoader newLoader(java.net.URL) -> newLoader
com.google.common.base.FinalizableReferenceQueue$DirectLoader -> com.google.common.base.FinalizableReferenceQueue$DirectLoader:
    java.lang.Class loadFinalizer() -> loadFinalizer
com.google.common.base.FinalizableReferenceQueue$FinalizerLoader -> com.google.common.base.FinalizableReferenceQueue$FinalizerLoader:
    java.lang.Class loadFinalizer() -> loadFinalizer
com.google.common.base.FinalizableReferenceQueue$SystemLoader -> com.google.common.base.FinalizableReferenceQueue$SystemLoader:
    boolean disabled -> disabled
    java.lang.Class loadFinalizer() -> loadFinalizer
com.google.common.base.FinalizableSoftReference -> com.google.common.base.FinalizableSoftReference:
com.google.common.base.FinalizableWeakReference -> com.google.common.base.FinalizableWeakReference:
com.google.common.base.Function -> com.google.common.base.Function:
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.google.common.base.FunctionalEquivalence -> com.google.common.base.FunctionalEquivalence:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Function function -> function
    com.google.common.base.Equivalence resultEquivalence -> resultEquivalence
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions -> com.google.common.base.Functions:
    com.google.common.base.Function toStringFunction() -> toStringFunction
    com.google.common.base.Function identity() -> identity
    com.google.common.base.Function forMap(java.util.Map) -> forMap
    com.google.common.base.Function forMap(java.util.Map,java.lang.Object) -> forMap
    com.google.common.base.Function compose(com.google.common.base.Function,com.google.common.base.Function) -> compose
    com.google.common.base.Function forPredicate(com.google.common.base.Predicate) -> forPredicate
    com.google.common.base.Function constant(java.lang.Object) -> constant
    com.google.common.base.Function forSupplier(com.google.common.base.Supplier) -> forSupplier
com.google.common.base.Functions$1 -> com.google.common.base.Functions$1:
com.google.common.base.Functions$ConstantFunction -> com.google.common.base.Functions$ConstantFunction:
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$ForMapWithDefault -> com.google.common.base.Functions$ForMapWithDefault:
    java.util.Map map -> map
    java.lang.Object defaultValue -> defaultValue
    long serialVersionUID -> serialVersionUID
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$FunctionComposition -> com.google.common.base.Functions$FunctionComposition:
    com.google.common.base.Function g -> g
    com.google.common.base.Function f -> f
    long serialVersionUID -> serialVersionUID
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$FunctionForMapNoDefault -> com.google.common.base.Functions$FunctionForMapNoDefault:
    java.util.Map map -> map
    long serialVersionUID -> serialVersionUID
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$IdentityFunction -> com.google.common.base.Functions$IdentityFunction:
    com.google.common.base.Functions$IdentityFunction INSTANCE -> INSTANCE
    com.google.common.base.Functions$IdentityFunction[] $VALUES -> $VALUES
    com.google.common.base.Functions$IdentityFunction[] values() -> values
    com.google.common.base.Functions$IdentityFunction valueOf(java.lang.String) -> valueOf
    java.lang.Object apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Functions$PredicateFunction -> com.google.common.base.Functions$PredicateFunction:
    com.google.common.base.Predicate predicate -> predicate
    long serialVersionUID -> serialVersionUID
    java.lang.Boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.base.Functions$SupplierFunction -> com.google.common.base.Functions$SupplierFunction:
    com.google.common.base.Supplier supplier -> supplier
    long serialVersionUID -> serialVersionUID
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$ToStringFunction -> com.google.common.base.Functions$ToStringFunction:
    com.google.common.base.Functions$ToStringFunction INSTANCE -> INSTANCE
    com.google.common.base.Functions$ToStringFunction[] $VALUES -> $VALUES
    com.google.common.base.Functions$ToStringFunction[] values() -> values
    com.google.common.base.Functions$ToStringFunction valueOf(java.lang.String) -> valueOf
    java.lang.String apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.base.Joiner -> com.google.common.base.Joiner:
    java.lang.String separator -> separator
    com.google.common.base.Joiner on(java.lang.String) -> on
    com.google.common.base.Joiner on(char) -> on
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Iterable) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Object[]) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Object,java.lang.Object,java.lang.Object[]) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object[]) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object,java.lang.Object,java.lang.Object[]) -> appendTo
    java.lang.String join(java.lang.Iterable) -> join
    java.lang.String join(java.util.Iterator) -> join
    java.lang.String join(java.lang.Object[]) -> join
    java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[]) -> join
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner skipNulls() -> skipNulls
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
    java.lang.CharSequence toString(java.lang.Object) -> toString
    java.lang.Iterable iterable(java.lang.Object,java.lang.Object,java.lang.Object[]) -> iterable
    java.lang.String access$100(com.google.common.base.Joiner) -> access$100
com.google.common.base.Joiner$1 -> com.google.common.base.Joiner$1:
    java.lang.String val$nullText -> val$nullText
    com.google.common.base.Joiner this$0 -> this$0
    java.lang.CharSequence toString(java.lang.Object) -> toString
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner skipNulls() -> skipNulls
com.google.common.base.Joiner$2 -> com.google.common.base.Joiner$2:
    com.google.common.base.Joiner this$0 -> this$0
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
com.google.common.base.Joiner$3 -> com.google.common.base.Joiner$3:
    java.lang.Object[] val$rest -> val$rest
    java.lang.Object val$first -> val$first
    java.lang.Object val$second -> val$second
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.base.Joiner$MapJoiner -> com.google.common.base.Joiner$MapJoiner:
    com.google.common.base.Joiner joiner -> joiner
    java.lang.String keyValueSeparator -> keyValueSeparator
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Map) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Map) -> appendTo
    java.lang.String join(java.util.Map) -> join
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Iterable) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> appendTo
    java.lang.String join(java.lang.Iterable) -> join
    java.lang.String join(java.util.Iterator) -> join
    com.google.common.base.Joiner$MapJoiner useForNull(java.lang.String) -> useForNull
com.google.common.base.MoreObjects -> com.google.common.base.MoreObjects:
    java.lang.Object firstNonNull(java.lang.Object,java.lang.Object) -> firstNonNull
    com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object) -> toStringHelper
    com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Class) -> toStringHelper
    com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String) -> toStringHelper
    java.lang.String simpleName(java.lang.Class) -> simpleName
com.google.common.base.MoreObjects$1 -> com.google.common.base.MoreObjects$1:
com.google.common.base.MoreObjects$ToStringHelper -> com.google.common.base.MoreObjects$ToStringHelper:
    java.lang.String className -> className
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderHead -> holderHead
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderTail -> holderTail
    boolean omitNullValues -> omitNullValues
    com.google.common.base.MoreObjects$ToStringHelper omitNullValues() -> omitNullValues
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,boolean) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,char) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,double) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,float) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,int) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,long) -> add
    com.google.common.base.MoreObjects$ToStringHelper addValue(java.lang.Object) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(boolean) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(char) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(double) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(float) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(int) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(long) -> addValue
    java.lang.String toString() -> toString
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder addHolder() -> addHolder
    com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.Object) -> addHolder
    com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.String,java.lang.Object) -> addHolder
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder -> com.google.common.base.MoreObjects$ToStringHelper$ValueHolder:
    java.lang.String name -> name
    java.lang.Object value -> value
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder next -> next
com.google.common.base.Objects -> com.google.common.base.Objects:
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    int hashCode(java.lang.Object[]) -> hashCode
    com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.Object) -> toStringHelper
    com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.Class) -> toStringHelper
    com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String) -> toStringHelper
    java.lang.Object firstNonNull(java.lang.Object,java.lang.Object) -> firstNonNull
com.google.common.base.Objects$1 -> com.google.common.base.Objects$1:
com.google.common.base.Objects$ToStringHelper -> com.google.common.base.Objects$ToStringHelper:
    java.lang.String className -> className
    com.google.common.base.Objects$ToStringHelper$ValueHolder holderHead -> holderHead
    com.google.common.base.Objects$ToStringHelper$ValueHolder holderTail -> holderTail
    boolean omitNullValues -> omitNullValues
    com.google.common.base.Objects$ToStringHelper omitNullValues() -> omitNullValues
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,boolean) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,char) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,double) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,float) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,int) -> add
    com.google.common.base.Objects$ToStringHelper add(java.lang.String,long) -> add
    com.google.common.base.Objects$ToStringHelper addValue(java.lang.Object) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(boolean) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(char) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(double) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(float) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(int) -> addValue
    com.google.common.base.Objects$ToStringHelper addValue(long) -> addValue
    java.lang.String toString() -> toString
    com.google.common.base.Objects$ToStringHelper$ValueHolder addHolder() -> addHolder
    com.google.common.base.Objects$ToStringHelper addHolder(java.lang.Object) -> addHolder
    com.google.common.base.Objects$ToStringHelper addHolder(java.lang.String,java.lang.Object) -> addHolder
com.google.common.base.Objects$ToStringHelper$ValueHolder -> com.google.common.base.Objects$ToStringHelper$ValueHolder:
    java.lang.String name -> name
    java.lang.Object value -> value
    com.google.common.base.Objects$ToStringHelper$ValueHolder next -> next
com.google.common.base.Optional -> com.google.common.base.Optional:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Optional absent() -> absent
    com.google.common.base.Optional of(java.lang.Object) -> of
    com.google.common.base.Optional fromNullable(java.lang.Object) -> fromNullable
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Iterable presentInstances(java.lang.Iterable) -> presentInstances
com.google.common.base.Optional$1 -> com.google.common.base.Optional$1:
    java.lang.Iterable val$optionals -> val$optionals
    java.util.Iterator iterator() -> iterator
com.google.common.base.Optional$1$1 -> com.google.common.base.Optional$1$1:
    java.util.Iterator iterator -> iterator
    com.google.common.base.Optional$1 this$0 -> this$0
    java.lang.Object computeNext() -> computeNext
com.google.common.base.PairwiseEquivalence -> com.google.common.base.PairwiseEquivalence:
    com.google.common.base.Equivalence elementEquivalence -> elementEquivalence
    long serialVersionUID -> serialVersionUID
    boolean doEquivalent(java.lang.Iterable,java.lang.Iterable) -> doEquivalent
    int doHash(java.lang.Iterable) -> doHash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int doHash(java.lang.Object) -> doHash
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
com.google.common.base.Platform -> com.google.common.base.Platform:
    long systemNanoTime() -> systemNanoTime
    com.google.common.base.CharMatcher precomputeCharMatcher(com.google.common.base.CharMatcher) -> precomputeCharMatcher
    com.google.common.base.Optional getEnumIfPresent(java.lang.Class,java.lang.String) -> getEnumIfPresent
com.google.common.base.Preconditions -> com.google.common.base.Preconditions:
    void checkArgument(boolean) -> checkArgument
    void checkArgument(boolean,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object[]) -> checkArgument
    void checkState(boolean) -> checkState
    void checkState(boolean,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object[]) -> checkState
    java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> checkNotNull
    int checkElementIndex(int,int) -> checkElementIndex
    int checkElementIndex(int,int,java.lang.String) -> checkElementIndex
    java.lang.String badElementIndex(int,int,java.lang.String) -> badElementIndex
    int checkPositionIndex(int,int) -> checkPositionIndex
    int checkPositionIndex(int,int,java.lang.String) -> checkPositionIndex
    java.lang.String badPositionIndex(int,int,java.lang.String) -> badPositionIndex
    void checkPositionIndexes(int,int,int) -> checkPositionIndexes
    java.lang.String badPositionIndexes(int,int,int) -> badPositionIndexes
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
com.google.common.base.Predicate -> com.google.common.base.Predicate:
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.google.common.base.Predicates -> com.google.common.base.Predicates:
    com.google.common.base.Joiner COMMA_JOINER -> COMMA_JOINER
    com.google.common.base.Predicate alwaysTrue() -> alwaysTrue
    com.google.common.base.Predicate alwaysFalse() -> alwaysFalse
    com.google.common.base.Predicate isNull() -> isNull
    com.google.common.base.Predicate notNull() -> notNull
    com.google.common.base.Predicate not(com.google.common.base.Predicate) -> not
    com.google.common.base.Predicate and(java.lang.Iterable) -> and
    com.google.common.base.Predicate and(com.google.common.base.Predicate[]) -> and
    com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate) -> and
    com.google.common.base.Predicate or(java.lang.Iterable) -> or
    com.google.common.base.Predicate or(com.google.common.base.Predicate[]) -> or
    com.google.common.base.Predicate or(com.google.common.base.Predicate,com.google.common.base.Predicate) -> or
    com.google.common.base.Predicate equalTo(java.lang.Object) -> equalTo
    com.google.common.base.Predicate instanceOf(java.lang.Class) -> instanceOf
    com.google.common.base.Predicate assignableFrom(java.lang.Class) -> assignableFrom
    com.google.common.base.Predicate in(java.util.Collection) -> in
    com.google.common.base.Predicate compose(com.google.common.base.Predicate,com.google.common.base.Function) -> compose
    com.google.common.base.Predicate containsPattern(java.lang.String) -> containsPattern
    com.google.common.base.Predicate contains(java.util.regex.Pattern) -> contains
    java.util.List asList(com.google.common.base.Predicate,com.google.common.base.Predicate) -> asList
    java.util.List defensiveCopy(java.lang.Object[]) -> defensiveCopy
    java.util.List defensiveCopy(java.lang.Iterable) -> defensiveCopy
    com.google.common.base.Joiner access$800() -> access$800
com.google.common.base.Predicates$1 -> com.google.common.base.Predicates$1:
com.google.common.base.Predicates$AndPredicate -> com.google.common.base.Predicates$AndPredicate:
    java.util.List components -> components
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.base.Predicates$AssignableFromPredicate -> com.google.common.base.Predicates$AssignableFromPredicate:
    java.lang.Class clazz -> clazz
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Class) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$CompositionPredicate -> com.google.common.base.Predicates$CompositionPredicate:
    com.google.common.base.Predicate p -> p
    com.google.common.base.Function f -> f
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ContainsPatternFromStringPredicate -> com.google.common.base.Predicates$ContainsPatternFromStringPredicate:
    long serialVersionUID -> serialVersionUID
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ContainsPatternPredicate -> com.google.common.base.Predicates$ContainsPatternPredicate:
    java.util.regex.Pattern pattern -> pattern
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.CharSequence) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$InPredicate -> com.google.common.base.Predicates$InPredicate:
    java.util.Collection target -> target
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Predicates$InstanceOfPredicate -> com.google.common.base.Predicates$InstanceOfPredicate:
    java.lang.Class clazz -> clazz
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.base.Predicates$IsEqualToPredicate -> com.google.common.base.Predicates$IsEqualToPredicate:
    java.lang.Object target -> target
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.base.Predicates$NotPredicate -> com.google.common.base.Predicates$NotPredicate:
    com.google.common.base.Predicate predicate -> predicate
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate -> com.google.common.base.Predicates$ObjectPredicate:
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_TRUE -> ALWAYS_TRUE
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_FALSE -> ALWAYS_FALSE
    com.google.common.base.Predicates$ObjectPredicate IS_NULL -> IS_NULL
    com.google.common.base.Predicates$ObjectPredicate NOT_NULL -> NOT_NULL
    com.google.common.base.Predicates$ObjectPredicate[] $VALUES -> $VALUES
    com.google.common.base.Predicates$ObjectPredicate[] values() -> values
    com.google.common.base.Predicates$ObjectPredicate valueOf(java.lang.String) -> valueOf
    com.google.common.base.Predicate withNarrowedType() -> withNarrowedType
com.google.common.base.Predicates$ObjectPredicate$1 -> com.google.common.base.Predicates$ObjectPredicate$1:
    boolean apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$2 -> com.google.common.base.Predicates$ObjectPredicate$2:
    boolean apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$3 -> com.google.common.base.Predicates$ObjectPredicate$3:
    boolean apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$4 -> com.google.common.base.Predicates$ObjectPredicate$4:
    boolean apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Predicates$OrPredicate -> com.google.common.base.Predicates$OrPredicate:
    java.util.List components -> components
    long serialVersionUID -> serialVersionUID
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.base.Present -> com.google.common.base.Present:
    java.lang.Object reference -> reference
    long serialVersionUID -> serialVersionUID
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.SmallCharMatcher -> com.google.common.base.SmallCharMatcher:
    int MAX_SIZE -> MAX_SIZE
    char[] table -> table
    boolean containsZero -> containsZero
    long filter -> filter
    int C1 -> C1
    int C2 -> C2
    double DESIRED_LOAD_FACTOR -> DESIRED_LOAD_FACTOR
    int smear(int) -> smear
    boolean checkFilter(int) -> checkFilter
    int chooseTableSize(int) -> chooseTableSize
    com.google.common.base.CharMatcher from(java.util.BitSet,java.lang.String) -> from
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.Splitter -> com.google.common.base.Splitter:
    com.google.common.base.CharMatcher trimmer -> trimmer
    boolean omitEmptyStrings -> omitEmptyStrings
    com.google.common.base.Splitter$Strategy strategy -> strategy
    int limit -> limit
    com.google.common.base.Splitter on(char) -> on
    com.google.common.base.Splitter on(com.google.common.base.CharMatcher) -> on
    com.google.common.base.Splitter on(java.lang.String) -> on
    com.google.common.base.Splitter on(java.util.regex.Pattern) -> on
    com.google.common.base.Splitter onPattern(java.lang.String) -> onPattern
    com.google.common.base.Splitter fixedLength(int) -> fixedLength
    com.google.common.base.Splitter omitEmptyStrings() -> omitEmptyStrings
    com.google.common.base.Splitter limit(int) -> limit
    com.google.common.base.Splitter trimResults() -> trimResults
    com.google.common.base.Splitter trimResults(com.google.common.base.CharMatcher) -> trimResults
    java.lang.Iterable split(java.lang.CharSequence) -> split
    java.util.Iterator splittingIterator(java.lang.CharSequence) -> splittingIterator
    java.util.List splitToList(java.lang.CharSequence) -> splitToList
    com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
    com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(char) -> withKeyValueSeparator
    com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(com.google.common.base.Splitter) -> withKeyValueSeparator
    java.util.Iterator access$000(com.google.common.base.Splitter,java.lang.CharSequence) -> access$000
    com.google.common.base.CharMatcher access$200(com.google.common.base.Splitter) -> access$200
    boolean access$300(com.google.common.base.Splitter) -> access$300
    int access$400(com.google.common.base.Splitter) -> access$400
com.google.common.base.Splitter$1 -> com.google.common.base.Splitter$1:
    com.google.common.base.CharMatcher val$separatorMatcher -> val$separatorMatcher
    com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.Splitter$1$1 -> com.google.common.base.Splitter$1$1:
    com.google.common.base.Splitter$1 this$0 -> this$0
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
com.google.common.base.Splitter$2 -> com.google.common.base.Splitter$2:
    java.lang.String val$separator -> val$separator
    com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.Splitter$2$1 -> com.google.common.base.Splitter$2$1:
    com.google.common.base.Splitter$2 this$0 -> this$0
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
com.google.common.base.Splitter$3 -> com.google.common.base.Splitter$3:
    java.util.regex.Pattern val$separatorPattern -> val$separatorPattern
    com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.Splitter$3$1 -> com.google.common.base.Splitter$3$1:
    java.util.regex.Matcher val$matcher -> val$matcher
    com.google.common.base.Splitter$3 this$0 -> this$0
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
com.google.common.base.Splitter$4 -> com.google.common.base.Splitter$4:
    int val$length -> val$length
    com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.Splitter$4$1 -> com.google.common.base.Splitter$4$1:
    com.google.common.base.Splitter$4 this$0 -> this$0
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
com.google.common.base.Splitter$5 -> com.google.common.base.Splitter$5:
    java.lang.CharSequence val$sequence -> val$sequence
    com.google.common.base.Splitter this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.google.common.base.Splitter$MapSplitter -> com.google.common.base.Splitter$MapSplitter:
    java.lang.String INVALID_ENTRY_MESSAGE -> INVALID_ENTRY_MESSAGE
    com.google.common.base.Splitter outerSplitter -> outerSplitter
    com.google.common.base.Splitter entrySplitter -> entrySplitter
    java.util.Map split(java.lang.CharSequence) -> split
com.google.common.base.Splitter$SplittingIterator -> com.google.common.base.Splitter$SplittingIterator:
    java.lang.CharSequence toSplit -> toSplit
    com.google.common.base.CharMatcher trimmer -> trimmer
    boolean omitEmptyStrings -> omitEmptyStrings
    int offset -> offset
    int limit -> limit
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
    java.lang.String computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.base.Splitter$Strategy -> com.google.common.base.Splitter$Strategy:
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.StandardSystemProperty -> com.google.common.base.StandardSystemProperty:
    com.google.common.base.StandardSystemProperty JAVA_VERSION -> JAVA_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VENDOR -> JAVA_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VENDOR_URL -> JAVA_VENDOR_URL
    com.google.common.base.StandardSystemProperty JAVA_HOME -> JAVA_HOME
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_VERSION -> JAVA_VM_SPECIFICATION_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_VENDOR -> JAVA_VM_SPECIFICATION_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_NAME -> JAVA_VM_SPECIFICATION_NAME
    com.google.common.base.StandardSystemProperty JAVA_VM_VERSION -> JAVA_VM_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VM_VENDOR -> JAVA_VM_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VM_NAME -> JAVA_VM_NAME
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_VERSION -> JAVA_SPECIFICATION_VERSION
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_VENDOR -> JAVA_SPECIFICATION_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_NAME -> JAVA_SPECIFICATION_NAME
    com.google.common.base.StandardSystemProperty JAVA_CLASS_VERSION -> JAVA_CLASS_VERSION
    com.google.common.base.StandardSystemProperty JAVA_CLASS_PATH -> JAVA_CLASS_PATH
    com.google.common.base.StandardSystemProperty JAVA_LIBRARY_PATH -> JAVA_LIBRARY_PATH
    com.google.common.base.StandardSystemProperty JAVA_IO_TMPDIR -> JAVA_IO_TMPDIR
    com.google.common.base.StandardSystemProperty JAVA_COMPILER -> JAVA_COMPILER
    com.google.common.base.StandardSystemProperty JAVA_EXT_DIRS -> JAVA_EXT_DIRS
    com.google.common.base.StandardSystemProperty OS_NAME -> OS_NAME
    com.google.common.base.StandardSystemProperty OS_ARCH -> OS_ARCH
    com.google.common.base.StandardSystemProperty OS_VERSION -> OS_VERSION
    com.google.common.base.StandardSystemProperty FILE_SEPARATOR -> FILE_SEPARATOR
    com.google.common.base.StandardSystemProperty PATH_SEPARATOR -> PATH_SEPARATOR
    com.google.common.base.StandardSystemProperty LINE_SEPARATOR -> LINE_SEPARATOR
    com.google.common.base.StandardSystemProperty USER_NAME -> USER_NAME
    com.google.common.base.StandardSystemProperty USER_HOME -> USER_HOME
    com.google.common.base.StandardSystemProperty USER_DIR -> USER_DIR
    java.lang.String key -> key
    com.google.common.base.StandardSystemProperty[] $VALUES -> $VALUES
    com.google.common.base.StandardSystemProperty[] values() -> values
    com.google.common.base.StandardSystemProperty valueOf(java.lang.String) -> valueOf
    java.lang.String key() -> key
    java.lang.String value() -> value
    java.lang.String toString() -> toString
com.google.common.base.Stopwatch -> com.google.common.base.Stopwatch:
    com.google.common.base.Ticker ticker -> ticker
    boolean isRunning -> isRunning
    long elapsedNanos -> elapsedNanos
    long startTick -> startTick
    com.google.common.base.Stopwatch createUnstarted() -> createUnstarted
    com.google.common.base.Stopwatch createUnstarted(com.google.common.base.Ticker) -> createUnstarted
    com.google.common.base.Stopwatch createStarted() -> createStarted
    com.google.common.base.Stopwatch createStarted(com.google.common.base.Ticker) -> createStarted
    boolean isRunning() -> isRunning
    com.google.common.base.Stopwatch start() -> start
    com.google.common.base.Stopwatch stop() -> stop
    com.google.common.base.Stopwatch reset() -> reset
    long elapsedNanos() -> elapsedNanos
    long elapsed(java.util.concurrent.TimeUnit) -> elapsed
    java.lang.String toString() -> toString
    java.util.concurrent.TimeUnit chooseUnit(long) -> chooseUnit
    java.lang.String abbreviate(java.util.concurrent.TimeUnit) -> abbreviate
com.google.common.base.Stopwatch$1 -> com.google.common.base.Stopwatch$1:
    int[] $SwitchMap$java$util$concurrent$TimeUnit -> $SwitchMap$java$util$concurrent$TimeUnit
com.google.common.base.Strings -> com.google.common.base.Strings:
    java.lang.String nullToEmpty(java.lang.String) -> nullToEmpty
    java.lang.String emptyToNull(java.lang.String) -> emptyToNull
    boolean isNullOrEmpty(java.lang.String) -> isNullOrEmpty
    java.lang.String padStart(java.lang.String,int,char) -> padStart
    java.lang.String padEnd(java.lang.String,int,char) -> padEnd
    java.lang.String repeat(java.lang.String,int) -> repeat
    java.lang.String commonPrefix(java.lang.CharSequence,java.lang.CharSequence) -> commonPrefix
    java.lang.String commonSuffix(java.lang.CharSequence,java.lang.CharSequence) -> commonSuffix
    boolean validSurrogatePairAt(java.lang.CharSequence,int) -> validSurrogatePairAt
com.google.common.base.Supplier -> com.google.common.base.Supplier:
    java.lang.Object get() -> get
com.google.common.base.Suppliers -> com.google.common.base.Suppliers:
    com.google.common.base.Supplier compose(com.google.common.base.Function,com.google.common.base.Supplier) -> compose
    com.google.common.base.Supplier memoize(com.google.common.base.Supplier) -> memoize
    com.google.common.base.Supplier memoizeWithExpiration(com.google.common.base.Supplier,long,java.util.concurrent.TimeUnit) -> memoizeWithExpiration
    com.google.common.base.Supplier ofInstance(java.lang.Object) -> ofInstance
    com.google.common.base.Supplier synchronizedSupplier(com.google.common.base.Supplier) -> synchronizedSupplier
    com.google.common.base.Function supplierFunction() -> supplierFunction
com.google.common.base.Suppliers$ExpiringMemoizingSupplier -> com.google.common.base.Suppliers$ExpiringMemoizingSupplier:
    com.google.common.base.Supplier delegate -> delegate
    long durationNanos -> durationNanos
    java.lang.Object value -> value
    long expirationNanos -> expirationNanos
    long serialVersionUID -> serialVersionUID
    java.lang.Object get() -> get
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$MemoizingSupplier -> com.google.common.base.Suppliers$MemoizingSupplier:
    com.google.common.base.Supplier delegate -> delegate
    boolean initialized -> initialized
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    java.lang.Object get() -> get
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$SupplierComposition -> com.google.common.base.Suppliers$SupplierComposition:
    com.google.common.base.Function function -> function
    com.google.common.base.Supplier supplier -> supplier
    long serialVersionUID -> serialVersionUID
    java.lang.Object get() -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$SupplierFunction -> com.google.common.base.Suppliers$SupplierFunction:
com.google.common.base.Suppliers$SupplierFunctionImpl -> com.google.common.base.Suppliers$SupplierFunctionImpl:
    com.google.common.base.Suppliers$SupplierFunctionImpl INSTANCE -> INSTANCE
    com.google.common.base.Suppliers$SupplierFunctionImpl[] $VALUES -> $VALUES
    com.google.common.base.Suppliers$SupplierFunctionImpl[] values() -> values
    com.google.common.base.Suppliers$SupplierFunctionImpl valueOf(java.lang.String) -> valueOf
    java.lang.Object apply(com.google.common.base.Supplier) -> apply
    java.lang.String toString() -> toString
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.base.Suppliers$SupplierOfInstance -> com.google.common.base.Suppliers$SupplierOfInstance:
    java.lang.Object instance -> instance
    long serialVersionUID -> serialVersionUID
    java.lang.Object get() -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$ThreadSafeSupplier -> com.google.common.base.Suppliers$ThreadSafeSupplier:
    com.google.common.base.Supplier delegate -> delegate
    long serialVersionUID -> serialVersionUID
    java.lang.Object get() -> get
    java.lang.String toString() -> toString
com.google.common.base.Throwables -> com.google.common.base.Throwables:
    void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class) -> propagateIfInstanceOf
    void propagateIfPossible(java.lang.Throwable) -> propagateIfPossible
    void propagateIfPossible(java.lang.Throwable,java.lang.Class) -> propagateIfPossible
    void propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class) -> propagateIfPossible
    java.lang.RuntimeException propagate(java.lang.Throwable) -> propagate
    java.lang.Throwable getRootCause(java.lang.Throwable) -> getRootCause
    java.util.List getCausalChain(java.lang.Throwable) -> getCausalChain
    java.lang.String getStackTraceAsString(java.lang.Throwable) -> getStackTraceAsString
com.google.common.base.Ticker -> com.google.common.base.Ticker:
    com.google.common.base.Ticker SYSTEM_TICKER -> SYSTEM_TICKER
    long read() -> read
    com.google.common.base.Ticker systemTicker() -> systemTicker
com.google.common.base.Ticker$1 -> com.google.common.base.Ticker$1:
    long read() -> read
com.google.common.base.Utf8 -> com.google.common.base.Utf8:
    int encodedLength(java.lang.CharSequence) -> encodedLength
    int encodedLengthGeneral(java.lang.CharSequence,int) -> encodedLengthGeneral
    boolean isWellFormed(byte[]) -> isWellFormed
    boolean isWellFormed(byte[],int,int) -> isWellFormed
    boolean isWellFormedSlowPath(byte[],int,int) -> isWellFormedSlowPath
com.google.common.base.Verify -> com.google.common.base.Verify:
    void verify(boolean) -> verify
    void verify(boolean,java.lang.String,java.lang.Object[]) -> verify
    java.lang.Object verifyNotNull(java.lang.Object) -> verifyNotNull
    java.lang.Object verifyNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> verifyNotNull
com.google.common.base.VerifyException -> com.google.common.base.VerifyException:
com.google.common.base.internal.Finalizer -> com.google.common.base.internal.Finalizer:
    java.util.logging.Logger logger -> logger
    java.lang.String FINALIZABLE_REFERENCE -> FINALIZABLE_REFERENCE
    java.lang.ref.WeakReference finalizableReferenceClassReference -> finalizableReferenceClassReference
    java.lang.ref.PhantomReference frqReference -> frqReference
    java.lang.ref.ReferenceQueue queue -> queue
    java.lang.reflect.Field inheritableThreadLocals -> inheritableThreadLocals
    void startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference) -> startFinalizer
    void run() -> run
    boolean cleanUp(java.lang.ref.Reference) -> cleanUp
    java.lang.reflect.Method getFinalizeReferentMethod() -> getFinalizeReferentMethod
    java.lang.reflect.Field getInheritableThreadLocalsField() -> getInheritableThreadLocalsField
com.google.common.base.package-info -> com.google.common.base.package-info:
com.google.common.cache.AbstractCache -> com.google.common.cache.AbstractCache:
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void cleanUp() -> cleanUp
    long size() -> size
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    com.google.common.cache.CacheStats stats() -> stats
    java.util.concurrent.ConcurrentMap asMap() -> asMap
com.google.common.cache.AbstractCache$SimpleStatsCounter -> com.google.common.cache.AbstractCache$SimpleStatsCounter:
    com.google.common.cache.LongAddable hitCount -> hitCount
    com.google.common.cache.LongAddable missCount -> missCount
    com.google.common.cache.LongAddable loadSuccessCount -> loadSuccessCount
    com.google.common.cache.LongAddable loadExceptionCount -> loadExceptionCount
    com.google.common.cache.LongAddable totalLoadTime -> totalLoadTime
    com.google.common.cache.LongAddable evictionCount -> evictionCount
    void recordHits(int) -> recordHits
    void recordMisses(int) -> recordMisses
    void recordLoadSuccess(long) -> recordLoadSuccess
    void recordLoadException(long) -> recordLoadException
    void recordEviction() -> recordEviction
    com.google.common.cache.CacheStats snapshot() -> snapshot
    void incrementBy(com.google.common.cache.AbstractCache$StatsCounter) -> incrementBy
com.google.common.cache.AbstractCache$StatsCounter -> com.google.common.cache.AbstractCache$StatsCounter:
    void recordHits(int) -> recordHits
    void recordMisses(int) -> recordMisses
    void recordLoadSuccess(long) -> recordLoadSuccess
    void recordLoadException(long) -> recordLoadException
    void recordEviction() -> recordEviction
    com.google.common.cache.CacheStats snapshot() -> snapshot
com.google.common.cache.AbstractLoadingCache -> com.google.common.cache.AbstractLoadingCache:
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
com.google.common.cache.Cache -> com.google.common.cache.Cache:
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    long size() -> size
    com.google.common.cache.CacheStats stats() -> stats
    java.util.concurrent.ConcurrentMap asMap() -> asMap
    void cleanUp() -> cleanUp
com.google.common.cache.CacheBuilder -> com.google.common.cache.CacheBuilder:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int DEFAULT_EXPIRATION_NANOS -> DEFAULT_EXPIRATION_NANOS
    int DEFAULT_REFRESH_NANOS -> DEFAULT_REFRESH_NANOS
    com.google.common.base.Supplier NULL_STATS_COUNTER -> NULL_STATS_COUNTER
    com.google.common.cache.CacheStats EMPTY_STATS -> EMPTY_STATS
    com.google.common.base.Supplier CACHE_STATS_COUNTER -> CACHE_STATS_COUNTER
    com.google.common.base.Ticker NULL_TICKER -> NULL_TICKER
    java.util.logging.Logger logger -> logger
    int UNSET_INT -> UNSET_INT
    boolean strictParsing -> strictParsing
    int initialCapacity -> initialCapacity
    int concurrencyLevel -> concurrencyLevel
    long maximumSize -> maximumSize
    long maximumWeight -> maximumWeight
    com.google.common.cache.Weigher weigher -> weigher
    com.google.common.cache.LocalCache$Strength keyStrength -> keyStrength
    com.google.common.cache.LocalCache$Strength valueStrength -> valueStrength
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long expireAfterAccessNanos -> expireAfterAccessNanos
    long refreshNanos -> refreshNanos
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    com.google.common.cache.RemovalListener removalListener -> removalListener
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.base.Supplier statsCounterSupplier -> statsCounterSupplier
    com.google.common.cache.CacheBuilder newBuilder() -> newBuilder
    com.google.common.cache.CacheBuilder from(com.google.common.cache.CacheBuilderSpec) -> from
    com.google.common.cache.CacheBuilder from(java.lang.String) -> from
    com.google.common.cache.CacheBuilder lenientParsing() -> lenientParsing
    com.google.common.cache.CacheBuilder keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
    com.google.common.base.Equivalence getKeyEquivalence() -> getKeyEquivalence
    com.google.common.cache.CacheBuilder valueEquivalence(com.google.common.base.Equivalence) -> valueEquivalence
    com.google.common.base.Equivalence getValueEquivalence() -> getValueEquivalence
    com.google.common.cache.CacheBuilder initialCapacity(int) -> initialCapacity
    int getInitialCapacity() -> getInitialCapacity
    com.google.common.cache.CacheBuilder concurrencyLevel(int) -> concurrencyLevel
    int getConcurrencyLevel() -> getConcurrencyLevel
    com.google.common.cache.CacheBuilder maximumSize(long) -> maximumSize
    com.google.common.cache.CacheBuilder maximumWeight(long) -> maximumWeight
    com.google.common.cache.CacheBuilder weigher(com.google.common.cache.Weigher) -> weigher
    long getMaximumWeight() -> getMaximumWeight
    com.google.common.cache.Weigher getWeigher() -> getWeigher
    com.google.common.cache.CacheBuilder weakKeys() -> weakKeys
    com.google.common.cache.CacheBuilder setKeyStrength(com.google.common.cache.LocalCache$Strength) -> setKeyStrength
    com.google.common.cache.LocalCache$Strength getKeyStrength() -> getKeyStrength
    com.google.common.cache.CacheBuilder weakValues() -> weakValues
    com.google.common.cache.CacheBuilder softValues() -> softValues
    com.google.common.cache.CacheBuilder setValueStrength(com.google.common.cache.LocalCache$Strength) -> setValueStrength
    com.google.common.cache.LocalCache$Strength getValueStrength() -> getValueStrength
    com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    long getExpireAfterWriteNanos() -> getExpireAfterWriteNanos
    com.google.common.cache.CacheBuilder expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    long getExpireAfterAccessNanos() -> getExpireAfterAccessNanos
    com.google.common.cache.CacheBuilder refreshAfterWrite(long,java.util.concurrent.TimeUnit) -> refreshAfterWrite
    long getRefreshNanos() -> getRefreshNanos
    com.google.common.cache.CacheBuilder ticker(com.google.common.base.Ticker) -> ticker
    com.google.common.base.Ticker getTicker(boolean) -> getTicker
    com.google.common.cache.CacheBuilder removalListener(com.google.common.cache.RemovalListener) -> removalListener
    com.google.common.cache.RemovalListener getRemovalListener() -> getRemovalListener
    com.google.common.cache.CacheBuilder recordStats() -> recordStats
    boolean isRecordingStats() -> isRecordingStats
    com.google.common.base.Supplier getStatsCounterSupplier() -> getStatsCounterSupplier
    com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader) -> build
    com.google.common.cache.Cache build() -> build
    void checkNonLoadingCache() -> checkNonLoadingCache
    void checkWeightWithWeigher() -> checkWeightWithWeigher
    java.lang.String toString() -> toString
com.google.common.cache.CacheBuilder$1 -> com.google.common.cache.CacheBuilder$1:
    void recordHits(int) -> recordHits
    void recordMisses(int) -> recordMisses
    void recordLoadSuccess(long) -> recordLoadSuccess
    void recordLoadException(long) -> recordLoadException
    void recordEviction() -> recordEviction
    com.google.common.cache.CacheStats snapshot() -> snapshot
com.google.common.cache.CacheBuilder$2 -> com.google.common.cache.CacheBuilder$2:
    com.google.common.cache.AbstractCache$StatsCounter get() -> get
    java.lang.Object get() -> get
com.google.common.cache.CacheBuilder$3 -> com.google.common.cache.CacheBuilder$3:
    long read() -> read
com.google.common.cache.CacheBuilder$NullListener -> com.google.common.cache.CacheBuilder$NullListener:
    com.google.common.cache.CacheBuilder$NullListener INSTANCE -> INSTANCE
    com.google.common.cache.CacheBuilder$NullListener[] $VALUES -> $VALUES
    com.google.common.cache.CacheBuilder$NullListener[] values() -> values
    com.google.common.cache.CacheBuilder$NullListener valueOf(java.lang.String) -> valueOf
    void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
com.google.common.cache.CacheBuilder$OneWeigher -> com.google.common.cache.CacheBuilder$OneWeigher:
    com.google.common.cache.CacheBuilder$OneWeigher INSTANCE -> INSTANCE
    com.google.common.cache.CacheBuilder$OneWeigher[] $VALUES -> $VALUES
    com.google.common.cache.CacheBuilder$OneWeigher[] values() -> values
    com.google.common.cache.CacheBuilder$OneWeigher valueOf(java.lang.String) -> valueOf
    int weigh(java.lang.Object,java.lang.Object) -> weigh
com.google.common.cache.CacheBuilderSpec -> com.google.common.cache.CacheBuilderSpec:
    com.google.common.base.Splitter KEYS_SPLITTER -> KEYS_SPLITTER
    com.google.common.base.Splitter KEY_VALUE_SPLITTER -> KEY_VALUE_SPLITTER
    com.google.common.collect.ImmutableMap VALUE_PARSERS -> VALUE_PARSERS
    java.lang.Integer initialCapacity -> initialCapacity
    java.lang.Long maximumSize -> maximumSize
    java.lang.Long maximumWeight -> maximumWeight
    java.lang.Integer concurrencyLevel -> concurrencyLevel
    com.google.common.cache.LocalCache$Strength keyStrength -> keyStrength
    com.google.common.cache.LocalCache$Strength valueStrength -> valueStrength
    java.lang.Boolean recordStats -> recordStats
    long writeExpirationDuration -> writeExpirationDuration
    java.util.concurrent.TimeUnit writeExpirationTimeUnit -> writeExpirationTimeUnit
    long accessExpirationDuration -> accessExpirationDuration
    java.util.concurrent.TimeUnit accessExpirationTimeUnit -> accessExpirationTimeUnit
    long refreshDuration -> refreshDuration
    java.util.concurrent.TimeUnit refreshTimeUnit -> refreshTimeUnit
    java.lang.String specification -> specification
    com.google.common.cache.CacheBuilderSpec parse(java.lang.String) -> parse
    com.google.common.cache.CacheBuilderSpec disableCaching() -> disableCaching
    com.google.common.cache.CacheBuilder toCacheBuilder() -> toCacheBuilder
    java.lang.String toParsableString() -> toParsableString
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Long durationInNanos(long,java.util.concurrent.TimeUnit) -> durationInNanos
com.google.common.cache.CacheBuilderSpec$1 -> com.google.common.cache.CacheBuilderSpec$1:
    int[] $SwitchMap$com$google$common$cache$LocalCache$Strength -> $SwitchMap$com$google$common$cache$LocalCache$Strength
com.google.common.cache.CacheBuilderSpec$AccessDurationParser -> com.google.common.cache.CacheBuilderSpec$AccessDurationParser:
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> parseDuration
com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser -> com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser:
    void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> parseInteger
com.google.common.cache.CacheBuilderSpec$DurationParser -> com.google.common.cache.CacheBuilderSpec$DurationParser:
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> parseDuration
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$InitialCapacityParser -> com.google.common.cache.CacheBuilderSpec$InitialCapacityParser:
    void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> parseInteger
com.google.common.cache.CacheBuilderSpec$IntegerParser -> com.google.common.cache.CacheBuilderSpec$IntegerParser:
    void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> parseInteger
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$KeyStrengthParser -> com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:
    com.google.common.cache.LocalCache$Strength strength -> strength
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$LongParser -> com.google.common.cache.CacheBuilderSpec$LongParser:
    void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> parseLong
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$MaximumSizeParser -> com.google.common.cache.CacheBuilderSpec$MaximumSizeParser:
    void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> parseLong
com.google.common.cache.CacheBuilderSpec$MaximumWeightParser -> com.google.common.cache.CacheBuilderSpec$MaximumWeightParser:
    void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> parseLong
com.google.common.cache.CacheBuilderSpec$RecordStatsParser -> com.google.common.cache.CacheBuilderSpec$RecordStatsParser:
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$RefreshDurationParser -> com.google.common.cache.CacheBuilderSpec$RefreshDurationParser:
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> parseDuration
com.google.common.cache.CacheBuilderSpec$ValueParser -> com.google.common.cache.CacheBuilderSpec$ValueParser:
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$ValueStrengthParser -> com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:
    com.google.common.cache.LocalCache$Strength strength -> strength
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$WriteDurationParser -> com.google.common.cache.CacheBuilderSpec$WriteDurationParser:
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> parseDuration
com.google.common.cache.CacheLoader -> com.google.common.cache.CacheLoader:
    java.lang.Object load(java.lang.Object) -> load
    com.google.common.util.concurrent.ListenableFuture reload(java.lang.Object,java.lang.Object) -> reload
    java.util.Map loadAll(java.lang.Iterable) -> loadAll
    com.google.common.cache.CacheLoader from(com.google.common.base.Function) -> from
    com.google.common.cache.CacheLoader from(com.google.common.base.Supplier) -> from
    com.google.common.cache.CacheLoader asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor) -> asyncReloading
com.google.common.cache.CacheLoader$1 -> com.google.common.cache.CacheLoader$1:
    com.google.common.cache.CacheLoader val$loader -> val$loader
    java.util.concurrent.Executor val$executor -> val$executor
    java.lang.Object load(java.lang.Object) -> load
    com.google.common.util.concurrent.ListenableFuture reload(java.lang.Object,java.lang.Object) -> reload
    java.util.Map loadAll(java.lang.Iterable) -> loadAll
com.google.common.cache.CacheLoader$1$1 -> com.google.common.cache.CacheLoader$1$1:
    java.lang.Object val$key -> val$key
    java.lang.Object val$oldValue -> val$oldValue
    com.google.common.cache.CacheLoader$1 this$0 -> this$0
    java.lang.Object call() -> call
com.google.common.cache.CacheLoader$FunctionToCacheLoader -> com.google.common.cache.CacheLoader$FunctionToCacheLoader:
    com.google.common.base.Function computingFunction -> computingFunction
    long serialVersionUID -> serialVersionUID
    java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.CacheLoader$InvalidCacheLoadException -> com.google.common.cache.CacheLoader$InvalidCacheLoadException:
com.google.common.cache.CacheLoader$SupplierToCacheLoader -> com.google.common.cache.CacheLoader$SupplierToCacheLoader:
    com.google.common.base.Supplier computingSupplier -> computingSupplier
    long serialVersionUID -> serialVersionUID
    java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException -> com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException:
com.google.common.cache.CacheStats -> com.google.common.cache.CacheStats:
    long hitCount -> hitCount
    long missCount -> missCount
    long loadSuccessCount -> loadSuccessCount
    long loadExceptionCount -> loadExceptionCount
    long totalLoadTime -> totalLoadTime
    long evictionCount -> evictionCount
    long requestCount() -> requestCount
    long hitCount() -> hitCount
    double hitRate() -> hitRate
    long missCount() -> missCount
    double missRate() -> missRate
    long loadCount() -> loadCount
    long loadSuccessCount() -> loadSuccessCount
    long loadExceptionCount() -> loadExceptionCount
    double loadExceptionRate() -> loadExceptionRate
    long totalLoadTime() -> totalLoadTime
    double averageLoadPenalty() -> averageLoadPenalty
    long evictionCount() -> evictionCount
    com.google.common.cache.CacheStats minus(com.google.common.cache.CacheStats) -> minus
    com.google.common.cache.CacheStats plus(com.google.common.cache.CacheStats) -> plus
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.cache.ForwardingCache -> com.google.common.cache.ForwardingCache:
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    long size() -> size
    com.google.common.cache.CacheStats stats() -> stats
    java.util.concurrent.ConcurrentMap asMap() -> asMap
    void cleanUp() -> cleanUp
    java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingCache$SimpleForwardingCache -> com.google.common.cache.ForwardingCache$SimpleForwardingCache:
    com.google.common.cache.Cache delegate -> delegate
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingLoadingCache -> com.google.common.cache.ForwardingLoadingCache:
    com.google.common.cache.LoadingCache delegate() -> delegate
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache -> com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:
    com.google.common.cache.LoadingCache delegate -> delegate
    com.google.common.cache.LoadingCache delegate() -> delegate
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.cache.LoadingCache -> com.google.common.cache.LoadingCache:
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
    java.util.concurrent.ConcurrentMap asMap() -> asMap
com.google.common.cache.LocalCache -> com.google.common.cache.LocalCache:
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int CONTAINS_VALUE_RETRIES -> CONTAINS_VALUE_RETRIES
    int DRAIN_THRESHOLD -> DRAIN_THRESHOLD
    int DRAIN_MAX -> DRAIN_MAX
    java.util.logging.Logger logger -> logger
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    com.google.common.cache.LocalCache$Segment[] segments -> segments
    int concurrencyLevel -> concurrencyLevel
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    com.google.common.cache.LocalCache$Strength keyStrength -> keyStrength
    com.google.common.cache.LocalCache$Strength valueStrength -> valueStrength
    long maxWeight -> maxWeight
    com.google.common.cache.Weigher weigher -> weigher
    long expireAfterAccessNanos -> expireAfterAccessNanos
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long refreshNanos -> refreshNanos
    java.util.Queue removalNotificationQueue -> removalNotificationQueue
    com.google.common.cache.RemovalListener removalListener -> removalListener
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.cache.LocalCache$EntryFactory entryFactory -> entryFactory
    com.google.common.cache.AbstractCache$StatsCounter globalStatsCounter -> globalStatsCounter
    com.google.common.cache.CacheLoader defaultLoader -> defaultLoader
    com.google.common.cache.LocalCache$ValueReference UNSET -> UNSET
    java.util.Queue DISCARDING_QUEUE -> DISCARDING_QUEUE
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set entrySet -> entrySet
    boolean evictsBySize() -> evictsBySize
    boolean customWeigher() -> customWeigher
    boolean expires() -> expires
    boolean expiresAfterWrite() -> expiresAfterWrite
    boolean expiresAfterAccess() -> expiresAfterAccess
    boolean refreshes() -> refreshes
    boolean usesAccessQueue() -> usesAccessQueue
    boolean usesWriteQueue() -> usesWriteQueue
    boolean recordsWrite() -> recordsWrite
    boolean recordsAccess() -> recordsAccess
    boolean recordsTime() -> recordsTime
    boolean usesWriteEntries() -> usesWriteEntries
    boolean usesAccessEntries() -> usesAccessEntries
    boolean usesKeyReferences() -> usesKeyReferences
    boolean usesValueReferences() -> usesValueReferences
    com.google.common.cache.LocalCache$ValueReference unset() -> unset
    com.google.common.cache.LocalCache$ReferenceEntry nullEntry() -> nullEntry
    java.util.Queue discardingQueue() -> discardingQueue
    int rehash(int) -> rehash
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
    com.google.common.cache.LocalCache$ValueReference newValueReference(com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,int) -> newValueReference
    int hash(java.lang.Object) -> hash
    void reclaimValue(com.google.common.cache.LocalCache$ValueReference) -> reclaimValue
    void reclaimKey(com.google.common.cache.LocalCache$ReferenceEntry) -> reclaimKey
    boolean isLive(com.google.common.cache.LocalCache$ReferenceEntry,long) -> isLive
    com.google.common.cache.LocalCache$Segment segmentFor(int) -> segmentFor
    com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter) -> createSegment
    java.lang.Object getLiveValue(com.google.common.cache.LocalCache$ReferenceEntry,long) -> getLiveValue
    boolean isExpired(com.google.common.cache.LocalCache$ReferenceEntry,long) -> isExpired
    void connectAccessOrder(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> connectAccessOrder
    void nullifyAccessOrder(com.google.common.cache.LocalCache$ReferenceEntry) -> nullifyAccessOrder
    void connectWriteOrder(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> connectWriteOrder
    void nullifyWriteOrder(com.google.common.cache.LocalCache$ReferenceEntry) -> nullifyWriteOrder
    void processPendingNotifications() -> processPendingNotifications
    com.google.common.cache.LocalCache$Segment[] newSegmentArray(int) -> newSegmentArray
    void cleanUp() -> cleanUp
    boolean isEmpty() -> isEmpty
    long longSize() -> longSize
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object get(java.lang.Object,com.google.common.cache.CacheLoader) -> get
    java.lang.Object getOrLoad(java.lang.Object) -> getOrLoad
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.util.Map loadAll(java.util.Set,com.google.common.cache.CacheLoader) -> loadAll
    com.google.common.cache.LocalCache$ReferenceEntry getEntry(java.lang.Object) -> getEntry
    void refresh(java.lang.Object) -> refresh
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
com.google.common.cache.LocalCache$1 -> com.google.common.cache.LocalCache$1:
    java.lang.Object get() -> get
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ReferenceEntry getEntry() -> getEntry
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.LocalCache$ReferenceEntry) -> copyFor
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    java.lang.Object waitForValue() -> waitForValue
    void notifyNewValue(java.lang.Object) -> notifyNewValue
com.google.common.cache.LocalCache$2 -> com.google.common.cache.LocalCache$2:
    boolean offer(java.lang.Object) -> offer
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    int size() -> size
    java.util.Iterator iterator() -> iterator
com.google.common.cache.LocalCache$AbstractCacheSet -> com.google.common.cache.LocalCache$AbstractCacheSet:
    java.util.concurrent.ConcurrentMap map -> map
    com.google.common.cache.LocalCache this$0 -> this$0
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.google.common.cache.LocalCache$AbstractReferenceEntry -> com.google.common.cache.LocalCache$AbstractReferenceEntry:
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    com.google.common.cache.LocalCache$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$AccessQueue -> com.google.common.cache.LocalCache$AccessQueue:
    com.google.common.cache.LocalCache$ReferenceEntry head -> head
    boolean offer(com.google.common.cache.LocalCache$ReferenceEntry) -> offer
    com.google.common.cache.LocalCache$ReferenceEntry peek() -> peek
    com.google.common.cache.LocalCache$ReferenceEntry poll() -> poll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
com.google.common.cache.LocalCache$AccessQueue$1 -> com.google.common.cache.LocalCache$AccessQueue$1:
    com.google.common.cache.LocalCache$ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.LocalCache$ReferenceEntry previousAccess -> previousAccess
    com.google.common.cache.LocalCache$AccessQueue this$0 -> this$0
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
com.google.common.cache.LocalCache$AccessQueue$2 -> com.google.common.cache.LocalCache$AccessQueue$2:
    com.google.common.cache.LocalCache$AccessQueue this$0 -> this$0
    com.google.common.cache.LocalCache$ReferenceEntry computeNext(com.google.common.cache.LocalCache$ReferenceEntry) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.cache.LocalCache$EntryFactory -> com.google.common.cache.LocalCache$EntryFactory:
    com.google.common.cache.LocalCache$EntryFactory STRONG -> STRONG
    com.google.common.cache.LocalCache$EntryFactory STRONG_ACCESS -> STRONG_ACCESS
    com.google.common.cache.LocalCache$EntryFactory STRONG_WRITE -> STRONG_WRITE
    com.google.common.cache.LocalCache$EntryFactory STRONG_ACCESS_WRITE -> STRONG_ACCESS_WRITE
    com.google.common.cache.LocalCache$EntryFactory WEAK -> WEAK
    com.google.common.cache.LocalCache$EntryFactory WEAK_ACCESS -> WEAK_ACCESS
    com.google.common.cache.LocalCache$EntryFactory WEAK_WRITE -> WEAK_WRITE
    com.google.common.cache.LocalCache$EntryFactory WEAK_ACCESS_WRITE -> WEAK_ACCESS_WRITE
    int ACCESS_MASK -> ACCESS_MASK
    int WRITE_MASK -> WRITE_MASK
    int WEAK_MASK -> WEAK_MASK
    com.google.common.cache.LocalCache$EntryFactory[] factories -> factories
    com.google.common.cache.LocalCache$EntryFactory[] $VALUES -> $VALUES
    com.google.common.cache.LocalCache$EntryFactory[] values() -> values
    com.google.common.cache.LocalCache$EntryFactory valueOf(java.lang.String) -> valueOf
    com.google.common.cache.LocalCache$EntryFactory getFactory(com.google.common.cache.LocalCache$Strength,boolean,boolean) -> getFactory
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
    void copyAccessEntry(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyAccessEntry
    void copyWriteEntry(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyWriteEntry
com.google.common.cache.LocalCache$EntryFactory$1 -> com.google.common.cache.LocalCache$EntryFactory$1:
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
com.google.common.cache.LocalCache$EntryFactory$2 -> com.google.common.cache.LocalCache$EntryFactory$2:
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$3 -> com.google.common.cache.LocalCache$EntryFactory$3:
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$4 -> com.google.common.cache.LocalCache$EntryFactory$4:
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$5 -> com.google.common.cache.LocalCache$EntryFactory$5:
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
com.google.common.cache.LocalCache$EntryFactory$6 -> com.google.common.cache.LocalCache$EntryFactory$6:
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$7 -> com.google.common.cache.LocalCache$EntryFactory$7:
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$8 -> com.google.common.cache.LocalCache$EntryFactory$8:
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryIterator -> com.google.common.cache.LocalCache$EntryIterator:
    com.google.common.cache.LocalCache this$0 -> this$0
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.cache.LocalCache$EntrySet -> com.google.common.cache.LocalCache$EntrySet:
    com.google.common.cache.LocalCache this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.cache.LocalCache$HashIterator -> com.google.common.cache.LocalCache$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    com.google.common.cache.LocalCache$Segment currentSegment -> currentSegment
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> currentTable
    com.google.common.cache.LocalCache$ReferenceEntry nextEntry -> nextEntry
    com.google.common.cache.LocalCache$WriteThroughEntry nextExternal -> nextExternal
    com.google.common.cache.LocalCache$WriteThroughEntry lastReturned -> lastReturned
    com.google.common.cache.LocalCache this$0 -> this$0
    java.lang.Object next() -> next
    void advance() -> advance
    boolean nextInChain() -> nextInChain
    boolean nextInTable() -> nextInTable
    boolean advanceTo(com.google.common.cache.LocalCache$ReferenceEntry) -> advanceTo
    boolean hasNext() -> hasNext
    com.google.common.cache.LocalCache$WriteThroughEntry nextEntry() -> nextEntry
    void remove() -> remove
com.google.common.cache.LocalCache$KeyIterator -> com.google.common.cache.LocalCache$KeyIterator:
    com.google.common.cache.LocalCache this$0 -> this$0
    java.lang.Object next() -> next
com.google.common.cache.LocalCache$KeySet -> com.google.common.cache.LocalCache$KeySet:
    com.google.common.cache.LocalCache this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.cache.LocalCache$LoadingSerializationProxy -> com.google.common.cache.LocalCache$LoadingSerializationProxy:
    long serialVersionUID -> serialVersionUID
    com.google.common.cache.LoadingCache autoDelegate -> autoDelegate
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
    java.lang.Object readResolve() -> readResolve
com.google.common.cache.LocalCache$LoadingValueReference -> com.google.common.cache.LocalCache$LoadingValueReference:
    com.google.common.cache.LocalCache$ValueReference oldValue -> oldValue
    com.google.common.util.concurrent.SettableFuture futureValue -> futureValue
    com.google.common.base.Stopwatch stopwatch -> stopwatch
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    int getWeight() -> getWeight
    boolean set(java.lang.Object) -> set
    boolean setException(java.lang.Throwable) -> setException
    com.google.common.util.concurrent.ListenableFuture fullyFailedFuture(java.lang.Throwable) -> fullyFailedFuture
    void notifyNewValue(java.lang.Object) -> notifyNewValue
    com.google.common.util.concurrent.ListenableFuture loadFuture(java.lang.Object,com.google.common.cache.CacheLoader) -> loadFuture
    long elapsedNanos() -> elapsedNanos
    java.lang.Object waitForValue() -> waitForValue
    java.lang.Object get() -> get
    com.google.common.cache.LocalCache$ValueReference getOldValue() -> getOldValue
    com.google.common.cache.LocalCache$ReferenceEntry getEntry() -> getEntry
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.LocalCache$ReferenceEntry) -> copyFor
com.google.common.cache.LocalCache$LoadingValueReference$1 -> com.google.common.cache.LocalCache$LoadingValueReference$1:
    com.google.common.cache.LocalCache$LoadingValueReference this$0 -> this$0
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.cache.LocalCache$LocalLoadingCache -> com.google.common.cache.LocalCache$LocalLoadingCache:
    long serialVersionUID -> serialVersionUID
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    void refresh(java.lang.Object) -> refresh
    java.lang.Object apply(java.lang.Object) -> apply
    java.lang.Object writeReplace() -> writeReplace
com.google.common.cache.LocalCache$LocalManualCache -> com.google.common.cache.LocalCache$LocalManualCache:
    com.google.common.cache.LocalCache localCache -> localCache
    long serialVersionUID -> serialVersionUID
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    long size() -> size
    java.util.concurrent.ConcurrentMap asMap() -> asMap
    com.google.common.cache.CacheStats stats() -> stats
    void cleanUp() -> cleanUp
    java.lang.Object writeReplace() -> writeReplace
com.google.common.cache.LocalCache$LocalManualCache$1 -> com.google.common.cache.LocalCache$LocalManualCache$1:
    java.util.concurrent.Callable val$valueLoader -> val$valueLoader
    com.google.common.cache.LocalCache$LocalManualCache this$0 -> this$0
    java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.LocalCache$ManualSerializationProxy -> com.google.common.cache.LocalCache$ManualSerializationProxy:
    long serialVersionUID -> serialVersionUID
    com.google.common.cache.LocalCache$Strength keyStrength -> keyStrength
    com.google.common.cache.LocalCache$Strength valueStrength -> valueStrength
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long expireAfterAccessNanos -> expireAfterAccessNanos
    long maxWeight -> maxWeight
    com.google.common.cache.Weigher weigher -> weigher
    int concurrencyLevel -> concurrencyLevel
    com.google.common.cache.RemovalListener removalListener -> removalListener
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.cache.CacheLoader loader -> loader
    com.google.common.cache.Cache delegate -> delegate
    com.google.common.cache.CacheBuilder recreateCacheBuilder() -> recreateCacheBuilder
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.cache.LocalCache$NullEntry -> com.google.common.cache.LocalCache$NullEntry:
    com.google.common.cache.LocalCache$NullEntry INSTANCE -> INSTANCE
    com.google.common.cache.LocalCache$NullEntry[] $VALUES -> $VALUES
    com.google.common.cache.LocalCache$NullEntry[] values() -> values
    com.google.common.cache.LocalCache$NullEntry valueOf(java.lang.String) -> valueOf
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    com.google.common.cache.LocalCache$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$ReferenceEntry -> com.google.common.cache.LocalCache$ReferenceEntry:
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    com.google.common.cache.LocalCache$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$Segment -> com.google.common.cache.LocalCache$Segment:
    com.google.common.cache.LocalCache map -> map
    int count -> count
    long totalWeight -> totalWeight
    int modCount -> modCount
    int threshold -> threshold
    java.util.concurrent.atomic.AtomicReferenceArray table -> table
    long maxSegmentWeight -> maxSegmentWeight
    java.lang.ref.ReferenceQueue keyReferenceQueue -> keyReferenceQueue
    java.lang.ref.ReferenceQueue valueReferenceQueue -> valueReferenceQueue
    java.util.Queue recencyQueue -> recencyQueue
    java.util.concurrent.atomic.AtomicInteger readCount -> readCount
    java.util.Queue writeQueue -> writeQueue
    java.util.Queue accessQueue -> accessQueue
    com.google.common.cache.AbstractCache$StatsCounter statsCounter -> statsCounter
    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> newEntryArray
    void initTable(java.util.concurrent.atomic.AtomicReferenceArray) -> initTable
    com.google.common.cache.LocalCache$ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.LocalCache$ReferenceEntry) -> newEntry
    com.google.common.cache.LocalCache$ReferenceEntry copyEntry(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> copyEntry
    void setValue(com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,java.lang.Object,long) -> setValue
    java.lang.Object get(java.lang.Object,int,com.google.common.cache.CacheLoader) -> get
    java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader) -> lockedGetOrLoad
    java.lang.Object waitForLoadingValue(com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference) -> waitForLoadingValue
    java.lang.Object loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader) -> loadSync
    com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader) -> loadAsync
    java.lang.Object getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture) -> getAndRecordStats
    java.lang.Object scheduleRefresh(com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader) -> scheduleRefresh
    java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean) -> refresh
    com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean) -> insertLoadingValueReference
    void tryDrainReferenceQueues() -> tryDrainReferenceQueues
    void drainReferenceQueues() -> drainReferenceQueues
    void drainKeyReferenceQueue() -> drainKeyReferenceQueue
    void drainValueReferenceQueue() -> drainValueReferenceQueue
    void clearReferenceQueues() -> clearReferenceQueues
    void clearKeyReferenceQueue() -> clearKeyReferenceQueue
    void clearValueReferenceQueue() -> clearValueReferenceQueue
    void recordRead(com.google.common.cache.LocalCache$ReferenceEntry,long) -> recordRead
    void recordLockedRead(com.google.common.cache.LocalCache$ReferenceEntry,long) -> recordLockedRead
    void recordWrite(com.google.common.cache.LocalCache$ReferenceEntry,int,long) -> recordWrite
    void drainRecencyQueue() -> drainRecencyQueue
    void tryExpireEntries(long) -> tryExpireEntries
    void expireEntries(long) -> expireEntries
    void enqueueNotification(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.RemovalCause) -> enqueueNotification
    void enqueueNotification(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause) -> enqueueNotification
    void evictEntries() -> evictEntries
    com.google.common.cache.LocalCache$ReferenceEntry getNextEvictable() -> getNextEvictable
    com.google.common.cache.LocalCache$ReferenceEntry getFirst(int) -> getFirst
    com.google.common.cache.LocalCache$ReferenceEntry getEntry(java.lang.Object,int) -> getEntry
    com.google.common.cache.LocalCache$ReferenceEntry getLiveEntry(java.lang.Object,int,long) -> getLiveEntry
    java.lang.Object getLiveValue(com.google.common.cache.LocalCache$ReferenceEntry,long) -> getLiveValue
    java.lang.Object get(java.lang.Object,int) -> get
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    void expand() -> expand
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object remove(java.lang.Object,int) -> remove
    boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object) -> storeLoadedValue
    boolean remove(java.lang.Object,int,java.lang.Object) -> remove
    void clear() -> clear
    com.google.common.cache.LocalCache$ReferenceEntry removeValueFromChain(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause) -> removeValueFromChain
    com.google.common.cache.LocalCache$ReferenceEntry removeEntryFromChain(com.google.common.cache.LocalCache$ReferenceEntry,com.google.common.cache.LocalCache$ReferenceEntry) -> removeEntryFromChain
    void removeCollectedEntry(com.google.common.cache.LocalCache$ReferenceEntry) -> removeCollectedEntry
    boolean reclaimKey(com.google.common.cache.LocalCache$ReferenceEntry,int) -> reclaimKey
    boolean reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference) -> reclaimValue
    boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference) -> removeLoadingValue
    boolean removeEntry(com.google.common.cache.LocalCache$ReferenceEntry,int,com.google.common.cache.RemovalCause) -> removeEntry
    void postReadCleanup() -> postReadCleanup
    void preWriteCleanup(long) -> preWriteCleanup
    void postWriteCleanup() -> postWriteCleanup
    void cleanUp() -> cleanUp
    void runLockedCleanup(long) -> runLockedCleanup
    void runUnlockedCleanup() -> runUnlockedCleanup
com.google.common.cache.LocalCache$Segment$1 -> com.google.common.cache.LocalCache$Segment$1:
    java.lang.Object val$key -> val$key
    int val$hash -> val$hash
    com.google.common.cache.LocalCache$LoadingValueReference val$loadingValueReference -> val$loadingValueReference
    com.google.common.util.concurrent.ListenableFuture val$loadingFuture -> val$loadingFuture
    com.google.common.cache.LocalCache$Segment this$0 -> this$0
    void run() -> run
com.google.common.cache.LocalCache$SoftValueReference -> com.google.common.cache.LocalCache$SoftValueReference:
    com.google.common.cache.LocalCache$ReferenceEntry entry -> entry
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ReferenceEntry getEntry() -> getEntry
    void notifyNewValue(java.lang.Object) -> notifyNewValue
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.LocalCache$ReferenceEntry) -> copyFor
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    java.lang.Object waitForValue() -> waitForValue
com.google.common.cache.LocalCache$Strength -> com.google.common.cache.LocalCache$Strength:
    com.google.common.cache.LocalCache$Strength STRONG -> STRONG
    com.google.common.cache.LocalCache$Strength SOFT -> SOFT
    com.google.common.cache.LocalCache$Strength WEAK -> WEAK
    com.google.common.cache.LocalCache$Strength[] $VALUES -> $VALUES
    com.google.common.cache.LocalCache$Strength[] values() -> values
    com.google.common.cache.LocalCache$Strength valueOf(java.lang.String) -> valueOf
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,int) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.cache.LocalCache$Strength$1 -> com.google.common.cache.LocalCache$Strength$1:
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,int) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.cache.LocalCache$Strength$2 -> com.google.common.cache.LocalCache$Strength$2:
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,int) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.cache.LocalCache$Strength$3 -> com.google.common.cache.LocalCache$Strength$3:
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.LocalCache$ReferenceEntry,java.lang.Object,int) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.cache.LocalCache$StrongAccessEntry -> com.google.common.cache.LocalCache$StrongAccessEntry:
    long accessTime -> accessTime
    com.google.common.cache.LocalCache$ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.LocalCache$ReferenceEntry previousAccess -> previousAccess
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
com.google.common.cache.LocalCache$StrongAccessWriteEntry -> com.google.common.cache.LocalCache$StrongAccessWriteEntry:
    long accessTime -> accessTime
    com.google.common.cache.LocalCache$ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.LocalCache$ReferenceEntry previousAccess -> previousAccess
    long writeTime -> writeTime
    com.google.common.cache.LocalCache$ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.LocalCache$ReferenceEntry previousWrite -> previousWrite
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$StrongEntry -> com.google.common.cache.LocalCache$StrongEntry:
    java.lang.Object key -> key
    int hash -> hash
    com.google.common.cache.LocalCache$ReferenceEntry next -> next
    com.google.common.cache.LocalCache$ValueReference valueReference -> valueReference
    java.lang.Object getKey() -> getKey
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.cache.LocalCache$ReferenceEntry getNext() -> getNext
com.google.common.cache.LocalCache$StrongValueReference -> com.google.common.cache.LocalCache$StrongValueReference:
    java.lang.Object referent -> referent
    java.lang.Object get() -> get
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ReferenceEntry getEntry() -> getEntry
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.LocalCache$ReferenceEntry) -> copyFor
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    java.lang.Object waitForValue() -> waitForValue
    void notifyNewValue(java.lang.Object) -> notifyNewValue
com.google.common.cache.LocalCache$StrongWriteEntry -> com.google.common.cache.LocalCache$StrongWriteEntry:
    long writeTime -> writeTime
    com.google.common.cache.LocalCache$ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.LocalCache$ReferenceEntry previousWrite -> previousWrite
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$ValueIterator -> com.google.common.cache.LocalCache$ValueIterator:
    com.google.common.cache.LocalCache this$0 -> this$0
    java.lang.Object next() -> next
com.google.common.cache.LocalCache$ValueReference -> com.google.common.cache.LocalCache$ValueReference:
    java.lang.Object get() -> get
    java.lang.Object waitForValue() -> waitForValue
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ReferenceEntry getEntry() -> getEntry
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.LocalCache$ReferenceEntry) -> copyFor
    void notifyNewValue(java.lang.Object) -> notifyNewValue
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
com.google.common.cache.LocalCache$Values -> com.google.common.cache.LocalCache$Values:
    java.util.concurrent.ConcurrentMap map -> map
    com.google.common.cache.LocalCache this$0 -> this$0
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
com.google.common.cache.LocalCache$WeakAccessEntry -> com.google.common.cache.LocalCache$WeakAccessEntry:
    long accessTime -> accessTime
    com.google.common.cache.LocalCache$ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.LocalCache$ReferenceEntry previousAccess -> previousAccess
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
com.google.common.cache.LocalCache$WeakAccessWriteEntry -> com.google.common.cache.LocalCache$WeakAccessWriteEntry:
    long accessTime -> accessTime
    com.google.common.cache.LocalCache$ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.LocalCache$ReferenceEntry previousAccess -> previousAccess
    long writeTime -> writeTime
    com.google.common.cache.LocalCache$ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.LocalCache$ReferenceEntry previousWrite -> previousWrite
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$WeakEntry -> com.google.common.cache.LocalCache$WeakEntry:
    int hash -> hash
    com.google.common.cache.LocalCache$ReferenceEntry next -> next
    com.google.common.cache.LocalCache$ValueReference valueReference -> valueReference
    java.lang.Object getKey() -> getKey
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.cache.LocalCache$ReferenceEntry getNext() -> getNext
com.google.common.cache.LocalCache$WeakValueReference -> com.google.common.cache.LocalCache$WeakValueReference:
    com.google.common.cache.LocalCache$ReferenceEntry entry -> entry
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ReferenceEntry getEntry() -> getEntry
    void notifyNewValue(java.lang.Object) -> notifyNewValue
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.LocalCache$ReferenceEntry) -> copyFor
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    java.lang.Object waitForValue() -> waitForValue
com.google.common.cache.LocalCache$WeakWriteEntry -> com.google.common.cache.LocalCache$WeakWriteEntry:
    long writeTime -> writeTime
    com.google.common.cache.LocalCache$ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.LocalCache$ReferenceEntry previousWrite -> previousWrite
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$WeightedSoftValueReference -> com.google.common.cache.LocalCache$WeightedSoftValueReference:
    int weight -> weight
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.LocalCache$ReferenceEntry) -> copyFor
com.google.common.cache.LocalCache$WeightedStrongValueReference -> com.google.common.cache.LocalCache$WeightedStrongValueReference:
    int weight -> weight
    int getWeight() -> getWeight
com.google.common.cache.LocalCache$WeightedWeakValueReference -> com.google.common.cache.LocalCache$WeightedWeakValueReference:
    int weight -> weight
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.LocalCache$ReferenceEntry) -> copyFor
com.google.common.cache.LocalCache$WriteQueue -> com.google.common.cache.LocalCache$WriteQueue:
    com.google.common.cache.LocalCache$ReferenceEntry head -> head
    boolean offer(com.google.common.cache.LocalCache$ReferenceEntry) -> offer
    com.google.common.cache.LocalCache$ReferenceEntry peek() -> peek
    com.google.common.cache.LocalCache$ReferenceEntry poll() -> poll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
com.google.common.cache.LocalCache$WriteQueue$1 -> com.google.common.cache.LocalCache$WriteQueue$1:
    com.google.common.cache.LocalCache$ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.LocalCache$ReferenceEntry previousWrite -> previousWrite
    com.google.common.cache.LocalCache$WriteQueue this$0 -> this$0
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.LocalCache$ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.LocalCache$ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$WriteQueue$2 -> com.google.common.cache.LocalCache$WriteQueue$2:
    com.google.common.cache.LocalCache$WriteQueue this$0 -> this$0
    com.google.common.cache.LocalCache$ReferenceEntry computeNext(com.google.common.cache.LocalCache$ReferenceEntry) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.cache.LocalCache$WriteThroughEntry -> com.google.common.cache.LocalCache$WriteThroughEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    com.google.common.cache.LocalCache this$0 -> this$0
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.String toString() -> toString
com.google.common.cache.LongAddable -> com.google.common.cache.LongAddable:
    void increment() -> increment
    void add(long) -> add
    long sum() -> sum
com.google.common.cache.LongAddables -> com.google.common.cache.LongAddables:
    com.google.common.base.Supplier SUPPLIER -> SUPPLIER
    com.google.common.cache.LongAddable create() -> create
com.google.common.cache.LongAddables$1 -> com.google.common.cache.LongAddables$1:
    com.google.common.cache.LongAddable get() -> get
    java.lang.Object get() -> get
com.google.common.cache.LongAddables$2 -> com.google.common.cache.LongAddables$2:
    com.google.common.cache.LongAddable get() -> get
    java.lang.Object get() -> get
com.google.common.cache.LongAddables$PureJavaLongAddable -> com.google.common.cache.LongAddables$PureJavaLongAddable:
    void increment() -> increment
    void add(long) -> add
    long sum() -> sum
com.google.common.cache.LongAdder -> com.google.common.cache.LongAdder:
    long serialVersionUID -> serialVersionUID
    long fn(long,long) -> fn
    void add(long) -> add
    void increment() -> increment
    void decrement() -> decrement
    long sum() -> sum
    void reset() -> reset
    long sumThenReset() -> sumThenReset
    java.lang.String toString() -> toString
    long longValue() -> longValue
    int intValue() -> intValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.cache.RemovalCause -> com.google.common.cache.RemovalCause:
    com.google.common.cache.RemovalCause EXPLICIT -> EXPLICIT
    com.google.common.cache.RemovalCause REPLACED -> REPLACED
    com.google.common.cache.RemovalCause COLLECTED -> COLLECTED
    com.google.common.cache.RemovalCause EXPIRED -> EXPIRED
    com.google.common.cache.RemovalCause SIZE -> SIZE
    com.google.common.cache.RemovalCause[] $VALUES -> $VALUES
    com.google.common.cache.RemovalCause[] values() -> values
    com.google.common.cache.RemovalCause valueOf(java.lang.String) -> valueOf
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$1 -> com.google.common.cache.RemovalCause$1:
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$2 -> com.google.common.cache.RemovalCause$2:
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$3 -> com.google.common.cache.RemovalCause$3:
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$4 -> com.google.common.cache.RemovalCause$4:
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$5 -> com.google.common.cache.RemovalCause$5:
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalListener -> com.google.common.cache.RemovalListener:
    void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
com.google.common.cache.RemovalListeners -> com.google.common.cache.RemovalListeners:
    com.google.common.cache.RemovalListener asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor) -> asynchronous
com.google.common.cache.RemovalListeners$1 -> com.google.common.cache.RemovalListeners$1:
    java.util.concurrent.Executor val$executor -> val$executor
    com.google.common.cache.RemovalListener val$listener -> val$listener
    void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
com.google.common.cache.RemovalListeners$1$1 -> com.google.common.cache.RemovalListeners$1$1:
    com.google.common.cache.RemovalNotification val$notification -> val$notification
    com.google.common.cache.RemovalListeners$1 this$0 -> this$0
    void run() -> run
com.google.common.cache.RemovalNotification -> com.google.common.cache.RemovalNotification:
    java.lang.Object key -> key
    java.lang.Object value -> value
    com.google.common.cache.RemovalCause cause -> cause
    long serialVersionUID -> serialVersionUID
    com.google.common.cache.RemovalCause getCause() -> getCause
    boolean wasEvicted() -> wasEvicted
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.cache.Striped64 -> com.google.common.cache.Striped64:
    java.lang.ThreadLocal threadHashCode -> threadHashCode
    java.util.Random rng -> rng
    int NCPU -> NCPU
    com.google.common.cache.Striped64$Cell[] cells -> cells
    long base -> base
    int busy -> busy
    sun.misc.Unsafe UNSAFE -> UNSAFE
    long baseOffset -> baseOffset
    long busyOffset -> busyOffset
    boolean casBase(long,long) -> casBase
    boolean casBusy() -> casBusy
    long fn(long,long) -> fn
    void retryUpdate(long,int[],boolean) -> retryUpdate
    void internalReset(long) -> internalReset
    sun.misc.Unsafe getUnsafe() -> getUnsafe
    sun.misc.Unsafe access$000() -> access$000
com.google.common.cache.Striped64$1 -> com.google.common.cache.Striped64$1:
    sun.misc.Unsafe run() -> run
    java.lang.Object run() -> run
com.google.common.cache.Striped64$Cell -> com.google.common.cache.Striped64$Cell:
    long p0 -> p0
    long p1 -> p1
    long p2 -> p2
    long p3 -> p3
    long p4 -> p4
    long p5 -> p5
    long p6 -> p6
    long value -> value
    long q0 -> q0
    long q1 -> q1
    long q2 -> q2
    long q3 -> q3
    long q4 -> q4
    long q5 -> q5
    long q6 -> q6
    sun.misc.Unsafe UNSAFE -> UNSAFE
    long valueOffset -> valueOffset
    boolean cas(long,long) -> cas
com.google.common.cache.Weigher -> com.google.common.cache.Weigher:
    int weigh(java.lang.Object,java.lang.Object) -> weigh
com.google.common.cache.package-info -> com.google.common.cache.package-info:
com.google.common.collect.AbstractBiMap -> com.google.common.collect.AbstractBiMap:
    java.util.Map delegate -> delegate
    com.google.common.collect.AbstractBiMap inverse -> inverse
    java.util.Set keySet -> keySet
    java.util.Set valueSet -> valueSet
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    java.util.Map delegate() -> delegate
    java.lang.Object checkKey(java.lang.Object) -> checkKey
    java.lang.Object checkValue(java.lang.Object) -> checkValue
    void setDelegates(java.util.Map,java.util.Map) -> setDelegates
    void setInverse(com.google.common.collect.AbstractBiMap) -> setInverse
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object putInBothMaps(java.lang.Object,java.lang.Object,boolean) -> putInBothMaps
    void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object) -> updateInverseMap
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeFromBothMaps(java.lang.Object) -> removeFromBothMaps
    void removeFromInverseMap(java.lang.Object) -> removeFromInverseMap
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set keySet() -> keySet
    java.util.Set values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
    java.util.Map access$200(com.google.common.collect.AbstractBiMap) -> access$200
    java.lang.Object access$300(com.google.common.collect.AbstractBiMap,java.lang.Object) -> access$300
    void access$600(com.google.common.collect.AbstractBiMap,java.lang.Object,boolean,java.lang.Object,java.lang.Object) -> access$600
    void access$700(com.google.common.collect.AbstractBiMap,java.lang.Object) -> access$700
com.google.common.collect.AbstractBiMap$1 -> com.google.common.collect.AbstractBiMap$1:
com.google.common.collect.AbstractBiMap$EntrySet -> com.google.common.collect.AbstractBiMap$EntrySet:
    java.util.Set esDelegate -> esDelegate
    com.google.common.collect.AbstractBiMap this$0 -> this$0
    java.util.Set delegate() -> delegate
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractBiMap$EntrySet$1 -> com.google.common.collect.AbstractBiMap$EntrySet$1:
    java.util.Map$Entry entry -> entry
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.AbstractBiMap$EntrySet this$1 -> this$1
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractBiMap$EntrySet$1$1 -> com.google.common.collect.AbstractBiMap$EntrySet$1$1:
    java.util.Map$Entry val$finalEntry -> val$finalEntry
    com.google.common.collect.AbstractBiMap$EntrySet$1 this$2 -> this$2
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractBiMap$Inverse -> com.google.common.collect.AbstractBiMap$Inverse:
    long serialVersionUID -> serialVersionUID
    java.lang.Object checkKey(java.lang.Object) -> checkKey
    java.lang.Object checkValue(java.lang.Object) -> checkValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractBiMap$KeySet -> com.google.common.collect.AbstractBiMap$KeySet:
    com.google.common.collect.AbstractBiMap this$0 -> this$0
    java.util.Set delegate() -> delegate
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.util.Iterator iterator() -> iterator
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractBiMap$ValueSet -> com.google.common.collect.AbstractBiMap$ValueSet:
    java.util.Set valuesDelegate -> valuesDelegate
    com.google.common.collect.AbstractBiMap this$0 -> this$0
    java.util.Set delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.String toString() -> toString
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractIndexedListIterator -> com.google.common.collect.AbstractIndexedListIterator:
    int size -> size
    int position -> position
    java.lang.Object get(int) -> get
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
com.google.common.collect.AbstractIterator -> com.google.common.collect.AbstractIterator:
    com.google.common.collect.AbstractIterator$State state -> state
    java.lang.Object next -> next
    java.lang.Object computeNext() -> computeNext
    java.lang.Object endOfData() -> endOfData
    boolean hasNext() -> hasNext
    boolean tryToComputeNext() -> tryToComputeNext
    java.lang.Object next() -> next
    java.lang.Object peek() -> peek
com.google.common.collect.AbstractIterator$1 -> com.google.common.collect.AbstractIterator$1:
    int[] $SwitchMap$com$google$common$collect$AbstractIterator$State -> $SwitchMap$com$google$common$collect$AbstractIterator$State
com.google.common.collect.AbstractIterator$State -> com.google.common.collect.AbstractIterator$State:
    com.google.common.collect.AbstractIterator$State READY -> READY
    com.google.common.collect.AbstractIterator$State NOT_READY -> NOT_READY
    com.google.common.collect.AbstractIterator$State DONE -> DONE
    com.google.common.collect.AbstractIterator$State FAILED -> FAILED
    com.google.common.collect.AbstractIterator$State[] $VALUES -> $VALUES
    com.google.common.collect.AbstractIterator$State[] values() -> values
    com.google.common.collect.AbstractIterator$State valueOf(java.lang.String) -> valueOf
com.google.common.collect.AbstractListMultimap -> com.google.common.collect.AbstractListMultimap:
    long serialVersionUID -> serialVersionUID
    java.util.List createCollection() -> createCollection
    java.util.List createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AbstractMapBasedMultimap -> com.google.common.collect.AbstractMapBasedMultimap:
    java.util.Map map -> map
    int totalSize -> totalSize
    long serialVersionUID -> serialVersionUID
    void setMap(java.util.Map) -> setMap
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createCollection(java.lang.Object) -> createCollection
    java.util.Map backingMap() -> backingMap
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Collection getOrCreateCollection(java.lang.Object) -> getOrCreateCollection
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    java.util.List wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> wrapList
    java.util.Iterator iteratorOrListIterator(java.util.Collection) -> iteratorOrListIterator
    java.util.Set createKeySet() -> createKeySet
    int removeValuesForKey(java.lang.Object) -> removeValuesForKey
    java.util.Collection values() -> values
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Collection entries() -> entries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultimap) -> access$000
    java.util.Iterator access$100(com.google.common.collect.AbstractMapBasedMultimap,java.util.Collection) -> access$100
    int access$210(com.google.common.collect.AbstractMapBasedMultimap) -> access$210
    int access$208(com.google.common.collect.AbstractMapBasedMultimap) -> access$208
    int access$212(com.google.common.collect.AbstractMapBasedMultimap,int) -> access$212
    int access$220(com.google.common.collect.AbstractMapBasedMultimap,int) -> access$220
    java.util.List access$300(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> access$300
    int access$400(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object) -> access$400
com.google.common.collect.AbstractMapBasedMultimap$1 -> com.google.common.collect.AbstractMapBasedMultimap$1:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.AbstractMapBasedMultimap$2 -> com.google.common.collect.AbstractMapBasedMultimap$2:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.Map$Entry output(java.lang.Object,java.lang.Object) -> output
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.AbstractMapBasedMultimap$AsMap -> com.google.common.collect.AbstractMapBasedMultimap$AsMap:
    java.util.Map submap -> submap
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.Set createEntrySet() -> createEntrySet
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    int size() -> size
    java.util.Collection remove(java.lang.Object) -> remove
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void clear() -> clear
    java.util.Map$Entry wrapEntry(java.util.Map$Entry) -> wrapEntry
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries -> com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> this$1
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator -> com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:
    java.util.Iterator delegateIterator -> delegateIterator
    java.util.Collection collection -> collection
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> this$1
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultimap$Itr -> com.google.common.collect.AbstractMapBasedMultimap$Itr:
    java.util.Iterator keyIterator -> keyIterator
    java.lang.Object key -> key
    java.util.Collection collection -> collection
    java.util.Iterator valueIterator -> valueIterator
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$KeySet -> com.google.common.collect.AbstractMapBasedMultimap$KeySet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.AbstractMapBasedMultimap$KeySet$1 -> com.google.common.collect.AbstractMapBasedMultimap$KeySet$1:
    java.util.Map$Entry entry -> entry
    java.util.Iterator val$entryIterator -> val$entryIterator
    com.google.common.collect.AbstractMapBasedMultimap$KeySet this$1 -> this$1
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap -> com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.NavigableMap sortedMap() -> sortedMap
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.Map$Entry pollAsMapEntry(java.util.Iterator) -> pollAsMapEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.NavigableSet keySet() -> keySet
    java.util.NavigableSet createKeySet() -> createKeySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object) -> headMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.SortedSet keySet() -> keySet
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet -> com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.NavigableMap sortedMap() -> sortedMap
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet headSet(java.lang.Object) -> headSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object) -> tailSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedMap sortedMap() -> sortedMap
com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList -> com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap -> com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:
    java.util.SortedSet sortedKeySet -> sortedKeySet
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedSet keySet() -> keySet
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet -> com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.lang.Object last() -> last
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection -> com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:
    java.lang.Object key -> key
    java.util.Collection delegate -> delegate
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection ancestor -> ancestor
    java.util.Collection ancestorDelegate -> ancestorDelegate
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void refreshIfEmpty() -> refreshIfEmpty
    void removeIfEmpty() -> removeIfEmpty
    java.lang.Object getKey() -> getKey
    void addToMap() -> addToMap
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Collection getDelegate() -> getDelegate
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection getAncestor() -> getAncestor
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator -> com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:
    java.util.Iterator delegateIterator -> delegateIterator
    java.util.Collection originalDelegate -> originalDelegate
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection this$1 -> this$1
    void validateIterator() -> validateIterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator getDelegateIterator() -> getDelegateIterator
com.google.common.collect.AbstractMapBasedMultimap$WrappedList -> com.google.common.collect.AbstractMapBasedMultimap$WrappedList:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.List getListDelegate() -> getListDelegate
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator -> com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:
    com.google.common.collect.AbstractMapBasedMultimap$WrappedList this$1 -> this$1
    java.util.ListIterator getDelegateListIterator() -> getDelegateListIterator
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet -> com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.NavigableSet getSortedSetDelegate() -> getSortedSetDelegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet wrap(java.util.NavigableSet) -> wrap
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet getSortedSetDelegate() -> getSortedSetDelegate
com.google.common.collect.AbstractMapBasedMultimap$WrappedSet -> com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    boolean removeAll(java.util.Collection) -> removeAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet -> com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    java.util.SortedSet getSortedSetDelegate() -> getSortedSetDelegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
com.google.common.collect.AbstractMapBasedMultiset -> com.google.common.collect.AbstractMapBasedMultiset:
    java.util.Map backingMap -> backingMap
    long size -> size
    long serialVersionUID -> serialVersionUID
    void setBackingMap(java.util.Map) -> setBackingMap
    java.util.Set entrySet() -> entrySet
    java.util.Iterator entryIterator() -> entryIterator
    void clear() -> clear
    int distinctElements() -> distinctElements
    int size() -> size
    java.util.Iterator iterator() -> iterator
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    int getAndSet(com.google.common.collect.Count,int) -> getAndSet
    void readObjectNoData() -> readObjectNoData
    java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultiset) -> access$000
    long access$122(com.google.common.collect.AbstractMapBasedMultiset,long) -> access$122
    long access$110(com.google.common.collect.AbstractMapBasedMultiset) -> access$110
com.google.common.collect.AbstractMapBasedMultiset$1 -> com.google.common.collect.AbstractMapBasedMultiset$1:
    java.util.Map$Entry toRemove -> toRemove
    java.util.Iterator val$backingEntries -> val$backingEntries
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> this$0
    boolean hasNext() -> hasNext
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultiset$1$1 -> com.google.common.collect.AbstractMapBasedMultiset$1$1:
    java.util.Map$Entry val$mapEntry -> val$mapEntry
    com.google.common.collect.AbstractMapBasedMultiset$1 this$1 -> this$1
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator -> com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:
    java.util.Iterator entryIterator -> entryIterator
    java.util.Map$Entry currentEntry -> currentEntry
    int occurrencesLeft -> occurrencesLeft
    boolean canRemove -> canRemove
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapEntry -> com.google.common.collect.AbstractMapEntry:
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap -> com.google.common.collect.AbstractMultimap:
    java.util.Collection entries -> entries
    java.util.Set keySet -> keySet
    com.google.common.collect.Multiset keys -> keys
    java.util.Collection values -> values
    java.util.Map asMap -> asMap
    boolean isEmpty() -> isEmpty
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection entries() -> entries
    java.util.Collection createEntries() -> createEntries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    com.google.common.collect.Multiset keys() -> keys
    com.google.common.collect.Multiset createKeys() -> createKeys
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Map asMap() -> asMap
    java.util.Map createAsMap() -> createAsMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap$1 -> com.google.common.collect.AbstractMultimap$1:
com.google.common.collect.AbstractMultimap$Entries -> com.google.common.collect.AbstractMultimap$Entries:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    com.google.common.collect.Multimap multimap() -> multimap
    java.util.Iterator iterator() -> iterator
com.google.common.collect.AbstractMultimap$EntrySet -> com.google.common.collect.AbstractMultimap$EntrySet:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.AbstractMultimap$Values -> com.google.common.collect.AbstractMultimap$Values:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.common.collect.AbstractMultiset -> com.google.common.collect.AbstractMultiset:
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int count(java.lang.Object) -> count
    boolean add(java.lang.Object) -> add
    int add(java.lang.Object,int) -> add
    boolean remove(java.lang.Object) -> remove
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.util.Set elementSet() -> elementSet
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
    java.util.Set entrySet() -> entrySet
    java.util.Set createEntrySet() -> createEntrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultiset$ElementSet -> com.google.common.collect.AbstractMultiset$ElementSet:
    com.google.common.collect.AbstractMultiset this$0 -> this$0
    com.google.common.collect.Multiset multiset() -> multiset
com.google.common.collect.AbstractMultiset$EntrySet -> com.google.common.collect.AbstractMultiset$EntrySet:
    com.google.common.collect.AbstractMultiset this$0 -> this$0
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.AbstractNavigableMap -> com.google.common.collect.AbstractNavigableMap:
    java.lang.Object get(java.lang.Object) -> get
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Set keySet() -> keySet
    int size() -> size
    java.util.Set entrySet() -> entrySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
com.google.common.collect.AbstractNavigableMap$1 -> com.google.common.collect.AbstractNavigableMap$1:
    com.google.common.collect.AbstractNavigableMap this$0 -> this$0
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.AbstractNavigableMap$DescendingMap -> com.google.common.collect.AbstractNavigableMap$DescendingMap:
    com.google.common.collect.AbstractNavigableMap this$0 -> this$0
    java.util.NavigableMap forward() -> forward
    java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.AbstractRangeSet -> com.google.common.collect.AbstractRangeSet:
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    boolean isEmpty() -> isEmpty
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    void clear() -> clear
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    void addAll(com.google.common.collect.RangeSet) -> addAll
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    boolean encloses(com.google.common.collect.Range) -> encloses
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractSequentialIterator -> com.google.common.collect.AbstractSequentialIterator:
    java.lang.Object nextOrNull -> nextOrNull
    java.lang.Object computeNext(java.lang.Object) -> computeNext
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.AbstractSetMultimap -> com.google.common.collect.AbstractSetMultimap:
    long serialVersionUID -> serialVersionUID
    java.util.Set createCollection() -> createCollection
    java.util.Set createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Set get(java.lang.Object) -> get
    java.util.Set entries() -> entries
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean equals(java.lang.Object) -> equals
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AbstractSortedKeySortedSetMultimap -> com.google.common.collect.AbstractSortedKeySortedSetMultimap:
    java.util.SortedMap asMap() -> asMap
    java.util.SortedMap backingMap() -> backingMap
    java.util.SortedSet keySet() -> keySet
    java.util.Map asMap() -> asMap
    java.util.Set keySet() -> keySet
    java.util.Map backingMap() -> backingMap
com.google.common.collect.AbstractSortedMultiset -> com.google.common.collect.AbstractSortedMultiset:
    java.util.Comparator comparator -> comparator
    com.google.common.collect.SortedMultiset descendingMultiset -> descendingMultiset
    java.util.NavigableSet elementSet() -> elementSet
    java.util.NavigableSet createElementSet() -> createElementSet
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    java.util.Iterator descendingIterator() -> descendingIterator
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.SortedMultiset createDescendingMultiset() -> createDescendingMultiset
    java.util.Set createElementSet() -> createElementSet
    java.util.Set elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.AbstractSortedMultiset$1 -> com.google.common.collect.AbstractSortedMultiset$1:
    com.google.common.collect.AbstractSortedMultiset this$0 -> this$0
    com.google.common.collect.SortedMultiset forwardMultiset() -> forwardMultiset
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.AbstractSortedSetMultimap -> com.google.common.collect.AbstractSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    java.util.SortedSet createCollection() -> createCollection
    java.util.SortedSet createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    java.util.Collection values() -> values
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    java.util.Set createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Set createCollection() -> createCollection
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AbstractTable -> com.google.common.collect.AbstractTable:
    java.util.Set cellSet -> cellSet
    java.util.Collection values -> values
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsColumn(java.lang.Object) -> containsColumn
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.util.Set cellSet() -> cellSet
    java.util.Set createCellSet() -> createCellSet
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
    java.util.Iterator valuesIterator() -> valuesIterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractTable$1 -> com.google.common.collect.AbstractTable$1:
    com.google.common.collect.AbstractTable this$0 -> this$0
    java.lang.Object transform(com.google.common.collect.Table$Cell) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.AbstractTable$CellSet -> com.google.common.collect.AbstractTable$CellSet:
    com.google.common.collect.AbstractTable this$0 -> this$0
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.AbstractTable$Values -> com.google.common.collect.AbstractTable$Values:
    com.google.common.collect.AbstractTable this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
    int size() -> size
com.google.common.collect.AllEqualOrdering -> com.google.common.collect.AllEqualOrdering:
    com.google.common.collect.AllEqualOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
com.google.common.collect.ArrayListMultimap -> com.google.common.collect.ArrayListMultimap:
    int DEFAULT_VALUES_PER_KEY -> DEFAULT_VALUES_PER_KEY
    int expectedValuesPerKey -> expectedValuesPerKey
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ArrayListMultimap create() -> create
    com.google.common.collect.ArrayListMultimap create(int,int) -> create
    com.google.common.collect.ArrayListMultimap create(com.google.common.collect.Multimap) -> create
    java.util.List createCollection() -> createCollection
    void trimToSize() -> trimToSize
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    boolean equals(java.lang.Object) -> equals
    java.util.Map asMap() -> asMap
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    java.util.Collection values() -> values
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    java.util.Collection createCollection() -> createCollection
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isEmpty() -> isEmpty
com.google.common.collect.ArrayTable -> com.google.common.collect.ArrayTable:
    com.google.common.collect.ImmutableList rowList -> rowList
    com.google.common.collect.ImmutableList columnList -> columnList
    com.google.common.collect.ImmutableMap rowKeyToIndex -> rowKeyToIndex
    com.google.common.collect.ImmutableMap columnKeyToIndex -> columnKeyToIndex
    java.lang.Object[][] array -> array
    com.google.common.collect.ArrayTable$ColumnMap columnMap -> columnMap
    com.google.common.collect.ArrayTable$RowMap rowMap -> rowMap
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ArrayTable create(java.lang.Iterable,java.lang.Iterable) -> create
    com.google.common.collect.ArrayTable create(com.google.common.collect.Table) -> create
    com.google.common.collect.ImmutableMap index(java.util.List) -> index
    com.google.common.collect.ImmutableList rowKeyList() -> rowKeyList
    com.google.common.collect.ImmutableList columnKeyList() -> columnKeyList
    java.lang.Object at(int,int) -> at
    java.lang.Object set(int,int,java.lang.Object) -> set
    java.lang.Object[][] toArray(java.lang.Class) -> toArray
    void clear() -> clear
    void eraseAll() -> eraseAll
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object erase(java.lang.Object,java.lang.Object) -> erase
    int size() -> size
    java.util.Set cellSet() -> cellSet
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Map column(java.lang.Object) -> column
    com.google.common.collect.ImmutableSet columnKeySet() -> columnKeySet
    java.util.Map columnMap() -> columnMap
    java.util.Map row(java.lang.Object) -> row
    com.google.common.collect.ImmutableSet rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    java.util.Collection values() -> values
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Set rowKeySet() -> rowKeySet
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.ArrayTable) -> access$000
    com.google.common.collect.ImmutableList access$100(com.google.common.collect.ArrayTable) -> access$100
    com.google.common.collect.ImmutableMap access$200(com.google.common.collect.ArrayTable) -> access$200
    com.google.common.collect.ImmutableMap access$500(com.google.common.collect.ArrayTable) -> access$500
com.google.common.collect.ArrayTable$1 -> com.google.common.collect.ArrayTable$1:
    com.google.common.collect.ArrayTable this$0 -> this$0
    com.google.common.collect.Table$Cell get(int) -> get
    java.lang.Object get(int) -> get
com.google.common.collect.ArrayTable$1$1 -> com.google.common.collect.ArrayTable$1$1:
    int rowIndex -> rowIndex
    int columnIndex -> columnIndex
    int val$index -> val$index
    com.google.common.collect.ArrayTable$1 this$1 -> this$1
    java.lang.Object getRowKey() -> getRowKey
    java.lang.Object getColumnKey() -> getColumnKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.ArrayTable$ArrayMap -> com.google.common.collect.ArrayTable$ArrayMap:
    com.google.common.collect.ImmutableMap keyIndex -> keyIndex
    java.util.Set keySet() -> keySet
    java.lang.Object getKey(int) -> getKey
    java.lang.String getKeyRole() -> getKeyRole
    java.lang.Object getValue(int) -> getValue
    java.lang.Object setValue(int,java.lang.Object) -> setValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Set createEntrySet() -> createEntrySet
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.ArrayTable$ArrayMap$1 -> com.google.common.collect.ArrayTable$ArrayMap$1:
    com.google.common.collect.ArrayTable$ArrayMap this$0 -> this$0
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ArrayTable$ArrayMap$1$1 -> com.google.common.collect.ArrayTable$ArrayMap$1$1:
    com.google.common.collect.ArrayTable$ArrayMap$1 this$1 -> this$1
    java.util.Map$Entry get(int) -> get
    java.lang.Object get(int) -> get
com.google.common.collect.ArrayTable$ArrayMap$1$1$1 -> com.google.common.collect.ArrayTable$ArrayMap$1$1$1:
    int val$index -> val$index
    com.google.common.collect.ArrayTable$ArrayMap$1$1 this$2 -> this$2
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ArrayTable$Column -> com.google.common.collect.ArrayTable$Column:
    int columnIndex -> columnIndex
    com.google.common.collect.ArrayTable this$0 -> this$0
    java.lang.String getKeyRole() -> getKeyRole
    java.lang.Object getValue(int) -> getValue
    java.lang.Object setValue(int,java.lang.Object) -> setValue
com.google.common.collect.ArrayTable$ColumnMap -> com.google.common.collect.ArrayTable$ColumnMap:
    com.google.common.collect.ArrayTable this$0 -> this$0
    java.lang.String getKeyRole() -> getKeyRole
    java.util.Map getValue(int) -> getValue
    java.util.Map setValue(int,java.util.Map) -> setValue
    java.util.Map put(java.lang.Object,java.util.Map) -> put
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object setValue(int,java.lang.Object) -> setValue
    java.lang.Object getValue(int) -> getValue
com.google.common.collect.ArrayTable$Row -> com.google.common.collect.ArrayTable$Row:
    int rowIndex -> rowIndex
    com.google.common.collect.ArrayTable this$0 -> this$0
    java.lang.String getKeyRole() -> getKeyRole
    java.lang.Object getValue(int) -> getValue
    java.lang.Object setValue(int,java.lang.Object) -> setValue
com.google.common.collect.ArrayTable$RowMap -> com.google.common.collect.ArrayTable$RowMap:
    com.google.common.collect.ArrayTable this$0 -> this$0
    java.lang.String getKeyRole() -> getKeyRole
    java.util.Map getValue(int) -> getValue
    java.util.Map setValue(int,java.util.Map) -> setValue
    java.util.Map put(java.lang.Object,java.util.Map) -> put
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object setValue(int,java.lang.Object) -> setValue
    java.lang.Object getValue(int) -> getValue
com.google.common.collect.BiMap -> com.google.common.collect.BiMap:
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    void putAll(java.util.Map) -> putAll
    java.util.Set values() -> values
    com.google.common.collect.BiMap inverse() -> inverse
com.google.common.collect.BinaryTreeTraverser -> com.google.common.collect.BinaryTreeTraverser:
    com.google.common.base.Optional leftChild(java.lang.Object) -> leftChild
    com.google.common.base.Optional rightChild(java.lang.Object) -> rightChild
    java.lang.Iterable children(java.lang.Object) -> children
    com.google.common.collect.UnmodifiableIterator preOrderIterator(java.lang.Object) -> preOrderIterator
    com.google.common.collect.UnmodifiableIterator postOrderIterator(java.lang.Object) -> postOrderIterator
    com.google.common.collect.FluentIterable inOrderTraversal(java.lang.Object) -> inOrderTraversal
    void pushIfPresent(java.util.Deque,com.google.common.base.Optional) -> pushIfPresent
    void access$000(java.util.Deque,com.google.common.base.Optional) -> access$000
com.google.common.collect.BinaryTreeTraverser$1 -> com.google.common.collect.BinaryTreeTraverser$1:
    java.lang.Object val$root -> val$root
    com.google.common.collect.BinaryTreeTraverser this$0 -> this$0
    java.util.Iterator iterator() -> iterator
com.google.common.collect.BinaryTreeTraverser$1$1 -> com.google.common.collect.BinaryTreeTraverser$1$1:
    boolean doneLeft -> doneLeft
    boolean doneRight -> doneRight
    com.google.common.collect.BinaryTreeTraverser$1 this$1 -> this$1
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.BinaryTreeTraverser$2 -> com.google.common.collect.BinaryTreeTraverser$2:
    java.lang.Object val$root -> val$root
    com.google.common.collect.BinaryTreeTraverser this$0 -> this$0
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.BinaryTreeTraverser$InOrderIterator -> com.google.common.collect.BinaryTreeTraverser$InOrderIterator:
    java.util.Deque stack -> stack
    java.util.BitSet hasExpandedLeft -> hasExpandedLeft
    com.google.common.collect.BinaryTreeTraverser this$0 -> this$0
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.BinaryTreeTraverser$PostOrderIterator -> com.google.common.collect.BinaryTreeTraverser$PostOrderIterator:
    java.util.Deque stack -> stack
    java.util.BitSet hasExpanded -> hasExpanded
    com.google.common.collect.BinaryTreeTraverser this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.BinaryTreeTraverser$PreOrderIterator -> com.google.common.collect.BinaryTreeTraverser$PreOrderIterator:
    java.util.Deque stack -> stack
    com.google.common.collect.BinaryTreeTraverser this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.lang.Object peek() -> peek
com.google.common.collect.BoundType -> com.google.common.collect.BoundType:
    com.google.common.collect.BoundType OPEN -> OPEN
    com.google.common.collect.BoundType CLOSED -> CLOSED
    com.google.common.collect.BoundType[] $VALUES -> $VALUES
    com.google.common.collect.BoundType[] values() -> values
    com.google.common.collect.BoundType valueOf(java.lang.String) -> valueOf
    com.google.common.collect.BoundType forBoolean(boolean) -> forBoolean
    com.google.common.collect.BoundType flip() -> flip
com.google.common.collect.BoundType$1 -> com.google.common.collect.BoundType$1:
    com.google.common.collect.BoundType flip() -> flip
com.google.common.collect.BoundType$2 -> com.google.common.collect.BoundType$2:
    com.google.common.collect.BoundType flip() -> flip
com.google.common.collect.ByFunctionOrdering -> com.google.common.collect.ByFunctionOrdering:
    com.google.common.base.Function function -> function
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.CartesianList -> com.google.common.collect.CartesianList:
    com.google.common.collect.ImmutableList axes -> axes
    int[] axesSizeProduct -> axesSizeProduct
    java.util.List create(java.util.List) -> create
    int getAxisIndexForProductIndex(int,int) -> getAxisIndexForProductIndex
    com.google.common.collect.ImmutableList get(int) -> get
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.CartesianList) -> access$000
    int access$100(com.google.common.collect.CartesianList,int,int) -> access$100
com.google.common.collect.CartesianList$1 -> com.google.common.collect.CartesianList$1:
    int val$index -> val$index
    com.google.common.collect.CartesianList this$0 -> this$0
    int size() -> size
    java.lang.Object get(int) -> get
    boolean isPartialView() -> isPartialView
com.google.common.collect.ClassToInstanceMap -> com.google.common.collect.ClassToInstanceMap:
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
com.google.common.collect.CollectPreconditions -> com.google.common.collect.CollectPreconditions:
    void checkEntryNotNull(java.lang.Object,java.lang.Object) -> checkEntryNotNull
    int checkNonnegative(int,java.lang.String) -> checkNonnegative
    void checkRemove(boolean) -> checkRemove
com.google.common.collect.Collections2 -> com.google.common.collect.Collections2:
    com.google.common.base.Joiner STANDARD_JOINER -> STANDARD_JOINER
    java.util.Collection filter(java.util.Collection,com.google.common.base.Predicate) -> filter
    boolean safeContains(java.util.Collection,java.lang.Object) -> safeContains
    boolean safeRemove(java.util.Collection,java.lang.Object) -> safeRemove
    java.util.Collection transform(java.util.Collection,com.google.common.base.Function) -> transform
    boolean containsAllImpl(java.util.Collection,java.util.Collection) -> containsAllImpl
    java.lang.String toStringImpl(java.util.Collection) -> toStringImpl
    java.lang.StringBuilder newStringBuilderForCollection(int) -> newStringBuilderForCollection
    java.util.Collection cast(java.lang.Iterable) -> cast
    java.util.Collection orderedPermutations(java.lang.Iterable) -> orderedPermutations
    java.util.Collection orderedPermutations(java.lang.Iterable,java.util.Comparator) -> orderedPermutations
    java.util.Collection permutations(java.util.Collection) -> permutations
    boolean isPermutation(java.util.List,java.util.List) -> isPermutation
    boolean isPositiveInt(long) -> isPositiveInt
    boolean access$000(long) -> access$000
    boolean access$100(java.util.List,java.util.List) -> access$100
com.google.common.collect.Collections2$1 -> com.google.common.collect.Collections2$1:
    java.util.Collection val$collection -> val$collection
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Collections2$FilteredCollection -> com.google.common.collect.Collections2$FilteredCollection:
    java.util.Collection unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    com.google.common.collect.Collections2$FilteredCollection createCombined(com.google.common.base.Predicate) -> createCombined
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Collections2$OrderedPermutationCollection -> com.google.common.collect.Collections2$OrderedPermutationCollection:
    com.google.common.collect.ImmutableList inputList -> inputList
    java.util.Comparator comparator -> comparator
    int size -> size
    int calculateSize(java.util.List,java.util.Comparator) -> calculateSize
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.lang.String toString() -> toString
com.google.common.collect.Collections2$OrderedPermutationIterator -> com.google.common.collect.Collections2$OrderedPermutationIterator:
    java.util.List nextPermutation -> nextPermutation
    java.util.Comparator comparator -> comparator
    java.util.List computeNext() -> computeNext
    void calculateNextPermutation() -> calculateNextPermutation
    int findNextJ() -> findNextJ
    int findNextL(int) -> findNextL
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Collections2$PermutationCollection -> com.google.common.collect.Collections2$PermutationCollection:
    com.google.common.collect.ImmutableList inputList -> inputList
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.lang.String toString() -> toString
com.google.common.collect.Collections2$PermutationIterator -> com.google.common.collect.Collections2$PermutationIterator:
    java.util.List list -> list
    int[] c -> c
    int[] o -> o
    int j -> j
    java.util.List computeNext() -> computeNext
    void calculateNextPermutation() -> calculateNextPermutation
    void switchDirection() -> switchDirection
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Collections2$TransformedCollection -> com.google.common.collect.Collections2$TransformedCollection:
    java.util.Collection fromCollection -> fromCollection
    com.google.common.base.Function function -> function
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.ComparatorOrdering -> com.google.common.collect.ComparatorOrdering:
    java.util.Comparator comparator -> comparator
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.ComparisonChain -> com.google.common.collect.ComparisonChain:
    com.google.common.collect.ComparisonChain ACTIVE -> ACTIVE
    com.google.common.collect.ComparisonChain LESS -> LESS
    com.google.common.collect.ComparisonChain GREATER -> GREATER
    com.google.common.collect.ComparisonChain start() -> start
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    com.google.common.collect.ComparisonChain compare(int,int) -> compare
    com.google.common.collect.ComparisonChain compare(long,long) -> compare
    com.google.common.collect.ComparisonChain compare(float,float) -> compare
    com.google.common.collect.ComparisonChain compare(double,double) -> compare
    com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    int result() -> result
    com.google.common.collect.ComparisonChain access$100() -> access$100
    com.google.common.collect.ComparisonChain access$200() -> access$200
    com.google.common.collect.ComparisonChain access$300() -> access$300
com.google.common.collect.ComparisonChain$1 -> com.google.common.collect.ComparisonChain$1:
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    com.google.common.collect.ComparisonChain compare(int,int) -> compare
    com.google.common.collect.ComparisonChain compare(long,long) -> compare
    com.google.common.collect.ComparisonChain compare(float,float) -> compare
    com.google.common.collect.ComparisonChain compare(double,double) -> compare
    com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    com.google.common.collect.ComparisonChain classify(int) -> classify
    int result() -> result
com.google.common.collect.ComparisonChain$InactiveComparisonChain -> com.google.common.collect.ComparisonChain$InactiveComparisonChain:
    int result -> result
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    com.google.common.collect.ComparisonChain compare(int,int) -> compare
    com.google.common.collect.ComparisonChain compare(long,long) -> compare
    com.google.common.collect.ComparisonChain compare(float,float) -> compare
    com.google.common.collect.ComparisonChain compare(double,double) -> compare
    com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    int result() -> result
com.google.common.collect.CompoundOrdering -> com.google.common.collect.CompoundOrdering:
    com.google.common.collect.ImmutableList comparators -> comparators
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.ComputationException -> com.google.common.collect.ComputationException:
    long serialVersionUID -> serialVersionUID
com.google.common.collect.ComputingConcurrentHashMap -> com.google.common.collect.ComputingConcurrentHashMap:
    com.google.common.base.Function computingFunction -> computingFunction
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMakerInternalMap$Segment createSegment(int,int) -> createSegment
    com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment segmentFor(int) -> segmentFor
    java.lang.Object getOrCompute(java.lang.Object) -> getOrCompute
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int) -> segmentFor
com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference -> com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference:
    java.lang.Throwable t -> t
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
com.google.common.collect.ComputingConcurrentHashMap$ComputedReference -> com.google.common.collect.ComputingConcurrentHashMap$ComputedReference:
    java.lang.Object value -> value
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment -> com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment:
    java.lang.Object getOrCompute(java.lang.Object,int,com.google.common.base.Function) -> getOrCompute
    java.lang.Object compute(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference) -> compute
com.google.common.collect.ComputingConcurrentHashMap$ComputingSerializationProxy -> com.google.common.collect.ComputingConcurrentHashMap$ComputingSerializationProxy:
    com.google.common.base.Function computingFunction -> computingFunction
    long serialVersionUID -> serialVersionUID
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference -> com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference:
    com.google.common.base.Function computingFunction -> computingFunction
    com.google.common.collect.MapMakerInternalMap$ValueReference computedReference -> computedReference
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
    java.lang.Object compute(java.lang.Object,int) -> compute
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
com.google.common.collect.ConcurrentHashMultiset -> com.google.common.collect.ConcurrentHashMultiset:
    java.util.concurrent.ConcurrentMap countMap -> countMap
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ConcurrentHashMultiset create() -> create
    com.google.common.collect.ConcurrentHashMultiset create(java.lang.Iterable) -> create
    com.google.common.collect.ConcurrentHashMultiset create(com.google.common.collect.MapMaker) -> create
    int count(java.lang.Object) -> count
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.List snapshot() -> snapshot
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    boolean removeExactly(java.lang.Object,int) -> removeExactly
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set createElementSet() -> createElementSet
    java.util.Set createEntrySet() -> createEntrySet
    int distinctElements() -> distinctElements
    boolean isEmpty() -> isEmpty
    java.util.Iterator entryIterator() -> entryIterator
    void clear() -> clear
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set entrySet() -> entrySet
    java.util.Set elementSet() -> elementSet
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    boolean add(java.lang.Object) -> add
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset) -> access$100
com.google.common.collect.ConcurrentHashMultiset$1 -> com.google.common.collect.ConcurrentHashMultiset$1:
    java.util.Set val$delegate -> val$delegate
    com.google.common.collect.ConcurrentHashMultiset this$0 -> this$0
    java.util.Set delegate() -> delegate
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ConcurrentHashMultiset$2 -> com.google.common.collect.ConcurrentHashMultiset$2:
    java.util.Iterator mapEntries -> mapEntries
    com.google.common.collect.ConcurrentHashMultiset this$0 -> this$0
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.ConcurrentHashMultiset$3 -> com.google.common.collect.ConcurrentHashMultiset$3:
    com.google.common.collect.Multiset$Entry last -> last
    java.util.Iterator val$readOnlyIterator -> val$readOnlyIterator
    com.google.common.collect.ConcurrentHashMultiset this$0 -> this$0
    java.util.Iterator delegate() -> delegate
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    java.lang.Object delegate() -> delegate
com.google.common.collect.ConcurrentHashMultiset$EntrySet -> com.google.common.collect.ConcurrentHashMultiset$EntrySet:
    com.google.common.collect.ConcurrentHashMultiset this$0 -> this$0
    com.google.common.collect.ConcurrentHashMultiset multiset() -> multiset
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.List snapshot() -> snapshot
    com.google.common.collect.Multiset multiset() -> multiset
com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder -> com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder:
    com.google.common.collect.Serialization$FieldSetter COUNT_MAP_FIELD_SETTER -> COUNT_MAP_FIELD_SETTER
com.google.common.collect.Constraint -> com.google.common.collect.Constraint:
    java.lang.Object checkElement(java.lang.Object) -> checkElement
    java.lang.String toString() -> toString
com.google.common.collect.Constraints -> com.google.common.collect.Constraints:
    java.util.Collection constrainedCollection(java.util.Collection,com.google.common.collect.Constraint) -> constrainedCollection
    java.util.Set constrainedSet(java.util.Set,com.google.common.collect.Constraint) -> constrainedSet
    java.util.SortedSet constrainedSortedSet(java.util.SortedSet,com.google.common.collect.Constraint) -> constrainedSortedSet
    java.util.List constrainedList(java.util.List,com.google.common.collect.Constraint) -> constrainedList
    java.util.ListIterator constrainedListIterator(java.util.ListIterator,com.google.common.collect.Constraint) -> constrainedListIterator
    java.util.Collection constrainedTypePreservingCollection(java.util.Collection,com.google.common.collect.Constraint) -> constrainedTypePreservingCollection
    java.util.Collection checkElements(java.util.Collection,com.google.common.collect.Constraint) -> checkElements
    java.util.Collection access$000(java.util.Collection,com.google.common.collect.Constraint) -> access$000
    java.util.ListIterator access$100(java.util.ListIterator,com.google.common.collect.Constraint) -> access$100
com.google.common.collect.Constraints$ConstrainedCollection -> com.google.common.collect.Constraints$ConstrainedCollection:
    java.util.Collection delegate -> delegate
    com.google.common.collect.Constraint constraint -> constraint
    java.util.Collection delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.lang.Object delegate() -> delegate
com.google.common.collect.Constraints$ConstrainedList -> com.google.common.collect.Constraints$ConstrainedList:
    java.util.List delegate -> delegate
    com.google.common.collect.Constraint constraint -> constraint
    java.util.List delegate() -> delegate
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object set(int,java.lang.Object) -> set
    java.util.List subList(int,int) -> subList
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Constraints$ConstrainedListIterator -> com.google.common.collect.Constraints$ConstrainedListIterator:
    java.util.ListIterator delegate -> delegate
    com.google.common.collect.Constraint constraint -> constraint
    java.util.ListIterator delegate() -> delegate
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.util.Iterator delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Constraints$ConstrainedRandomAccessList -> com.google.common.collect.Constraints$ConstrainedRandomAccessList:
com.google.common.collect.Constraints$ConstrainedSet -> com.google.common.collect.Constraints$ConstrainedSet:
    java.util.Set delegate -> delegate
    com.google.common.collect.Constraint constraint -> constraint
    java.util.Set delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Constraints$ConstrainedSortedSet -> com.google.common.collect.Constraints$ConstrainedSortedSet:
    java.util.SortedSet delegate -> delegate
    com.google.common.collect.Constraint constraint -> constraint
    java.util.SortedSet delegate() -> delegate
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ContiguousSet -> com.google.common.collect.ContiguousSet:
    com.google.common.collect.DiscreteDomain domain -> domain
    com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain) -> create
    com.google.common.collect.ContiguousSet headSet(java.lang.Comparable) -> headSet
    com.google.common.collect.ContiguousSet headSet(java.lang.Comparable,boolean) -> headSet
    com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,java.lang.Comparable) -> subSet
    com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSet
    com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable) -> tailSet
    com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable,boolean) -> tailSet
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> headSetImpl
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSetImpl
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> tailSetImpl
    com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    com.google.common.collect.Range range() -> range
    com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    java.lang.String toString() -> toString
    com.google.common.collect.ImmutableSortedSet$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean) -> tailSet
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object) -> tailSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean) -> headSet
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
com.google.common.collect.Count -> com.google.common.collect.Count:
    int value -> value
    int get() -> get
    int getAndAdd(int) -> getAndAdd
    int addAndGet(int) -> addAndGet
    void set(int) -> set
    int getAndSet(int) -> getAndSet
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.collect.Cut -> com.google.common.collect.Cut:
    java.lang.Comparable endpoint -> endpoint
    long serialVersionUID -> serialVersionUID
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> canonical
    int compareTo(com.google.common.collect.Cut) -> compareTo
    java.lang.Comparable endpoint() -> endpoint
    boolean equals(java.lang.Object) -> equals
    com.google.common.collect.Cut belowAll() -> belowAll
    com.google.common.collect.Cut aboveAll() -> aboveAll
    com.google.common.collect.Cut belowValue(java.lang.Comparable) -> belowValue
    com.google.common.collect.Cut aboveValue(java.lang.Comparable) -> aboveValue
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.Cut$1 -> com.google.common.collect.Cut$1:
    int[] $SwitchMap$com$google$common$collect$BoundType -> $SwitchMap$com$google$common$collect$BoundType
com.google.common.collect.Cut$AboveAll -> com.google.common.collect.Cut$AboveAll:
    com.google.common.collect.Cut$AboveAll INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Comparable endpoint() -> endpoint
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    int compareTo(com.google.common.collect.Cut) -> compareTo
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    int compareTo(java.lang.Object) -> compareTo
    com.google.common.collect.Cut$AboveAll access$100() -> access$100
com.google.common.collect.Cut$AboveValue -> com.google.common.collect.Cut$AboveValue:
    long serialVersionUID -> serialVersionUID
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> canonical
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.Cut$BelowAll -> com.google.common.collect.Cut$BelowAll:
    com.google.common.collect.Cut$BelowAll INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Comparable endpoint() -> endpoint
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> canonical
    int compareTo(com.google.common.collect.Cut) -> compareTo
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    int compareTo(java.lang.Object) -> compareTo
    com.google.common.collect.Cut$BelowAll access$000() -> access$000
com.google.common.collect.Cut$BelowValue -> com.google.common.collect.Cut$BelowValue:
    long serialVersionUID -> serialVersionUID
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.DenseImmutableTable -> com.google.common.collect.DenseImmutableTable:
    com.google.common.collect.ImmutableMap rowKeyToIndex -> rowKeyToIndex
    com.google.common.collect.ImmutableMap columnKeyToIndex -> columnKeyToIndex
    com.google.common.collect.ImmutableMap rowMap -> rowMap
    com.google.common.collect.ImmutableMap columnMap -> columnMap
    int[] rowCounts -> rowCounts
    int[] columnCounts -> columnCounts
    java.lang.Object[][] values -> values
    int[] iterationOrderRow -> iterationOrderRow
    int[] iterationOrderColumn -> iterationOrderColumn
    com.google.common.collect.ImmutableMap makeIndex(com.google.common.collect.ImmutableSet) -> makeIndex
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    int size() -> size
    com.google.common.collect.Table$Cell getCell(int) -> getCell
    java.lang.Object getValue(int) -> getValue
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    int[] access$200(com.google.common.collect.DenseImmutableTable) -> access$200
    com.google.common.collect.ImmutableMap access$300(com.google.common.collect.DenseImmutableTable) -> access$300
    java.lang.Object[][] access$400(com.google.common.collect.DenseImmutableTable) -> access$400
    int[] access$500(com.google.common.collect.DenseImmutableTable) -> access$500
    com.google.common.collect.ImmutableMap access$600(com.google.common.collect.DenseImmutableTable) -> access$600
com.google.common.collect.DenseImmutableTable$1 -> com.google.common.collect.DenseImmutableTable$1:
com.google.common.collect.DenseImmutableTable$Column -> com.google.common.collect.DenseImmutableTable$Column:
    int columnIndex -> columnIndex
    com.google.common.collect.DenseImmutableTable this$0 -> this$0
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    java.lang.Object getValue(int) -> getValue
    boolean isPartialView() -> isPartialView
com.google.common.collect.DenseImmutableTable$ColumnMap -> com.google.common.collect.DenseImmutableTable$ColumnMap:
    com.google.common.collect.DenseImmutableTable this$0 -> this$0
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    java.util.Map getValue(int) -> getValue
    boolean isPartialView() -> isPartialView
    java.lang.Object getValue(int) -> getValue
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap -> com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:
    int size -> size
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    boolean isFull() -> isFull
    java.lang.Object getKey(int) -> getKey
    java.lang.Object getValue(int) -> getValue
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1 -> com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1:
    com.google.common.collect.DenseImmutableTable$ImmutableArrayMap this$0 -> this$0
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1$1 -> com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1$1:
    int index -> index
    int maxIndex -> maxIndex
    com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1 this$1 -> this$1
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.DenseImmutableTable$Row -> com.google.common.collect.DenseImmutableTable$Row:
    int rowIndex -> rowIndex
    com.google.common.collect.DenseImmutableTable this$0 -> this$0
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    java.lang.Object getValue(int) -> getValue
    boolean isPartialView() -> isPartialView
com.google.common.collect.DenseImmutableTable$RowMap -> com.google.common.collect.DenseImmutableTable$RowMap:
    com.google.common.collect.DenseImmutableTable this$0 -> this$0
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    java.util.Map getValue(int) -> getValue
    boolean isPartialView() -> isPartialView
    java.lang.Object getValue(int) -> getValue
com.google.common.collect.DescendingImmutableSortedMultiset -> com.google.common.collect.DescendingImmutableSortedMultiset:
    com.google.common.collect.ImmutableSortedMultiset forward -> forward
    int count(java.lang.Object) -> count
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    int size() -> size
    com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    com.google.common.collect.ImmutableSortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    boolean isPartialView() -> isPartialView
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    java.util.NavigableSet elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
    java.util.Set elementSet() -> elementSet
com.google.common.collect.DescendingImmutableSortedSet -> com.google.common.collect.DescendingImmutableSortedSet:
    com.google.common.collect.ImmutableSortedSet forward -> forward
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet descendingSet() -> descendingSet
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    int indexOf(java.lang.Object) -> indexOf
    boolean isPartialView() -> isPartialView
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator iterator() -> iterator
com.google.common.collect.DescendingMultiset -> com.google.common.collect.DescendingMultiset:
    java.util.Comparator comparator -> comparator
    java.util.NavigableSet elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    com.google.common.collect.SortedMultiset forwardMultiset() -> forwardMultiset
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.Multiset delegate() -> delegate
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Set entrySet() -> entrySet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.String toString() -> toString
    java.util.Set elementSet() -> elementSet
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.DescendingMultiset$1 -> com.google.common.collect.DescendingMultiset$1:
    com.google.common.collect.DescendingMultiset this$0 -> this$0
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.DiscreteDomain -> com.google.common.collect.DiscreteDomain:
    com.google.common.collect.DiscreteDomain integers() -> integers
    com.google.common.collect.DiscreteDomain longs() -> longs
    com.google.common.collect.DiscreteDomain bigIntegers() -> bigIntegers
    java.lang.Comparable next(java.lang.Comparable) -> next
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    java.lang.Comparable minValue() -> minValue
    java.lang.Comparable maxValue() -> maxValue
com.google.common.collect.DiscreteDomain$BigIntegerDomain -> com.google.common.collect.DiscreteDomain$BigIntegerDomain:
    com.google.common.collect.DiscreteDomain$BigIntegerDomain INSTANCE -> INSTANCE
    java.math.BigInteger MIN_LONG -> MIN_LONG
    java.math.BigInteger MAX_LONG -> MAX_LONG
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger next(java.math.BigInteger) -> next
    java.math.BigInteger previous(java.math.BigInteger) -> previous
    long distance(java.math.BigInteger,java.math.BigInteger) -> distance
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    java.lang.Comparable next(java.lang.Comparable) -> next
    com.google.common.collect.DiscreteDomain$BigIntegerDomain access$200() -> access$200
com.google.common.collect.DiscreteDomain$IntegerDomain -> com.google.common.collect.DiscreteDomain$IntegerDomain:
    com.google.common.collect.DiscreteDomain$IntegerDomain INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Integer next(java.lang.Integer) -> next
    java.lang.Integer previous(java.lang.Integer) -> previous
    long distance(java.lang.Integer,java.lang.Integer) -> distance
    java.lang.Integer minValue() -> minValue
    java.lang.Integer maxValue() -> maxValue
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    java.lang.Comparable maxValue() -> maxValue
    java.lang.Comparable minValue() -> minValue
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    java.lang.Comparable next(java.lang.Comparable) -> next
    com.google.common.collect.DiscreteDomain$IntegerDomain access$000() -> access$000
com.google.common.collect.DiscreteDomain$LongDomain -> com.google.common.collect.DiscreteDomain$LongDomain:
    com.google.common.collect.DiscreteDomain$LongDomain INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Long next(java.lang.Long) -> next
    java.lang.Long previous(java.lang.Long) -> previous
    long distance(java.lang.Long,java.lang.Long) -> distance
    java.lang.Long minValue() -> minValue
    java.lang.Long maxValue() -> maxValue
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    java.lang.Comparable maxValue() -> maxValue
    java.lang.Comparable minValue() -> minValue
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    java.lang.Comparable next(java.lang.Comparable) -> next
    com.google.common.collect.DiscreteDomain$LongDomain access$100() -> access$100
com.google.common.collect.EmptyContiguousSet -> com.google.common.collect.EmptyContiguousSet:
    java.lang.Comparable first() -> first
    java.lang.Comparable last() -> last
    int size() -> size
    com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    com.google.common.collect.Range range() -> range
    com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> headSetImpl
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSetImpl
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> tailSetImpl
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    boolean isPartialView() -> isPartialView
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ImmutableList asList() -> asList
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.lang.Object last() -> last
    java.lang.Object first() -> first
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.EmptyContiguousSet$1 -> com.google.common.collect.EmptyContiguousSet$1:
com.google.common.collect.EmptyContiguousSet$SerializedForm -> com.google.common.collect.EmptyContiguousSet$SerializedForm:
    com.google.common.collect.DiscreteDomain domain -> domain
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.EmptyImmutableBiMap -> com.google.common.collect.EmptyImmutableBiMap:
    com.google.common.collect.EmptyImmutableBiMap INSTANCE -> INSTANCE
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSetMultimap asMultimap() -> asMultimap
    com.google.common.collect.ImmutableSet keySet() -> keySet
    boolean isPartialView() -> isPartialView
    java.lang.Object readResolve() -> readResolve
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
com.google.common.collect.EmptyImmutableListMultimap -> com.google.common.collect.EmptyImmutableListMultimap:
    com.google.common.collect.EmptyImmutableListMultimap INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.EmptyImmutableSet -> com.google.common.collect.EmptyImmutableSet:
    com.google.common.collect.EmptyImmutableSet INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList asList() -> asList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.util.Iterator iterator() -> iterator
com.google.common.collect.EmptyImmutableSetMultimap -> com.google.common.collect.EmptyImmutableSetMultimap:
    com.google.common.collect.EmptyImmutableSetMultimap INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.EmptyImmutableSortedMap -> com.google.common.collect.EmptyImmutableSortedMap:
    com.google.common.collect.ImmutableSortedSet keySet -> keySet
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSortedSet keySet() -> keySet
    int size() -> size
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ImmutableCollection values() -> values
    java.lang.String toString() -> toString
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSetMultimap asMultimap() -> asMultimap
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> headMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> tailMap
    com.google.common.collect.ImmutableSortedMap createDescendingMap() -> createDescendingMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.ImmutableSet keySet() -> keySet
com.google.common.collect.EmptyImmutableSortedMultiset -> com.google.common.collect.EmptyImmutableSortedMultiset:
    com.google.common.collect.ImmutableSortedSet elementSet -> elementSet
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    int count(java.lang.Object) -> count
    boolean containsAll(java.util.Collection) -> containsAll
    int size() -> size
    com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean equals(java.lang.Object) -> equals
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList asList() -> asList
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    java.util.Iterator iterator() -> iterator
    java.util.NavigableSet elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
    java.util.Set elementSet() -> elementSet
com.google.common.collect.EmptyImmutableSortedSet -> com.google.common.collect.EmptyImmutableSortedSet:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableList asList() -> asList
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.EnumBiMap -> com.google.common.collect.EnumBiMap:
    java.lang.Class keyType -> keyType
    java.lang.Class valueType -> valueType
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.EnumBiMap create(java.lang.Class,java.lang.Class) -> create
    com.google.common.collect.EnumBiMap create(java.util.Map) -> create
    java.lang.Class inferKeyType(java.util.Map) -> inferKeyType
    java.lang.Class inferValueType(java.util.Map) -> inferValueType
    java.lang.Class keyType() -> keyType
    java.lang.Class valueType() -> valueType
    java.lang.Enum checkKey(java.lang.Enum) -> checkKey
    java.lang.Enum checkValue(java.lang.Enum) -> checkValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set entrySet() -> entrySet
    java.util.Set values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.BiMap inverse() -> inverse
    void clear() -> clear
    void putAll(java.util.Map) -> putAll
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object checkValue(java.lang.Object) -> checkValue
    java.lang.Object checkKey(java.lang.Object) -> checkKey
com.google.common.collect.EnumHashBiMap -> com.google.common.collect.EnumHashBiMap:
    java.lang.Class keyType -> keyType
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.EnumHashBiMap create(java.lang.Class) -> create
    com.google.common.collect.EnumHashBiMap create(java.util.Map) -> create
    java.lang.Enum checkKey(java.lang.Enum) -> checkKey
    java.lang.Object put(java.lang.Enum,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Enum,java.lang.Object) -> forcePut
    java.lang.Class keyType() -> keyType
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set entrySet() -> entrySet
    java.util.Set values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.BiMap inverse() -> inverse
    void clear() -> clear
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object checkKey(java.lang.Object) -> checkKey
com.google.common.collect.EnumMultiset -> com.google.common.collect.EnumMultiset:
    java.lang.Class type -> type
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.EnumMultiset create(java.lang.Class) -> create
    com.google.common.collect.EnumMultiset create(java.lang.Iterable) -> create
    com.google.common.collect.EnumMultiset create(java.lang.Iterable,java.lang.Class) -> create
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    int remove(java.lang.Object,int) -> remove
    int count(java.lang.Object) -> count
    java.util.Iterator iterator() -> iterator
    int size() -> size
    void clear() -> clear
    java.util.Set entrySet() -> entrySet
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set elementSet() -> elementSet
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
com.google.common.collect.EvictingQueue -> com.google.common.collect.EvictingQueue:
    java.util.Queue delegate -> delegate
    int maxSize -> maxSize
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.EvictingQueue create(int) -> create
    int remainingCapacity() -> remainingCapacity
    java.util.Queue delegate() -> delegate
    boolean offer(java.lang.Object) -> offer
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ExplicitOrdering -> com.google.common.collect.ExplicitOrdering:
    com.google.common.collect.ImmutableMap rankMap -> rankMap
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    int rank(java.lang.Object) -> rank
    com.google.common.collect.ImmutableMap buildRankMap(java.util.List) -> buildRankMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.FilteredEntryMultimap -> com.google.common.collect.FilteredEntryMultimap:
    com.google.common.collect.Multimap unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
    int size() -> size
    boolean satisfies(java.lang.Object,java.lang.Object) -> satisfies
    java.util.Collection filterCollection(java.util.Collection,com.google.common.base.Predicate) -> filterCollection
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableEmptyCollection() -> unmodifiableEmptyCollection
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection createEntries() -> createEntries
    java.util.Collection createValues() -> createValues
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    java.util.Set keySet() -> keySet
    boolean removeEntriesIf(com.google.common.base.Predicate) -> removeEntriesIf
    com.google.common.collect.Multiset createKeys() -> createKeys
    boolean access$000(com.google.common.collect.FilteredEntryMultimap,java.lang.Object,java.lang.Object) -> access$000
com.google.common.collect.FilteredEntryMultimap$AsMap -> com.google.common.collect.FilteredEntryMultimap$AsMap:
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    boolean containsKey(java.lang.Object) -> containsKey
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection remove(java.lang.Object) -> remove
    java.util.Set createKeySet() -> createKeySet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Collection createValues() -> createValues
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.FilteredEntryMultimap$AsMap$1 -> com.google.common.collect.FilteredEntryMultimap$AsMap$1:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.FilteredEntryMultimap$AsMap$2 -> com.google.common.collect.FilteredEntryMultimap$AsMap$2:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
com.google.common.collect.FilteredEntryMultimap$AsMap$2$1 -> com.google.common.collect.FilteredEntryMultimap$AsMap$2$1:
    java.util.Iterator backingIterator -> backingIterator
    com.google.common.collect.FilteredEntryMultimap$AsMap$2 this$2 -> this$2
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.FilteredEntryMultimap$AsMap$3 -> com.google.common.collect.FilteredEntryMultimap$AsMap$3:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys -> com.google.common.collect.FilteredEntryMultimap$Keys:
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    int remove(java.lang.Object,int) -> remove
    java.util.Set entrySet() -> entrySet
com.google.common.collect.FilteredEntryMultimap$Keys$1 -> com.google.common.collect.FilteredEntryMultimap$Keys$1:
    com.google.common.collect.FilteredEntryMultimap$Keys this$1 -> this$1
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean removeEntriesIf(com.google.common.base.Predicate) -> removeEntriesIf
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys$1$1 -> com.google.common.collect.FilteredEntryMultimap$Keys$1$1:
    com.google.common.base.Predicate val$predicate -> val$predicate
    com.google.common.collect.FilteredEntryMultimap$Keys$1 this$2 -> this$2
    boolean apply(java.util.Map$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.FilteredEntryMultimap$ValuePredicate -> com.google.common.collect.FilteredEntryMultimap$ValuePredicate:
    java.lang.Object key -> key
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.FilteredEntrySetMultimap -> com.google.common.collect.FilteredEntrySetMultimap:
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set createEntries() -> createEntries
    java.util.Set entries() -> entries
    java.util.Collection createEntries() -> createEntries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeyListMultimap -> com.google.common.collect.FilteredKeyListMultimap:
    com.google.common.collect.ListMultimap unfiltered() -> unfiltered
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeyMultimap -> com.google.common.collect.FilteredKeyMultimap:
    com.google.common.collect.Multimap unfiltered -> unfiltered
    com.google.common.base.Predicate keyPredicate -> keyPredicate
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableEmptyCollection() -> unmodifiableEmptyCollection
    void clear() -> clear
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection get(java.lang.Object) -> get
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection createEntries() -> createEntries
    java.util.Collection createValues() -> createValues
    java.util.Map createAsMap() -> createAsMap
    com.google.common.collect.Multiset createKeys() -> createKeys
com.google.common.collect.FilteredKeyMultimap$AddRejectingList -> com.google.common.collect.FilteredKeyMultimap$AddRejectingList:
    java.lang.Object key -> key
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.util.List delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeyMultimap$AddRejectingSet -> com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:
    java.lang.Object key -> key
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeyMultimap$Entries -> com.google.common.collect.FilteredKeyMultimap$Entries:
    com.google.common.collect.FilteredKeyMultimap this$0 -> this$0
    java.util.Collection delegate() -> delegate
    boolean remove(java.lang.Object) -> remove
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeySetMultimap -> com.google.common.collect.FilteredKeySetMultimap:
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Set createEntries() -> createEntries
    java.util.Collection createEntries() -> createEntries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeySetMultimap$EntrySet -> com.google.common.collect.FilteredKeySetMultimap$EntrySet:
    com.google.common.collect.FilteredKeySetMultimap this$0 -> this$0
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.FilteredMultimap -> com.google.common.collect.FilteredMultimap:
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
com.google.common.collect.FilteredMultimapValues -> com.google.common.collect.FilteredMultimapValues:
    com.google.common.collect.FilteredMultimap multimap -> multimap
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
com.google.common.collect.FilteredSetMultimap -> com.google.common.collect.FilteredSetMultimap:
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
com.google.common.collect.FluentIterable -> com.google.common.collect.FluentIterable:
    java.lang.Iterable iterable -> iterable
    com.google.common.collect.FluentIterable from(java.lang.Iterable) -> from
    com.google.common.collect.FluentIterable from(com.google.common.collect.FluentIterable) -> from
    com.google.common.collect.FluentIterable of(java.lang.Object[]) -> of
    java.lang.String toString() -> toString
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.FluentIterable cycle() -> cycle
    com.google.common.collect.FluentIterable append(java.lang.Iterable) -> append
    com.google.common.collect.FluentIterable append(java.lang.Object[]) -> append
    com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate) -> filter
    com.google.common.collect.FluentIterable filter(java.lang.Class) -> filter
    boolean anyMatch(com.google.common.base.Predicate) -> anyMatch
    boolean allMatch(com.google.common.base.Predicate) -> allMatch
    com.google.common.base.Optional firstMatch(com.google.common.base.Predicate) -> firstMatch
    com.google.common.collect.FluentIterable transform(com.google.common.base.Function) -> transform
    com.google.common.collect.FluentIterable transformAndConcat(com.google.common.base.Function) -> transformAndConcat
    com.google.common.base.Optional first() -> first
    com.google.common.base.Optional last() -> last
    com.google.common.collect.FluentIterable skip(int) -> skip
    com.google.common.collect.FluentIterable limit(int) -> limit
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ImmutableList toList() -> toList
    com.google.common.collect.ImmutableList toSortedList(java.util.Comparator) -> toSortedList
    com.google.common.collect.ImmutableSet toSet() -> toSet
    com.google.common.collect.ImmutableSortedSet toSortedSet(java.util.Comparator) -> toSortedSet
    com.google.common.collect.ImmutableMap toMap(com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableListMultimap index(com.google.common.base.Function) -> index
    com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function) -> uniqueIndex
    java.lang.Object[] toArray(java.lang.Class) -> toArray
    java.util.Collection copyInto(java.util.Collection) -> copyInto
    java.lang.String join(com.google.common.base.Joiner) -> join
    java.lang.Object get(int) -> get
com.google.common.collect.FluentIterable$1 -> com.google.common.collect.FluentIterable$1:
    java.lang.Iterable val$iterable -> val$iterable
    java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$FromIterableFunction -> com.google.common.collect.FluentIterable$FromIterableFunction:
    com.google.common.collect.FluentIterable apply(java.lang.Iterable) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.ForwardingBlockingDeque -> com.google.common.collect.ForwardingBlockingDeque:
    java.util.concurrent.BlockingDeque delegate() -> delegate
    int remainingCapacity() -> remainingCapacity
    void putFirst(java.lang.Object) -> putFirst
    void putLast(java.lang.Object) -> putLast
    boolean offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerFirst
    boolean offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerLast
    java.lang.Object takeFirst() -> takeFirst
    java.lang.Object takeLast() -> takeLast
    java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit) -> pollFirst
    java.lang.Object pollLast(long,java.util.concurrent.TimeUnit) -> pollLast
    void put(java.lang.Object) -> put
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    java.lang.Object take() -> take
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    int drainTo(java.util.Collection) -> drainTo
    int drainTo(java.util.Collection,int) -> drainTo
    java.util.Deque delegate() -> delegate
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingCollection -> com.google.common.collect.ForwardingCollection:
    java.util.Collection delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean removeAll(java.util.Collection) -> removeAll
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean standardContains(java.lang.Object) -> standardContains
    boolean standardContainsAll(java.util.Collection) -> standardContainsAll
    boolean standardAddAll(java.util.Collection) -> standardAddAll
    boolean standardRemove(java.lang.Object) -> standardRemove
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardRetainAll(java.util.Collection) -> standardRetainAll
    void standardClear() -> standardClear
    boolean standardIsEmpty() -> standardIsEmpty
    java.lang.String standardToString() -> standardToString
    java.lang.Object[] standardToArray() -> standardToArray
    java.lang.Object[] standardToArray(java.lang.Object[]) -> standardToArray
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingConcurrentMap -> com.google.common.collect.ForwardingConcurrentMap:
    java.util.concurrent.ConcurrentMap delegate() -> delegate
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingDeque -> com.google.common.collect.ForwardingDeque:
    java.util.Deque delegate() -> delegate
    void addFirst(java.lang.Object) -> addFirst
    void addLast(java.lang.Object) -> addLast
    java.util.Iterator descendingIterator() -> descendingIterator
    java.lang.Object getFirst() -> getFirst
    java.lang.Object getLast() -> getLast
    boolean offerFirst(java.lang.Object) -> offerFirst
    boolean offerLast(java.lang.Object) -> offerLast
    java.lang.Object peekFirst() -> peekFirst
    java.lang.Object peekLast() -> peekLast
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object pop() -> pop
    void push(java.lang.Object) -> push
    java.lang.Object removeFirst() -> removeFirst
    java.lang.Object removeLast() -> removeLast
    boolean removeFirstOccurrence(java.lang.Object) -> removeFirstOccurrence
    boolean removeLastOccurrence(java.lang.Object) -> removeLastOccurrence
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingImmutableCollection -> com.google.common.collect.ForwardingImmutableCollection:
com.google.common.collect.ForwardingImmutableList -> com.google.common.collect.ForwardingImmutableList:
com.google.common.collect.ForwardingImmutableMap -> com.google.common.collect.ForwardingImmutableMap:
com.google.common.collect.ForwardingImmutableSet -> com.google.common.collect.ForwardingImmutableSet:
com.google.common.collect.ForwardingIterator -> com.google.common.collect.ForwardingIterator:
    java.util.Iterator delegate() -> delegate
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingList -> com.google.common.collect.ForwardingList:
    java.util.List delegate() -> delegate
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardAdd(java.lang.Object) -> standardAdd
    boolean standardAddAll(int,java.lang.Iterable) -> standardAddAll
    int standardIndexOf(java.lang.Object) -> standardIndexOf
    int standardLastIndexOf(java.lang.Object) -> standardLastIndexOf
    java.util.Iterator standardIterator() -> standardIterator
    java.util.ListIterator standardListIterator() -> standardListIterator
    java.util.ListIterator standardListIterator(int) -> standardListIterator
    java.util.List standardSubList(int,int) -> standardSubList
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingListIterator -> com.google.common.collect.ForwardingListIterator:
    java.util.ListIterator delegate() -> delegate
    void add(java.lang.Object) -> add
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    java.util.Iterator delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingListMultimap -> com.google.common.collect.ForwardingListMultimap:
    com.google.common.collect.ListMultimap delegate() -> delegate
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMap -> com.google.common.collect.ForwardingMap:
    java.util.Map delegate() -> delegate
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void standardPutAll(java.util.Map) -> standardPutAll
    java.lang.Object standardRemove(java.lang.Object) -> standardRemove
    void standardClear() -> standardClear
    boolean standardContainsKey(java.lang.Object) -> standardContainsKey
    boolean standardContainsValue(java.lang.Object) -> standardContainsValue
    boolean standardIsEmpty() -> standardIsEmpty
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMap$StandardEntrySet -> com.google.common.collect.ForwardingMap$StandardEntrySet:
    com.google.common.collect.ForwardingMap this$0 -> this$0
    java.util.Map map() -> map
com.google.common.collect.ForwardingMap$StandardKeySet -> com.google.common.collect.ForwardingMap$StandardKeySet:
    com.google.common.collect.ForwardingMap this$0 -> this$0
com.google.common.collect.ForwardingMap$StandardValues -> com.google.common.collect.ForwardingMap$StandardValues:
    com.google.common.collect.ForwardingMap this$0 -> this$0
com.google.common.collect.ForwardingMapEntry -> com.google.common.collect.ForwardingMapEntry:
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultimap -> com.google.common.collect.ForwardingMultimap:
    com.google.common.collect.Multimap delegate() -> delegate
    java.util.Map asMap() -> asMap
    void clear() -> clear
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    int size() -> size
    java.util.Collection values() -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultiset -> com.google.common.collect.ForwardingMultiset:
    com.google.common.collect.Multiset delegate() -> delegate
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean standardContains(java.lang.Object) -> standardContains
    void standardClear() -> standardClear
    int standardCount(java.lang.Object) -> standardCount
    boolean standardAdd(java.lang.Object) -> standardAdd
    boolean standardAddAll(java.util.Collection) -> standardAddAll
    boolean standardRemove(java.lang.Object) -> standardRemove
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardRetainAll(java.util.Collection) -> standardRetainAll
    int standardSetCount(java.lang.Object,int) -> standardSetCount
    boolean standardSetCount(java.lang.Object,int,int) -> standardSetCount
    java.util.Iterator standardIterator() -> standardIterator
    int standardSize() -> standardSize
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultiset$StandardElementSet -> com.google.common.collect.ForwardingMultiset$StandardElementSet:
    com.google.common.collect.ForwardingMultiset this$0 -> this$0
    com.google.common.collect.Multiset multiset() -> multiset
com.google.common.collect.ForwardingNavigableMap -> com.google.common.collect.ForwardingNavigableMap:
    java.util.NavigableMap delegate() -> delegate
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.util.Map$Entry standardLowerEntry(java.lang.Object) -> standardLowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.lang.Object standardLowerKey(java.lang.Object) -> standardLowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.util.Map$Entry standardFloorEntry(java.lang.Object) -> standardFloorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.lang.Object standardFloorKey(java.lang.Object) -> standardFloorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.util.Map$Entry standardCeilingEntry(java.lang.Object) -> standardCeilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.lang.Object standardCeilingKey(java.lang.Object) -> standardCeilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.util.Map$Entry standardHigherEntry(java.lang.Object) -> standardHigherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.lang.Object standardHigherKey(java.lang.Object) -> standardHigherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry standardFirstEntry() -> standardFirstEntry
    java.lang.Object standardFirstKey() -> standardFirstKey
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry standardLastEntry() -> standardLastEntry
    java.lang.Object standardLastKey() -> standardLastKey
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry standardPollFirstEntry() -> standardPollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.Map$Entry standardPollLastEntry() -> standardPollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableSet standardDescendingKeySet() -> standardDescendingKeySet
    java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object) -> standardSubMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedMap standardHeadMap(java.lang.Object) -> standardHeadMap
    java.util.SortedMap standardTailMap(java.lang.Object) -> standardTailMap
    java.util.SortedMap delegate() -> delegate
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap -> com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:
    com.google.common.collect.ForwardingNavigableMap this$0 -> this$0
    java.util.NavigableMap forward() -> forward
    java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1 -> com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1:
    java.util.Map$Entry toRemove -> toRemove
    java.util.Map$Entry nextOrNull -> nextOrNull
    com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap this$1 -> this$1
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet -> com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet:
    com.google.common.collect.ForwardingNavigableMap this$0 -> this$0
com.google.common.collect.ForwardingNavigableSet -> com.google.common.collect.ForwardingNavigableSet:
    java.util.NavigableSet delegate() -> delegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object standardLower(java.lang.Object) -> standardLower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object standardFloor(java.lang.Object) -> standardFloor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object standardCeiling(java.lang.Object) -> standardCeiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object standardHigher(java.lang.Object) -> standardHigher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object standardPollFirst() -> standardPollFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object standardPollLast() -> standardPollLast
    java.lang.Object standardFirst() -> standardFirst
    java.lang.Object standardLast() -> standardLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean) -> standardSubSet
    java.util.SortedSet standardSubSet(java.lang.Object,java.lang.Object) -> standardSubSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.SortedSet standardHeadSet(java.lang.Object) -> standardHeadSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet standardTailSet(java.lang.Object) -> standardTailSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet -> com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet:
    com.google.common.collect.ForwardingNavigableSet this$0 -> this$0
com.google.common.collect.ForwardingObject -> com.google.common.collect.ForwardingObject:
    java.lang.Object delegate() -> delegate
    java.lang.String toString() -> toString
com.google.common.collect.ForwardingQueue -> com.google.common.collect.ForwardingQueue:
    java.util.Queue delegate() -> delegate
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object remove() -> remove
    java.lang.Object peek() -> peek
    java.lang.Object element() -> element
    boolean standardOffer(java.lang.Object) -> standardOffer
    java.lang.Object standardPeek() -> standardPeek
    java.lang.Object standardPoll() -> standardPoll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSet -> com.google.common.collect.ForwardingSet:
    java.util.Set delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSetMultimap -> com.google.common.collect.ForwardingSetMultimap:
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Set entries() -> entries
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedMap -> com.google.common.collect.ForwardingSortedMap:
    java.util.SortedMap delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    boolean standardContainsKey(java.lang.Object) -> standardContainsKey
    java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object) -> standardSubMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedMap$StandardKeySet -> com.google.common.collect.ForwardingSortedMap$StandardKeySet:
    com.google.common.collect.ForwardingSortedMap this$0 -> this$0
com.google.common.collect.ForwardingSortedMultiset -> com.google.common.collect.ForwardingSortedMultiset:
    com.google.common.collect.SortedMultiset delegate() -> delegate
    java.util.NavigableSet elementSet() -> elementSet
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry standardFirstEntry() -> standardFirstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry standardLastEntry() -> standardLastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry standardPollFirstEntry() -> standardPollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.Multiset$Entry standardPollLastEntry() -> standardPollLastEntry
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> standardSubMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    java.util.Set elementSet() -> elementSet
    com.google.common.collect.Multiset delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset -> com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset:
    com.google.common.collect.ForwardingSortedMultiset this$0 -> this$0
    com.google.common.collect.SortedMultiset forwardMultiset() -> forwardMultiset
com.google.common.collect.ForwardingSortedMultiset$StandardElementSet -> com.google.common.collect.ForwardingSortedMultiset$StandardElementSet:
    com.google.common.collect.ForwardingSortedMultiset this$0 -> this$0
com.google.common.collect.ForwardingSortedSet -> com.google.common.collect.ForwardingSortedSet:
    java.util.SortedSet delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.lang.Object last() -> last
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    boolean standardContains(java.lang.Object) -> standardContains
    boolean standardRemove(java.lang.Object) -> standardRemove
    java.util.SortedSet standardSubSet(java.lang.Object,java.lang.Object) -> standardSubSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedSetMultimap -> com.google.common.collect.ForwardingSortedSetMultimap:
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingTable -> com.google.common.collect.ForwardingTable:
    com.google.common.collect.Table delegate() -> delegate
    java.util.Set cellSet() -> cellSet
    void clear() -> clear
    java.util.Map column(java.lang.Object) -> column
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Map columnMap() -> columnMap
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    int size() -> size
    java.util.Collection values() -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.GeneralRange -> com.google.common.collect.GeneralRange:
    java.util.Comparator comparator -> comparator
    boolean hasLowerBound -> hasLowerBound
    java.lang.Object lowerEndpoint -> lowerEndpoint
    com.google.common.collect.BoundType lowerBoundType -> lowerBoundType
    boolean hasUpperBound -> hasUpperBound
    java.lang.Object upperEndpoint -> upperEndpoint
    com.google.common.collect.BoundType upperBoundType -> upperBoundType
    com.google.common.collect.GeneralRange reverse -> reverse
    com.google.common.collect.GeneralRange from(com.google.common.collect.Range) -> from
    com.google.common.collect.GeneralRange all(java.util.Comparator) -> all
    com.google.common.collect.GeneralRange downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType) -> downTo
    com.google.common.collect.GeneralRange upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType) -> upTo
    com.google.common.collect.GeneralRange range(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> range
    java.util.Comparator comparator() -> comparator
    boolean hasLowerBound() -> hasLowerBound
    boolean hasUpperBound() -> hasUpperBound
    boolean isEmpty() -> isEmpty
    boolean tooLow(java.lang.Object) -> tooLow
    boolean tooHigh(java.lang.Object) -> tooHigh
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange) -> intersect
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.GeneralRange reverse() -> reverse
    java.lang.String toString() -> toString
    java.lang.Object getLowerEndpoint() -> getLowerEndpoint
    com.google.common.collect.BoundType getLowerBoundType() -> getLowerBoundType
    java.lang.Object getUpperEndpoint() -> getUpperEndpoint
    com.google.common.collect.BoundType getUpperBoundType() -> getUpperBoundType
com.google.common.collect.GenericMapMaker -> com.google.common.collect.GenericMapMaker:
    com.google.common.collect.MapMaker$RemovalListener removalListener -> removalListener
    com.google.common.collect.GenericMapMaker keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
    com.google.common.collect.GenericMapMaker initialCapacity(int) -> initialCapacity
    com.google.common.collect.GenericMapMaker maximumSize(int) -> maximumSize
    com.google.common.collect.GenericMapMaker concurrencyLevel(int) -> concurrencyLevel
    com.google.common.collect.GenericMapMaker weakKeys() -> weakKeys
    com.google.common.collect.GenericMapMaker weakValues() -> weakValues
    com.google.common.collect.GenericMapMaker softValues() -> softValues
    com.google.common.collect.GenericMapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    com.google.common.collect.GenericMapMaker expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    com.google.common.collect.MapMaker$RemovalListener getRemovalListener() -> getRemovalListener
    java.util.concurrent.ConcurrentMap makeMap() -> makeMap
    com.google.common.collect.MapMakerInternalMap makeCustomMap() -> makeCustomMap
    java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function) -> makeComputingMap
com.google.common.collect.GenericMapMaker$NullListener -> com.google.common.collect.GenericMapMaker$NullListener:
    com.google.common.collect.GenericMapMaker$NullListener INSTANCE -> INSTANCE
    com.google.common.collect.GenericMapMaker$NullListener[] $VALUES -> $VALUES
    com.google.common.collect.GenericMapMaker$NullListener[] values() -> values
    com.google.common.collect.GenericMapMaker$NullListener valueOf(java.lang.String) -> valueOf
    void onRemoval(com.google.common.collect.MapMaker$RemovalNotification) -> onRemoval
com.google.common.collect.GwtTransient -> com.google.common.collect.GwtTransient:
com.google.common.collect.HashBasedTable -> com.google.common.collect.HashBasedTable:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashBasedTable create() -> create
    com.google.common.collect.HashBasedTable create(int,int) -> create
    com.google.common.collect.HashBasedTable create(com.google.common.collect.Table) -> create
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean equals(java.lang.Object) -> equals
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    java.util.Collection values() -> values
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map column(java.lang.Object) -> column
    java.util.Map row(java.lang.Object) -> row
    java.util.Set cellSet() -> cellSet
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    void putAll(com.google.common.collect.Table) -> putAll
com.google.common.collect.HashBasedTable$Factory -> com.google.common.collect.HashBasedTable$Factory:
    int expectedSize -> expectedSize
    long serialVersionUID -> serialVersionUID
    java.util.Map get() -> get
    java.lang.Object get() -> get
com.google.common.collect.HashBiMap -> com.google.common.collect.HashBiMap:
    double LOAD_FACTOR -> LOAD_FACTOR
    com.google.common.collect.HashBiMap$BiEntry[] hashTableKToV -> hashTableKToV
    com.google.common.collect.HashBiMap$BiEntry[] hashTableVToK -> hashTableVToK
    int size -> size
    int mask -> mask
    int modCount -> modCount
    com.google.common.collect.BiMap inverse -> inverse
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashBiMap create() -> create
    com.google.common.collect.HashBiMap create(int) -> create
    com.google.common.collect.HashBiMap create(java.util.Map) -> create
    void init(int) -> init
    void delete(com.google.common.collect.HashBiMap$BiEntry) -> delete
    void insert(com.google.common.collect.HashBiMap$BiEntry) -> insert
    int hash(java.lang.Object) -> hash
    com.google.common.collect.HashBiMap$BiEntry seekByKey(java.lang.Object,int) -> seekByKey
    com.google.common.collect.HashBiMap$BiEntry seekByValue(java.lang.Object,int) -> seekByValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object put(java.lang.Object,java.lang.Object,boolean) -> put
    java.lang.Object putInverse(java.lang.Object,java.lang.Object,boolean) -> putInverse
    void rehashIfNecessary() -> rehashIfNecessary
    com.google.common.collect.HashBiMap$BiEntry[] createTable(int) -> createTable
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    int size() -> size
    java.util.Set keySet() -> keySet
    java.util.Set values() -> values
    java.util.Set entrySet() -> entrySet
    com.google.common.collect.BiMap inverse() -> inverse
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Collection values() -> values
    int access$000(com.google.common.collect.HashBiMap) -> access$000
    com.google.common.collect.HashBiMap$BiEntry[] access$100(com.google.common.collect.HashBiMap) -> access$100
    void access$200(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry) -> access$200
    int access$300(java.lang.Object) -> access$300
    com.google.common.collect.HashBiMap$BiEntry access$400(com.google.common.collect.HashBiMap,java.lang.Object,int) -> access$400
    com.google.common.collect.HashBiMap$BiEntry access$600(com.google.common.collect.HashBiMap,java.lang.Object,int) -> access$600
    void access$700(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry) -> access$700
    int access$900(com.google.common.collect.HashBiMap) -> access$900
    java.lang.Object access$1000(com.google.common.collect.HashBiMap,java.lang.Object,java.lang.Object,boolean) -> access$1000
com.google.common.collect.HashBiMap$1 -> com.google.common.collect.HashBiMap$1:
com.google.common.collect.HashBiMap$BiEntry -> com.google.common.collect.HashBiMap$BiEntry:
    int keyHash -> keyHash
    int valueHash -> valueHash
    com.google.common.collect.HashBiMap$BiEntry nextInKToVBucket -> nextInKToVBucket
    com.google.common.collect.HashBiMap$BiEntry nextInVToKBucket -> nextInVToKBucket
com.google.common.collect.HashBiMap$EntrySet -> com.google.common.collect.HashBiMap$EntrySet:
    com.google.common.collect.HashBiMap this$0 -> this$0
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.HashBiMap$EntrySet$1 -> com.google.common.collect.HashBiMap$EntrySet$1:
    com.google.common.collect.HashBiMap$EntrySet this$1 -> this$1
    java.util.Map$Entry output(com.google.common.collect.HashBiMap$BiEntry) -> output
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashBiMap$EntrySet$1$MapEntry -> com.google.common.collect.HashBiMap$EntrySet$1$MapEntry:
    com.google.common.collect.HashBiMap$BiEntry delegate -> delegate
    com.google.common.collect.HashBiMap$EntrySet$1 this$2 -> this$2
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.HashBiMap$Inverse -> com.google.common.collect.HashBiMap$Inverse:
    com.google.common.collect.HashBiMap this$0 -> this$0
    com.google.common.collect.BiMap forward() -> forward
    int size() -> size
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object remove(java.lang.Object) -> remove
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set keySet() -> keySet
    java.util.Set values() -> values
    java.util.Set entrySet() -> entrySet
    java.lang.Object writeReplace() -> writeReplace
    java.util.Collection values() -> values
com.google.common.collect.HashBiMap$Inverse$1 -> com.google.common.collect.HashBiMap$Inverse$1:
    com.google.common.collect.HashBiMap$Inverse this$1 -> this$1
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.HashBiMap$Inverse$1$1 -> com.google.common.collect.HashBiMap$Inverse$1$1:
    com.google.common.collect.HashBiMap$Inverse$1 this$2 -> this$2
    java.util.Map$Entry output(com.google.common.collect.HashBiMap$BiEntry) -> output
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry -> com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry:
    com.google.common.collect.HashBiMap$BiEntry delegate -> delegate
    com.google.common.collect.HashBiMap$Inverse$1$1 this$3 -> this$3
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.HashBiMap$Inverse$InverseKeySet -> com.google.common.collect.HashBiMap$Inverse$InverseKeySet:
    com.google.common.collect.HashBiMap$Inverse this$1 -> this$1
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1 -> com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1:
    com.google.common.collect.HashBiMap$Inverse$InverseKeySet this$2 -> this$2
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashBiMap$InverseSerializedForm -> com.google.common.collect.HashBiMap$InverseSerializedForm:
    com.google.common.collect.HashBiMap bimap -> bimap
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.HashBiMap$Itr -> com.google.common.collect.HashBiMap$Itr:
    int nextBucket -> nextBucket
    com.google.common.collect.HashBiMap$BiEntry next -> next
    com.google.common.collect.HashBiMap$BiEntry toRemove -> toRemove
    int expectedModCount -> expectedModCount
    com.google.common.collect.HashBiMap this$0 -> this$0
    void checkForConcurrentModification() -> checkForConcurrentModification
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashBiMap$KeySet -> com.google.common.collect.HashBiMap$KeySet:
    com.google.common.collect.HashBiMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.HashBiMap$KeySet$1 -> com.google.common.collect.HashBiMap$KeySet$1:
    com.google.common.collect.HashBiMap$KeySet this$1 -> this$1
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashMultimap -> com.google.common.collect.HashMultimap:
    int DEFAULT_VALUES_PER_KEY -> DEFAULT_VALUES_PER_KEY
    int expectedValuesPerKey -> expectedValuesPerKey
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashMultimap create() -> create
    com.google.common.collect.HashMultimap create(int,int) -> create
    com.google.common.collect.HashMultimap create(com.google.common.collect.Multimap) -> create
    java.util.Set createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    boolean equals(java.lang.Object) -> equals
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Map asMap() -> asMap
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set entries() -> entries
    java.util.Set get(java.lang.Object) -> get
    java.util.Collection values() -> values
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    java.util.Collection createCollection() -> createCollection
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isEmpty() -> isEmpty
com.google.common.collect.HashMultiset -> com.google.common.collect.HashMultiset:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashMultiset create() -> create
    com.google.common.collect.HashMultiset create(int) -> create
    com.google.common.collect.HashMultiset create(java.lang.Iterable) -> create
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    int setCount(java.lang.Object,int) -> setCount
    int remove(java.lang.Object,int) -> remove
    int add(java.lang.Object,int) -> add
    int count(java.lang.Object) -> count
    java.util.Iterator iterator() -> iterator
    int size() -> size
    void clear() -> clear
    java.util.Set entrySet() -> entrySet
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set elementSet() -> elementSet
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean addAll(java.util.Collection) -> addAll
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean remove(java.lang.Object) -> remove
    boolean add(java.lang.Object) -> add
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
com.google.common.collect.Hashing -> com.google.common.collect.Hashing:
    int C1 -> C1
    int C2 -> C2
    int MAX_TABLE_SIZE -> MAX_TABLE_SIZE
    int smear(int) -> smear
    int smearedHash(java.lang.Object) -> smearedHash
    int closedTableSize(int,double) -> closedTableSize
    boolean needsResizing(int,int,double) -> needsResizing
com.google.common.collect.ImmutableAsList -> com.google.common.collect.ImmutableAsList:
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean isPartialView() -> isPartialView
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.ImmutableAsList$SerializedForm -> com.google.common.collect.ImmutableAsList$SerializedForm:
    com.google.common.collect.ImmutableCollection collection -> collection
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableBiMap -> com.google.common.collect.ImmutableBiMap:
    java.util.Map$Entry[] EMPTY_ENTRY_ARRAY -> EMPTY_ENTRY_ARRAY
    com.google.common.collect.ImmutableBiMap of() -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap$Builder builder() -> builder
    com.google.common.collect.ImmutableBiMap copyOf(java.util.Map) -> copyOf
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.ImmutableSet values() -> values
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableCollection values() -> values
    java.util.Collection values() -> values
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
com.google.common.collect.ImmutableBiMap$Builder -> com.google.common.collect.ImmutableBiMap$Builder:
    com.google.common.collect.ImmutableBiMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableBiMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableBiMap build() -> build
    com.google.common.collect.ImmutableMap build() -> build
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableBiMap$SerializedForm -> com.google.common.collect.ImmutableBiMap$SerializedForm:
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableClassToInstanceMap -> com.google.common.collect.ImmutableClassToInstanceMap:
    com.google.common.collect.ImmutableMap delegate -> delegate
    com.google.common.collect.ImmutableClassToInstanceMap$Builder builder() -> builder
    com.google.common.collect.ImmutableClassToInstanceMap copyOf(java.util.Map) -> copyOf
    java.util.Map delegate() -> delegate
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object delegate() -> delegate
com.google.common.collect.ImmutableClassToInstanceMap$1 -> com.google.common.collect.ImmutableClassToInstanceMap$1:
com.google.common.collect.ImmutableClassToInstanceMap$Builder -> com.google.common.collect.ImmutableClassToInstanceMap$Builder:
    com.google.common.collect.ImmutableMap$Builder mapBuilder -> mapBuilder
    com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object) -> put
    com.google.common.collect.ImmutableClassToInstanceMap$Builder putAll(java.util.Map) -> putAll
    java.lang.Object cast(java.lang.Class,java.lang.Object) -> cast
    com.google.common.collect.ImmutableClassToInstanceMap build() -> build
com.google.common.collect.ImmutableCollection -> com.google.common.collect.ImmutableCollection:
    com.google.common.collect.ImmutableList asList -> asList
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    com.google.common.collect.ImmutableList asList() -> asList
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder -> com.google.common.collect.ImmutableCollection$ArrayBasedBuilder:
    java.lang.Object[] contents -> contents
    int size -> size
    void ensureCapacity(int) -> ensureCapacity
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableCollection$Builder -> com.google.common.collect.ImmutableCollection$Builder:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int expandedCapacity(int,int) -> expandedCapacity
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection build() -> build
com.google.common.collect.ImmutableEntry -> com.google.common.collect.ImmutableEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ImmutableEnumMap -> com.google.common.collect.ImmutableEnumMap:
    java.util.EnumMap delegate -> delegate
    com.google.common.collect.ImmutableMap asImmutable(java.util.EnumMap) -> asImmutable
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.util.EnumMap access$000(com.google.common.collect.ImmutableEnumMap) -> access$000
com.google.common.collect.ImmutableEnumMap$1 -> com.google.common.collect.ImmutableEnumMap$1:
    com.google.common.collect.ImmutableEnumMap this$0 -> this$0
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableEnumMap$2 -> com.google.common.collect.ImmutableEnumMap$2:
    com.google.common.collect.ImmutableEnumMap this$0 -> this$0
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableEnumMap$2$1 -> com.google.common.collect.ImmutableEnumMap$2$1:
    java.util.Iterator backingIterator -> backingIterator
    com.google.common.collect.ImmutableEnumMap$2 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.ImmutableEnumMap$EnumSerializedForm -> com.google.common.collect.ImmutableEnumMap$EnumSerializedForm:
    java.util.EnumMap delegate -> delegate
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableEnumSet -> com.google.common.collect.ImmutableEnumSet:
    java.util.EnumSet delegate -> delegate
    int hashCode -> hashCode
    com.google.common.collect.ImmutableSet asImmutable(java.util.EnumSet) -> asImmutable
    boolean isPartialView() -> isPartialView
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableEnumSet$1 -> com.google.common.collect.ImmutableEnumSet$1:
com.google.common.collect.ImmutableEnumSet$EnumSerializedForm -> com.google.common.collect.ImmutableEnumSet$EnumSerializedForm:
    java.util.EnumSet delegate -> delegate
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableList -> com.google.common.collect.ImmutableList:
    com.google.common.collect.ImmutableList EMPTY -> EMPTY
    com.google.common.collect.ImmutableList of() -> of
    com.google.common.collect.ImmutableList of(java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableList copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableList construct(java.lang.Object[]) -> construct
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]) -> asImmutableList
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int) -> asImmutableList
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableListIterator listIterator() -> listIterator
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> subListUnchecked
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    com.google.common.collect.ImmutableList asList() -> asList
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList reverse() -> reverse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableList$Builder builder() -> builder
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
com.google.common.collect.ImmutableList$1 -> com.google.common.collect.ImmutableList$1:
    com.google.common.collect.ImmutableList this$0 -> this$0
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableList$Builder -> com.google.common.collect.ImmutableList$Builder:
    com.google.common.collect.ImmutableList$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableList$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableList$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableList$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableList build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableList$ReverseImmutableList -> com.google.common.collect.ImmutableList$ReverseImmutableList:
    com.google.common.collect.ImmutableList forwardList -> forwardList
    int reverseIndex(int) -> reverseIndex
    int reversePosition(int) -> reversePosition
    com.google.common.collect.ImmutableList reverse() -> reverse
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    java.lang.Object get(int) -> get
    int size() -> size
    boolean isPartialView() -> isPartialView
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableList$SerializedForm -> com.google.common.collect.ImmutableList$SerializedForm:
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableList$SubList -> com.google.common.collect.ImmutableList$SubList:
    int offset -> offset
    int length -> length
    com.google.common.collect.ImmutableList this$0 -> this$0
    int size() -> size
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    boolean isPartialView() -> isPartialView
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableListMultimap -> com.google.common.collect.ImmutableListMultimap:
    com.google.common.collect.ImmutableListMultimap inverse -> inverse
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableListMultimap of() -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    com.google.common.collect.ImmutableList get(java.lang.Object) -> get
    com.google.common.collect.ImmutableListMultimap inverse() -> inverse
    com.google.common.collect.ImmutableListMultimap invert() -> invert
    com.google.common.collect.ImmutableList removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableList replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List get(java.lang.Object) -> get
com.google.common.collect.ImmutableListMultimap$Builder -> com.google.common.collect.ImmutableListMultimap$Builder:
    com.google.common.collect.ImmutableListMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableListMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableListMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableListMultimap build() -> build
    com.google.common.collect.ImmutableMultimap build() -> build
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableMap -> com.google.common.collect.ImmutableMap:
    java.util.Map$Entry[] EMPTY_ENTRY_ARRAY -> EMPTY_ENTRY_ARRAY
    com.google.common.collect.ImmutableSet entrySet -> entrySet
    com.google.common.collect.ImmutableSet keySet -> keySet
    com.google.common.collect.ImmutableCollection values -> values
    com.google.common.collect.ImmutableSetMultimap multimapView -> multimapView
    com.google.common.collect.ImmutableMap of() -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMapEntry$TerminalEntry entryOf(java.lang.Object,java.lang.Object) -> entryOf
    com.google.common.collect.ImmutableMap$Builder builder() -> builder
    void checkNoConflict(boolean,java.lang.String,java.util.Map$Entry,java.util.Map$Entry) -> checkNoConflict
    com.google.common.collect.ImmutableMap copyOf(java.util.Map) -> copyOf
    com.google.common.collect.ImmutableMap copyOfEnumMapUnsafe(java.util.Map) -> copyOfEnumMapUnsafe
    com.google.common.collect.ImmutableMap copyOfEnumMap(java.util.Map) -> copyOfEnumMap
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet keySet() -> keySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableSetMultimap asMultimap() -> asMultimap
    com.google.common.collect.ImmutableSetMultimap createMultimapView() -> createMultimapView
    com.google.common.collect.ImmutableMap viewMapValuesAsSingletonSets() -> viewMapValuesAsSingletonSets
    boolean equals(java.lang.Object) -> equals
    boolean isPartialView() -> isPartialView
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
com.google.common.collect.ImmutableMap$Builder -> com.google.common.collect.ImmutableMap$Builder:
    com.google.common.collect.ImmutableMapEntry$TerminalEntry[] entries -> entries
    int size -> size
    void ensureCapacity(int) -> ensureCapacity
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap build() -> build
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:
    com.google.common.collect.ImmutableMap delegate -> delegate
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    com.google.common.collect.ImmutableSet get(java.lang.Object) -> get
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    java.lang.Object get(java.lang.Object) -> get
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.ImmutableMap access$000(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets) -> access$000
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1:
    com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets this$0 -> this$0
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1:
    java.util.Iterator val$backingIterator -> val$backingIterator
    com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1 -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1:
    java.util.Map$Entry val$backingEntry -> val$backingEntry
    com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 this$2 -> this$2
    java.lang.Object getKey() -> getKey
    com.google.common.collect.ImmutableSet getValue() -> getValue
    java.lang.Object getValue() -> getValue
com.google.common.collect.ImmutableMap$SerializedForm -> com.google.common.collect.ImmutableMap$SerializedForm:
    java.lang.Object[] keys -> keys
    java.lang.Object[] values -> values
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
    java.lang.Object createMap(com.google.common.collect.ImmutableMap$Builder) -> createMap
com.google.common.collect.ImmutableMapEntry -> com.google.common.collect.ImmutableMapEntry:
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.ImmutableMapEntry$TerminalEntry -> com.google.common.collect.ImmutableMapEntry$TerminalEntry:
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.ImmutableMapEntrySet -> com.google.common.collect.ImmutableMapEntrySet:
    com.google.common.collect.ImmutableMap map() -> map
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm -> com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMapKeySet -> com.google.common.collect.ImmutableMapKeySet:
    com.google.common.collect.ImmutableMap map -> map
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMapKeySet$1 -> com.google.common.collect.ImmutableMapKeySet$1:
    com.google.common.collect.ImmutableList val$entryList -> val$entryList
    com.google.common.collect.ImmutableMapKeySet this$0 -> this$0
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm -> com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMapValues -> com.google.common.collect.ImmutableMapValues:
    com.google.common.collect.ImmutableMap map -> map
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMapValues$1 -> com.google.common.collect.ImmutableMapValues$1:
    com.google.common.collect.ImmutableList val$entryList -> val$entryList
    com.google.common.collect.ImmutableMapValues this$0 -> this$0
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableMapValues$SerializedForm -> com.google.common.collect.ImmutableMapValues$SerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultimap -> com.google.common.collect.ImmutableMultimap:
    com.google.common.collect.ImmutableMap map -> map
    int size -> size
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableMultimap of() -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    void clear() -> clear
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean isPartialView() -> isPartialView
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    int size() -> size
    com.google.common.collect.ImmutableSet keySet() -> keySet
    com.google.common.collect.ImmutableMap asMap() -> asMap
    java.util.Map createAsMap() -> createAsMap
    com.google.common.collect.ImmutableCollection entries() -> entries
    com.google.common.collect.ImmutableCollection createEntries() -> createEntries
    com.google.common.collect.UnmodifiableIterator entryIterator() -> entryIterator
    com.google.common.collect.ImmutableMultiset keys() -> keys
    com.google.common.collect.ImmutableMultiset createKeys() -> createKeys
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    com.google.common.collect.UnmodifiableIterator valueIterator() -> valueIterator
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Map asMap() -> asMap
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Collection createValues() -> createValues
    java.util.Collection values() -> values
    com.google.common.collect.Multiset createKeys() -> createKeys
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection createEntries() -> createEntries
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean isEmpty() -> isEmpty
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
com.google.common.collect.ImmutableMultimap$1 -> com.google.common.collect.ImmutableMultimap$1:
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    java.util.Map$Entry output(java.lang.Object,java.lang.Object) -> output
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.ImmutableMultimap$2 -> com.google.common.collect.ImmutableMultimap$2:
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.ImmutableMultimap$Builder -> com.google.common.collect.ImmutableMultimap$Builder:
    com.google.common.collect.Multimap builderMultimap -> builderMultimap
    java.util.Comparator keyComparator -> keyComparator
    java.util.Comparator valueComparator -> valueComparator
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap build() -> build
com.google.common.collect.ImmutableMultimap$BuilderMultimap -> com.google.common.collect.ImmutableMultimap$BuilderMultimap:
    long serialVersionUID -> serialVersionUID
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.ImmutableMultimap$EntryCollection -> com.google.common.collect.ImmutableMultimap$EntryCollection:
    com.google.common.collect.ImmutableMultimap multimap -> multimap
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultimap$FieldSettersHolder -> com.google.common.collect.ImmutableMultimap$FieldSettersHolder:
    com.google.common.collect.Serialization$FieldSetter MAP_FIELD_SETTER -> MAP_FIELD_SETTER
    com.google.common.collect.Serialization$FieldSetter SIZE_FIELD_SETTER -> SIZE_FIELD_SETTER
    com.google.common.collect.Serialization$FieldSetter EMPTY_SET_FIELD_SETTER -> EMPTY_SET_FIELD_SETTER
com.google.common.collect.ImmutableMultimap$Itr -> com.google.common.collect.ImmutableMultimap$Itr:
    java.util.Iterator mapIterator -> mapIterator
    java.lang.Object key -> key
    java.util.Iterator valueIterator -> valueIterator
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMultimap$Keys -> com.google.common.collect.ImmutableMultimap$Keys:
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    boolean contains(java.lang.Object) -> contains
    int count(java.lang.Object) -> count
    java.util.Set elementSet() -> elementSet
    int size() -> size
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    boolean isPartialView() -> isPartialView
com.google.common.collect.ImmutableMultimap$Values -> com.google.common.collect.ImmutableMultimap$Values:
    com.google.common.collect.ImmutableMultimap multimap -> multimap
    long serialVersionUID -> serialVersionUID
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    int size() -> size
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultiset -> com.google.common.collect.ImmutableMultiset:
    com.google.common.collect.ImmutableMultiset EMPTY -> EMPTY
    com.google.common.collect.ImmutableSet entrySet -> entrySet
    com.google.common.collect.ImmutableMultiset of() -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableMultiset copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableMultiset copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableMultiset copyOfInternal(java.lang.Object[]) -> copyOfInternal
    com.google.common.collect.ImmutableMultiset copyOfInternal(com.google.common.collect.Multiset) -> copyOfInternal
    com.google.common.collect.ImmutableMultiset copyFromEntries(java.util.Collection) -> copyFromEntries
    com.google.common.collect.ImmutableMultiset copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableMultiset$Builder builder() -> builder
    java.util.Iterator iterator() -> iterator
    java.util.Set entrySet() -> entrySet
com.google.common.collect.ImmutableMultiset$1 -> com.google.common.collect.ImmutableMultiset$1:
    int remaining -> remaining
    java.lang.Object element -> element
    java.util.Iterator val$entryIterator -> val$entryIterator
    com.google.common.collect.ImmutableMultiset this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMultiset$Builder -> com.google.common.collect.ImmutableMultiset$Builder:
    com.google.common.collect.Multiset contents -> contents
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object,int) -> setCount
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableMultiset build() -> build
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableMultiset$EntrySet -> com.google.common.collect.ImmutableMultiset$EntrySet:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableMultiset this$0 -> this$0
    boolean isPartialView() -> isPartialView
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultiset$EntrySet$1 -> com.google.common.collect.ImmutableMultiset$EntrySet$1:
    com.google.common.collect.ImmutableMultiset$EntrySet this$1 -> this$1
    com.google.common.collect.Multiset$Entry get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm -> com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:
    com.google.common.collect.ImmutableMultiset multiset -> multiset
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultiset$SerializedForm -> com.google.common.collect.ImmutableMultiset$SerializedForm:
    java.lang.Object[] elements -> elements
    int[] counts -> counts
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableRangeMap -> com.google.common.collect.ImmutableRangeMap:
    com.google.common.collect.ImmutableRangeMap EMPTY -> EMPTY
    com.google.common.collect.ImmutableList ranges -> ranges
    com.google.common.collect.ImmutableList values -> values
    com.google.common.collect.ImmutableRangeMap of() -> of
    com.google.common.collect.ImmutableRangeMap of(com.google.common.collect.Range,java.lang.Object) -> of
    com.google.common.collect.ImmutableRangeMap copyOf(com.google.common.collect.RangeMap) -> copyOf
    com.google.common.collect.ImmutableRangeMap$Builder builder() -> builder
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    com.google.common.collect.ImmutableMap asMapOfRanges() -> asMapOfRanges
    com.google.common.collect.ImmutableRangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    java.util.Map asMapOfRanges() -> asMapOfRanges
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.ImmutableRangeMap) -> access$000
com.google.common.collect.ImmutableRangeMap$1 -> com.google.common.collect.ImmutableRangeMap$1:
    int val$len -> val$len
    int val$off -> val$off
    com.google.common.collect.Range val$range -> val$range
    com.google.common.collect.ImmutableRangeMap this$0 -> this$0
    int size() -> size
    com.google.common.collect.Range get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeMap$2 -> com.google.common.collect.ImmutableRangeMap$2:
    com.google.common.collect.Range val$range -> val$range
    com.google.common.collect.ImmutableRangeMap val$outer -> val$outer
    com.google.common.collect.ImmutableRangeMap this$0 -> this$0
    com.google.common.collect.ImmutableRangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    java.util.Map asMapOfRanges() -> asMapOfRanges
com.google.common.collect.ImmutableRangeMap$Builder -> com.google.common.collect.ImmutableRangeMap$Builder:
    com.google.common.collect.RangeSet keyRanges -> keyRanges
    com.google.common.collect.RangeMap rangeMap -> rangeMap
    com.google.common.collect.ImmutableRangeMap$Builder put(com.google.common.collect.Range,java.lang.Object) -> put
    com.google.common.collect.ImmutableRangeMap$Builder putAll(com.google.common.collect.RangeMap) -> putAll
    com.google.common.collect.ImmutableRangeMap build() -> build
com.google.common.collect.ImmutableRangeSet -> com.google.common.collect.ImmutableRangeSet:
    com.google.common.collect.ImmutableRangeSet EMPTY -> EMPTY
    com.google.common.collect.ImmutableRangeSet ALL -> ALL
    com.google.common.collect.ImmutableList ranges -> ranges
    com.google.common.collect.ImmutableRangeSet complement -> complement
    com.google.common.collect.ImmutableRangeSet of() -> of
    com.google.common.collect.ImmutableRangeSet all() -> all
    com.google.common.collect.ImmutableRangeSet of(com.google.common.collect.Range) -> of
    com.google.common.collect.ImmutableRangeSet copyOf(com.google.common.collect.RangeSet) -> copyOf
    boolean encloses(com.google.common.collect.Range) -> encloses
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    com.google.common.collect.Range span() -> span
    boolean isEmpty() -> isEmpty
    void add(com.google.common.collect.Range) -> add
    void addAll(com.google.common.collect.RangeSet) -> addAll
    void remove(com.google.common.collect.Range) -> remove
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    com.google.common.collect.ImmutableSet asRanges() -> asRanges
    com.google.common.collect.ImmutableRangeSet complement() -> complement
    com.google.common.collect.ImmutableList intersectRanges(com.google.common.collect.Range) -> intersectRanges
    com.google.common.collect.ImmutableRangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    com.google.common.collect.ImmutableSortedSet asSet(com.google.common.collect.DiscreteDomain) -> asSet
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableRangeSet$Builder builder() -> builder
    java.lang.Object writeReplace() -> writeReplace
    boolean equals(java.lang.Object) -> equals
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    void clear() -> clear
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    com.google.common.collect.RangeSet complement() -> complement
    java.util.Set asRanges() -> asRanges
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.ImmutableRangeSet) -> access$000
com.google.common.collect.ImmutableRangeSet$1 -> com.google.common.collect.ImmutableRangeSet$1:
    int val$length -> val$length
    int val$fromIndex -> val$fromIndex
    com.google.common.collect.Range val$range -> val$range
    com.google.common.collect.ImmutableRangeSet this$0 -> this$0
    int size() -> size
    com.google.common.collect.Range get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeSet$AsSet -> com.google.common.collect.ImmutableRangeSet$AsSet:
    com.google.common.collect.DiscreteDomain domain -> domain
    java.lang.Integer size -> size
    com.google.common.collect.ImmutableRangeSet this$0 -> this$0
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    com.google.common.collect.ImmutableSortedSet subSet(com.google.common.collect.Range) -> subSet
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Comparable,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Comparable,boolean) -> tailSetImpl
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    boolean isPartialView() -> isPartialView
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.DiscreteDomain access$100(com.google.common.collect.ImmutableRangeSet$AsSet) -> access$100
com.google.common.collect.ImmutableRangeSet$AsSet$1 -> com.google.common.collect.ImmutableRangeSet$AsSet$1:
    java.util.Iterator rangeItr -> rangeItr
    java.util.Iterator elemItr -> elemItr
    com.google.common.collect.ImmutableRangeSet$AsSet this$1 -> this$1
    java.lang.Comparable computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.ImmutableRangeSet$AsSet$2 -> com.google.common.collect.ImmutableRangeSet$AsSet$2:
    java.util.Iterator rangeItr -> rangeItr
    java.util.Iterator elemItr -> elemItr
    com.google.common.collect.ImmutableRangeSet$AsSet this$1 -> this$1
    java.lang.Comparable computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm -> com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:
    com.google.common.collect.ImmutableList ranges -> ranges
    com.google.common.collect.DiscreteDomain domain -> domain
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableRangeSet$Builder -> com.google.common.collect.ImmutableRangeSet$Builder:
    com.google.common.collect.RangeSet rangeSet -> rangeSet
    com.google.common.collect.ImmutableRangeSet$Builder add(com.google.common.collect.Range) -> add
    com.google.common.collect.ImmutableRangeSet$Builder addAll(com.google.common.collect.RangeSet) -> addAll
    com.google.common.collect.ImmutableRangeSet build() -> build
com.google.common.collect.ImmutableRangeSet$ComplementRanges -> com.google.common.collect.ImmutableRangeSet$ComplementRanges:
    boolean positiveBoundedBelow -> positiveBoundedBelow
    boolean positiveBoundedAbove -> positiveBoundedAbove
    int size -> size
    com.google.common.collect.ImmutableRangeSet this$0 -> this$0
    int size() -> size
    com.google.common.collect.Range get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeSet$SerializedForm -> com.google.common.collect.ImmutableRangeSet$SerializedForm:
    com.google.common.collect.ImmutableList ranges -> ranges
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSet -> com.google.common.collect.ImmutableSet:
    int MAX_TABLE_SIZE -> MAX_TABLE_SIZE
    double DESIRED_LOAD_FACTOR -> DESIRED_LOAD_FACTOR
    int CUTOFF -> CUTOFF
    com.google.common.collect.ImmutableSet of() -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableSet construct(int,java.lang.Object[]) -> construct
    int chooseTableSize(int) -> chooseTableSize
    com.google.common.collect.ImmutableSet copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableSet copyOfEnumSet(java.util.EnumSet) -> copyOfEnumSet
    boolean isHashCodeFast() -> isHashCodeFast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSet$Builder builder() -> builder
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.ImmutableSet access$000(int,java.lang.Object[]) -> access$000
com.google.common.collect.ImmutableSet$Builder -> com.google.common.collect.ImmutableSet$Builder:
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSet build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSet$SerializedForm -> com.google.common.collect.ImmutableSet$SerializedForm:
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSetMultimap -> com.google.common.collect.ImmutableSetMultimap:
    com.google.common.collect.ImmutableSet emptySet -> emptySet
    com.google.common.collect.ImmutableSetMultimap inverse -> inverse
    com.google.common.collect.ImmutableSet entries -> entries
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableSetMultimap of() -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator) -> copyOf
    com.google.common.collect.ImmutableSet get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSetMultimap inverse() -> inverse
    com.google.common.collect.ImmutableSetMultimap invert() -> invert
    com.google.common.collect.ImmutableSet removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableSet entries() -> entries
    com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection) -> valueSet
    com.google.common.collect.ImmutableSet emptySet(java.util.Comparator) -> emptySet
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    java.util.Comparator valueComparator() -> valueComparator
    void readObject(java.io.ObjectInputStream) -> readObject
    com.google.common.collect.ImmutableCollection entries() -> entries
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Set entries() -> entries
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSetMultimap access$000(com.google.common.collect.Multimap,java.util.Comparator) -> access$000
com.google.common.collect.ImmutableSetMultimap$Builder -> com.google.common.collect.ImmutableSetMultimap$Builder:
    com.google.common.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableSetMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableSetMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableSetMultimap build() -> build
    com.google.common.collect.ImmutableMultimap build() -> build
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableSetMultimap$BuilderMultimap -> com.google.common.collect.ImmutableSetMultimap$BuilderMultimap:
    long serialVersionUID -> serialVersionUID
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.ImmutableSetMultimap$EntrySet -> com.google.common.collect.ImmutableSetMultimap$EntrySet:
    com.google.common.collect.ImmutableSetMultimap multimap -> multimap
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSortedAsList -> com.google.common.collect.ImmutableSortedAsList:
    com.google.common.collect.ImmutableSortedSet delegateCollection() -> delegateCollection
    java.util.Comparator comparator() -> comparator
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> subListUnchecked
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableSortedMap -> com.google.common.collect.ImmutableSortedMap:
    java.util.Comparator NATURAL_ORDER -> NATURAL_ORDER
    com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP -> NATURAL_EMPTY_MAP
    com.google.common.collect.ImmutableSortedMap descendingMap -> descendingMap
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator) -> emptyMap
    com.google.common.collect.ImmutableSortedMap fromSortedEntries(java.util.Comparator,int,java.util.Map$Entry[]) -> fromSortedEntries
    com.google.common.collect.ImmutableSortedMap from(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList) -> from
    com.google.common.collect.ImmutableSortedMap of() -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map) -> copyOf
    com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map,java.util.Comparator) -> copyOf
    com.google.common.collect.ImmutableSortedMap copyOfSorted(java.util.SortedMap) -> copyOfSorted
    com.google.common.collect.ImmutableSortedMap copyOfInternal(java.util.Map,java.util.Comparator) -> copyOfInternal
    com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,int,java.util.Map$Entry[]) -> fromEntries
    void sortEntries(java.util.Comparator,int,java.util.Map$Entry[]) -> sortEntries
    void validateEntries(int,java.util.Map$Entry[],java.util.Comparator) -> validateEntries
    com.google.common.collect.ImmutableSortedMap$Builder naturalOrder() -> naturalOrder
    com.google.common.collect.ImmutableSortedMap$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.ImmutableSortedMap$Builder reverseOrder() -> reverseOrder
    int size() -> size
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSortedSet keySet() -> keySet
    com.google.common.collect.ImmutableCollection values() -> values
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object) -> headMap
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> headMap
    com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object) -> tailMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.ImmutableSortedMap descendingMap() -> descendingMap
    com.google.common.collect.ImmutableSortedMap createDescendingMap() -> createDescendingMap
    com.google.common.collect.ImmutableSortedSet navigableKeySet() -> navigableKeySet
    com.google.common.collect.ImmutableSortedSet descendingKeySet() -> descendingKeySet
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSet keySet() -> keySet
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
com.google.common.collect.ImmutableSortedMap$Builder -> com.google.common.collect.ImmutableSortedMap$Builder:
    java.util.Comparator comparator -> comparator
    com.google.common.collect.ImmutableSortedMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableSortedMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableSortedMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableSortedMap build() -> build
    com.google.common.collect.ImmutableMap build() -> build
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableSortedMap$SerializedForm -> com.google.common.collect.ImmutableSortedMap$SerializedForm:
    java.util.Comparator comparator -> comparator
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedMapFauxverideShim -> com.google.common.collect.ImmutableSortedMapFauxverideShim:
    com.google.common.collect.ImmutableSortedMap$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
com.google.common.collect.ImmutableSortedMultiset -> com.google.common.collect.ImmutableSortedMultiset:
    java.util.Comparator NATURAL_ORDER -> NATURAL_ORDER
    com.google.common.collect.ImmutableSortedMultiset NATURAL_EMPTY_MULTISET -> NATURAL_EMPTY_MULTISET
    com.google.common.collect.ImmutableSortedMultiset descendingMultiset -> descendingMultiset
    com.google.common.collect.ImmutableSortedMultiset of() -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> of
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Comparable[]) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOfSorted(com.google.common.collect.SortedMultiset) -> copyOfSorted
    com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator,java.util.Collection) -> copyOfSortedEntries
    com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator) -> emptyMultiset
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    com.google.common.collect.ImmutableSortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.ImmutableSortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.ImmutableSortedMultiset$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.ImmutableSortedMultiset$Builder reverseOrder() -> reverseOrder
    com.google.common.collect.ImmutableSortedMultiset$Builder naturalOrder() -> naturalOrder
    java.lang.Object writeReplace() -> writeReplace
    java.util.Set elementSet() -> elementSet
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    java.util.NavigableSet elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.ImmutableSortedMultiset$Builder -> com.google.common.collect.ImmutableSortedMultiset$Builder:
    com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    com.google.common.collect.ImmutableSortedMultiset$Builder setCount(java.lang.Object,int) -> setCount
    com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSortedMultiset build() -> build
    com.google.common.collect.ImmutableMultiset build() -> build
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object,int) -> setCount
    com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSortedMultiset$SerializedForm -> com.google.common.collect.ImmutableSortedMultiset$SerializedForm:
    java.util.Comparator comparator -> comparator
    java.lang.Object[] elements -> elements
    int[] counts -> counts
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedMultisetFauxverideShim -> com.google.common.collect.ImmutableSortedMultisetFauxverideShim:
    com.google.common.collect.ImmutableSortedMultiset$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Object[]) -> copyOf
com.google.common.collect.ImmutableSortedSet -> com.google.common.collect.ImmutableSortedSet:
    java.util.Comparator NATURAL_ORDER -> NATURAL_ORDER
    com.google.common.collect.ImmutableSortedSet NATURAL_EMPTY_SET -> NATURAL_EMPTY_SET
    java.util.Comparator comparator -> comparator
    com.google.common.collect.ImmutableSortedSet descendingSet -> descendingSet
    com.google.common.collect.ImmutableSortedSet emptySet() -> emptySet
    com.google.common.collect.ImmutableSortedSet emptySet(java.util.Comparator) -> emptySet
    com.google.common.collect.ImmutableSortedSet of() -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> of
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Comparable[]) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOfSorted(java.util.SortedSet) -> copyOfSorted
    com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[]) -> construct
    com.google.common.collect.ImmutableSortedSet$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.ImmutableSortedSet$Builder reverseOrder() -> reverseOrder
    com.google.common.collect.ImmutableSortedSet$Builder naturalOrder() -> naturalOrder
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    int unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object) -> unsafeCompare
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object) -> headSet
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean) -> headSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object) -> tailSet
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean) -> tailSet
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    com.google.common.collect.ImmutableSortedSet descendingSet() -> descendingSet
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    int indexOf(java.lang.Object) -> indexOf
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
com.google.common.collect.ImmutableSortedSet$Builder -> com.google.common.collect.ImmutableSortedSet$Builder:
    java.util.Comparator comparator -> comparator
    com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSortedSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSortedSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSortedSet build() -> build
    com.google.common.collect.ImmutableSet build() -> build
    com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSortedSet$SerializedForm -> com.google.common.collect.ImmutableSortedSet$SerializedForm:
    java.util.Comparator comparator -> comparator
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedSetFauxverideShim -> com.google.common.collect.ImmutableSortedSetFauxverideShim:
    com.google.common.collect.ImmutableSortedSet$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Object[]) -> copyOf
com.google.common.collect.ImmutableTable -> com.google.common.collect.ImmutableTable:
    com.google.common.collect.ImmutableTable EMPTY -> EMPTY
    com.google.common.collect.ImmutableTable of() -> of
    com.google.common.collect.ImmutableTable of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableTable copyOf(com.google.common.collect.Table) -> copyOf
    com.google.common.collect.ImmutableTable$Builder builder() -> builder
    com.google.common.collect.Table$Cell cellOf(java.lang.Object,java.lang.Object,java.lang.Object) -> cellOf
    com.google.common.collect.ImmutableSet cellSet() -> cellSet
    com.google.common.collect.ImmutableSet createCellSet() -> createCellSet
    com.google.common.collect.UnmodifiableIterator cellIterator() -> cellIterator
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    java.util.Iterator valuesIterator() -> valuesIterator
    com.google.common.collect.ImmutableMap column(java.lang.Object) -> column
    com.google.common.collect.ImmutableSet columnKeySet() -> columnKeySet
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    com.google.common.collect.ImmutableMap row(java.lang.Object) -> row
    com.google.common.collect.ImmutableSet rowKeySet() -> rowKeySet
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsValue(java.lang.Object) -> containsValue
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Collection createValues() -> createValues
    java.util.Collection values() -> values
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Set createCellSet() -> createCellSet
    java.util.Set cellSet() -> cellSet
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Set rowKeySet() -> rowKeySet
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    java.util.Map column(java.lang.Object) -> column
    java.util.Map row(java.lang.Object) -> row
com.google.common.collect.ImmutableTable$Builder -> com.google.common.collect.ImmutableTable$Builder:
    java.util.List cells -> cells
    java.util.Comparator rowComparator -> rowComparator
    java.util.Comparator columnComparator -> columnComparator
    com.google.common.collect.ImmutableTable$Builder orderRowsBy(java.util.Comparator) -> orderRowsBy
    com.google.common.collect.ImmutableTable$Builder orderColumnsBy(java.util.Comparator) -> orderColumnsBy
    com.google.common.collect.ImmutableTable$Builder put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableTable$Builder put(com.google.common.collect.Table$Cell) -> put
    com.google.common.collect.ImmutableTable$Builder putAll(com.google.common.collect.Table) -> putAll
    com.google.common.collect.ImmutableTable build() -> build
com.google.common.collect.Interner -> com.google.common.collect.Interner:
    java.lang.Object intern(java.lang.Object) -> intern
com.google.common.collect.Interners -> com.google.common.collect.Interners:
    com.google.common.collect.Interner newStrongInterner() -> newStrongInterner
    com.google.common.collect.Interner newWeakInterner() -> newWeakInterner
    com.google.common.base.Function asFunction(com.google.common.collect.Interner) -> asFunction
com.google.common.collect.Interners$1 -> com.google.common.collect.Interners$1:
    java.util.concurrent.ConcurrentMap val$map -> val$map
    java.lang.Object intern(java.lang.Object) -> intern
com.google.common.collect.Interners$InternerFunction -> com.google.common.collect.Interners$InternerFunction:
    com.google.common.collect.Interner interner -> interner
    java.lang.Object apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.Interners$WeakInterner -> com.google.common.collect.Interners$WeakInterner:
    com.google.common.collect.MapMakerInternalMap map -> map
    java.lang.Object intern(java.lang.Object) -> intern
com.google.common.collect.Interners$WeakInterner$Dummy -> com.google.common.collect.Interners$WeakInterner$Dummy:
    com.google.common.collect.Interners$WeakInterner$Dummy VALUE -> VALUE
    com.google.common.collect.Interners$WeakInterner$Dummy[] $VALUES -> $VALUES
    com.google.common.collect.Interners$WeakInterner$Dummy[] values() -> values
    com.google.common.collect.Interners$WeakInterner$Dummy valueOf(java.lang.String) -> valueOf
com.google.common.collect.Iterables -> com.google.common.collect.Iterables:
    java.lang.Iterable unmodifiableIterable(java.lang.Iterable) -> unmodifiableIterable
    java.lang.Iterable unmodifiableIterable(com.google.common.collect.ImmutableCollection) -> unmodifiableIterable
    int size(java.lang.Iterable) -> size
    boolean contains(java.lang.Iterable,java.lang.Object) -> contains
    boolean removeAll(java.lang.Iterable,java.util.Collection) -> removeAll
    boolean retainAll(java.lang.Iterable,java.util.Collection) -> retainAll
    boolean removeIf(java.lang.Iterable,com.google.common.base.Predicate) -> removeIf
    boolean removeIfFromRandomAccessList(java.util.List,com.google.common.base.Predicate) -> removeIfFromRandomAccessList
    void slowRemoveIfForRemainingElements(java.util.List,com.google.common.base.Predicate,int,int) -> slowRemoveIfForRemainingElements
    java.lang.Object removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate) -> removeFirstMatching
    boolean elementsEqual(java.lang.Iterable,java.lang.Iterable) -> elementsEqual
    java.lang.String toString(java.lang.Iterable) -> toString
    java.lang.Object getOnlyElement(java.lang.Iterable) -> getOnlyElement
    java.lang.Object getOnlyElement(java.lang.Iterable,java.lang.Object) -> getOnlyElement
    java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class) -> toArray
    java.lang.Object[] toArray(java.lang.Iterable) -> toArray
    java.util.Collection toCollection(java.lang.Iterable) -> toCollection
    boolean addAll(java.util.Collection,java.lang.Iterable) -> addAll
    int frequency(java.lang.Iterable,java.lang.Object) -> frequency
    java.lang.Iterable cycle(java.lang.Iterable) -> cycle
    java.lang.Iterable cycle(java.lang.Object[]) -> cycle
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable[]) -> concat
    java.lang.Iterable concat(java.lang.Iterable) -> concat
    java.util.Iterator iterators(java.lang.Iterable) -> iterators
    java.lang.Iterable partition(java.lang.Iterable,int) -> partition
    java.lang.Iterable paddedPartition(java.lang.Iterable,int) -> paddedPartition
    java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate) -> filter
    java.lang.Iterable filter(java.lang.Iterable,java.lang.Class) -> filter
    boolean any(java.lang.Iterable,com.google.common.base.Predicate) -> any
    boolean all(java.lang.Iterable,com.google.common.base.Predicate) -> all
    java.lang.Object find(java.lang.Iterable,com.google.common.base.Predicate) -> find
    java.lang.Object find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object) -> find
    com.google.common.base.Optional tryFind(java.lang.Iterable,com.google.common.base.Predicate) -> tryFind
    int indexOf(java.lang.Iterable,com.google.common.base.Predicate) -> indexOf
    java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function) -> transform
    java.lang.Object get(java.lang.Iterable,int) -> get
    java.lang.Object get(java.lang.Iterable,int,java.lang.Object) -> get
    java.lang.Object getFirst(java.lang.Iterable,java.lang.Object) -> getFirst
    java.lang.Object getLast(java.lang.Iterable) -> getLast
    java.lang.Object getLast(java.lang.Iterable,java.lang.Object) -> getLast
    java.lang.Object getLastInNonemptyList(java.util.List) -> getLastInNonemptyList
    java.lang.Iterable skip(java.lang.Iterable,int) -> skip
    java.lang.Iterable limit(java.lang.Iterable,int) -> limit
    java.lang.Iterable consumingIterable(java.lang.Iterable) -> consumingIterable
    boolean isEmpty(java.lang.Iterable) -> isEmpty
    java.lang.Iterable mergeSorted(java.lang.Iterable,java.util.Comparator) -> mergeSorted
    com.google.common.base.Function toIterator() -> toIterator
    java.util.Iterator access$100(java.lang.Iterable) -> access$100
    com.google.common.base.Function access$300() -> access$300
com.google.common.collect.Iterables$1 -> com.google.common.collect.Iterables$1:
    java.lang.Iterable val$iterable -> val$iterable
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.google.common.collect.Iterables$10 -> com.google.common.collect.Iterables$10:
    java.lang.Iterable val$iterable -> val$iterable
    int val$numberToSkip -> val$numberToSkip
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$10$1 -> com.google.common.collect.Iterables$10$1:
    boolean atStart -> atStart
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.Iterables$10 this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterables$11 -> com.google.common.collect.Iterables$11:
    java.lang.Iterable val$iterable -> val$iterable
    int val$limitSize -> val$limitSize
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$12 -> com.google.common.collect.Iterables$12:
    java.lang.Iterable val$iterable -> val$iterable
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.google.common.collect.Iterables$13 -> com.google.common.collect.Iterables$13:
    java.lang.Iterable val$iterable -> val$iterable
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.google.common.collect.Iterables$14 -> com.google.common.collect.Iterables$14:
    java.lang.Iterable val$iterables -> val$iterables
    java.util.Comparator val$comparator -> val$comparator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$15 -> com.google.common.collect.Iterables$15:
    java.util.Iterator apply(java.lang.Iterable) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Iterables$2 -> com.google.common.collect.Iterables$2:
    java.lang.Iterable val$inputs -> val$inputs
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$3 -> com.google.common.collect.Iterables$3:
    java.util.Iterator transform(java.lang.Iterable) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Iterables$4 -> com.google.common.collect.Iterables$4:
    java.lang.Iterable val$iterable -> val$iterable
    int val$size -> val$size
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$5 -> com.google.common.collect.Iterables$5:
    java.lang.Iterable val$iterable -> val$iterable
    int val$size -> val$size
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$6 -> com.google.common.collect.Iterables$6:
    java.lang.Iterable val$unfiltered -> val$unfiltered
    com.google.common.base.Predicate val$predicate -> val$predicate
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$7 -> com.google.common.collect.Iterables$7:
    java.lang.Iterable val$unfiltered -> val$unfiltered
    java.lang.Class val$type -> val$type
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$8 -> com.google.common.collect.Iterables$8:
    java.lang.Iterable val$fromIterable -> val$fromIterable
    com.google.common.base.Function val$function -> val$function
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$9 -> com.google.common.collect.Iterables$9:
    java.util.List val$list -> val$list
    int val$numberToSkip -> val$numberToSkip
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$ConsumingQueueIterator -> com.google.common.collect.Iterables$ConsumingQueueIterator:
    java.util.Queue queue -> queue
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Iterables$UnmodifiableIterable -> com.google.common.collect.Iterables$UnmodifiableIterable:
    java.lang.Iterable iterable -> iterable
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.google.common.collect.Iterators -> com.google.common.collect.Iterators:
    com.google.common.collect.UnmodifiableListIterator EMPTY_LIST_ITERATOR -> EMPTY_LIST_ITERATOR
    java.util.Iterator EMPTY_MODIFIABLE_ITERATOR -> EMPTY_MODIFIABLE_ITERATOR
    com.google.common.collect.UnmodifiableIterator emptyIterator() -> emptyIterator
    com.google.common.collect.UnmodifiableListIterator emptyListIterator() -> emptyListIterator
    java.util.Iterator emptyModifiableIterator() -> emptyModifiableIterator
    com.google.common.collect.UnmodifiableIterator unmodifiableIterator(java.util.Iterator) -> unmodifiableIterator
    com.google.common.collect.UnmodifiableIterator unmodifiableIterator(com.google.common.collect.UnmodifiableIterator) -> unmodifiableIterator
    int size(java.util.Iterator) -> size
    boolean contains(java.util.Iterator,java.lang.Object) -> contains
    boolean removeAll(java.util.Iterator,java.util.Collection) -> removeAll
    boolean removeIf(java.util.Iterator,com.google.common.base.Predicate) -> removeIf
    boolean retainAll(java.util.Iterator,java.util.Collection) -> retainAll
    boolean elementsEqual(java.util.Iterator,java.util.Iterator) -> elementsEqual
    java.lang.String toString(java.util.Iterator) -> toString
    java.lang.Object getOnlyElement(java.util.Iterator) -> getOnlyElement
    java.lang.Object getOnlyElement(java.util.Iterator,java.lang.Object) -> getOnlyElement
    java.lang.Object[] toArray(java.util.Iterator,java.lang.Class) -> toArray
    boolean addAll(java.util.Collection,java.util.Iterator) -> addAll
    int frequency(java.util.Iterator,java.lang.Object) -> frequency
    java.util.Iterator cycle(java.lang.Iterable) -> cycle
    java.util.Iterator cycle(java.lang.Object[]) -> cycle
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator[]) -> concat
    java.util.Iterator concat(java.util.Iterator) -> concat
    com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int) -> partition
    com.google.common.collect.UnmodifiableIterator paddedPartition(java.util.Iterator,int) -> paddedPartition
    com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean) -> partitionImpl
    com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate) -> filter
    com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,java.lang.Class) -> filter
    boolean any(java.util.Iterator,com.google.common.base.Predicate) -> any
    boolean all(java.util.Iterator,com.google.common.base.Predicate) -> all
    java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate) -> find
    java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object) -> find
    com.google.common.base.Optional tryFind(java.util.Iterator,com.google.common.base.Predicate) -> tryFind
    int indexOf(java.util.Iterator,com.google.common.base.Predicate) -> indexOf
    java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function) -> transform
    java.lang.Object get(java.util.Iterator,int) -> get
    void checkNonnegative(int) -> checkNonnegative
    java.lang.Object get(java.util.Iterator,int,java.lang.Object) -> get
    java.lang.Object getNext(java.util.Iterator,java.lang.Object) -> getNext
    java.lang.Object getLast(java.util.Iterator) -> getLast
    java.lang.Object getLast(java.util.Iterator,java.lang.Object) -> getLast
    int advance(java.util.Iterator,int) -> advance
    java.util.Iterator limit(java.util.Iterator,int) -> limit
    java.util.Iterator consumingIterator(java.util.Iterator) -> consumingIterator
    java.lang.Object pollNext(java.util.Iterator) -> pollNext
    void clear(java.util.Iterator) -> clear
    com.google.common.collect.UnmodifiableIterator forArray(java.lang.Object[]) -> forArray
    com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[],int,int,int) -> forArray
    com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object) -> singletonIterator
    com.google.common.collect.UnmodifiableIterator forEnumeration(java.util.Enumeration) -> forEnumeration
    java.util.Enumeration asEnumeration(java.util.Iterator) -> asEnumeration
    com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator) -> peekingIterator
    com.google.common.collect.PeekingIterator peekingIterator(com.google.common.collect.PeekingIterator) -> peekingIterator
    com.google.common.collect.UnmodifiableIterator mergeSorted(java.lang.Iterable,java.util.Comparator) -> mergeSorted
    java.util.ListIterator cast(java.util.Iterator) -> cast
com.google.common.collect.Iterators$1 -> com.google.common.collect.Iterators$1:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
com.google.common.collect.Iterators$10 -> com.google.common.collect.Iterators$10:
    java.util.Iterator val$iterator -> val$iterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.lang.String toString() -> toString
com.google.common.collect.Iterators$11 -> com.google.common.collect.Iterators$11:
    java.lang.Object[] val$array -> val$array
    int val$offset -> val$offset
    java.lang.Object get(int) -> get
com.google.common.collect.Iterators$12 -> com.google.common.collect.Iterators$12:
    boolean done -> done
    java.lang.Object val$value -> val$value
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$13 -> com.google.common.collect.Iterators$13:
    java.util.Enumeration val$enumeration -> val$enumeration
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$14 -> com.google.common.collect.Iterators$14:
    java.util.Iterator val$iterator -> val$iterator
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
com.google.common.collect.Iterators$2 -> com.google.common.collect.Iterators$2:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$3 -> com.google.common.collect.Iterators$3:
    java.util.Iterator val$iterator -> val$iterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$4 -> com.google.common.collect.Iterators$4:
    java.util.Iterator iterator -> iterator
    java.util.Iterator removeFrom -> removeFrom
    java.lang.Iterable val$iterable -> val$iterable
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$5 -> com.google.common.collect.Iterators$5:
    java.util.Iterator current -> current
    java.util.Iterator removeFrom -> removeFrom
    java.util.Iterator val$inputs -> val$inputs
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$6 -> com.google.common.collect.Iterators$6:
    java.util.Iterator val$iterator -> val$iterator
    int val$size -> val$size
    boolean val$pad -> val$pad
    boolean hasNext() -> hasNext
    java.util.List next() -> next
    java.lang.Object next() -> next
com.google.common.collect.Iterators$7 -> com.google.common.collect.Iterators$7:
    java.util.Iterator val$unfiltered -> val$unfiltered
    com.google.common.base.Predicate val$predicate -> val$predicate
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Iterators$8 -> com.google.common.collect.Iterators$8:
    com.google.common.base.Function val$function -> val$function
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Iterators$9 -> com.google.common.collect.Iterators$9:
    int count -> count
    int val$limitSize -> val$limitSize
    java.util.Iterator val$iterator -> val$iterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$MergingIterator -> com.google.common.collect.Iterators$MergingIterator:
    java.util.Queue queue -> queue
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$MergingIterator$1 -> com.google.common.collect.Iterators$MergingIterator$1:
    java.util.Comparator val$itemComparator -> val$itemComparator
    com.google.common.collect.Iterators$MergingIterator this$0 -> this$0
    int compare(com.google.common.collect.PeekingIterator,com.google.common.collect.PeekingIterator) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.Iterators$PeekingImpl -> com.google.common.collect.Iterators$PeekingImpl:
    java.util.Iterator iterator -> iterator
    boolean hasPeeked -> hasPeeked
    java.lang.Object peekedElement -> peekedElement
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object peek() -> peek
com.google.common.collect.LexicographicalOrdering -> com.google.common.collect.LexicographicalOrdering:
    com.google.common.collect.Ordering elementOrder -> elementOrder
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Iterable,java.lang.Iterable) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.LinkedHashMultimap -> com.google.common.collect.LinkedHashMultimap:
    int DEFAULT_KEY_CAPACITY -> DEFAULT_KEY_CAPACITY
    int DEFAULT_VALUE_SET_CAPACITY -> DEFAULT_VALUE_SET_CAPACITY
    double VALUE_SET_LOAD_FACTOR -> VALUE_SET_LOAD_FACTOR
    int valueSetCapacity -> valueSetCapacity
    com.google.common.collect.LinkedHashMultimap$ValueEntry multimapHeaderEntry -> multimapHeaderEntry
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.LinkedHashMultimap create() -> create
    com.google.common.collect.LinkedHashMultimap create(int,int) -> create
    com.google.common.collect.LinkedHashMultimap create(com.google.common.collect.Multimap) -> create
    void succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> succeedsInValueSet
    void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry) -> succeedsInMultimap
    void deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> deleteFromValueSet
    void deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> deleteFromMultimap
    java.util.Set createCollection() -> createCollection
    java.util.Collection createCollection(java.lang.Object) -> createCollection
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Collection values() -> values
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator valueIterator() -> valueIterator
    void clear() -> clear
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    boolean equals(java.lang.Object) -> equals
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Map asMap() -> asMap
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    java.util.Collection createCollection() -> createCollection
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isEmpty() -> isEmpty
    void access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> access$200
    com.google.common.collect.LinkedHashMultimap$ValueEntry access$300(com.google.common.collect.LinkedHashMultimap) -> access$300
    void access$400(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry) -> access$400
    void access$500(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> access$500
    void access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> access$600
com.google.common.collect.LinkedHashMultimap$1 -> com.google.common.collect.LinkedHashMultimap$1:
    com.google.common.collect.LinkedHashMultimap$ValueEntry nextEntry -> nextEntry
    com.google.common.collect.LinkedHashMultimap$ValueEntry toRemove -> toRemove
    com.google.common.collect.LinkedHashMultimap this$0 -> this$0
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.LinkedHashMultimap$ValueEntry -> com.google.common.collect.LinkedHashMultimap$ValueEntry:
    int smearedValueHash -> smearedValueHash
    com.google.common.collect.LinkedHashMultimap$ValueEntry nextInValueBucket -> nextInValueBucket
    com.google.common.collect.LinkedHashMultimap$ValueSetLink predecessorInValueSet -> predecessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueSetLink successorInValueSet -> successorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueEntry predecessorInMultimap -> predecessorInMultimap
    com.google.common.collect.LinkedHashMultimap$ValueEntry successorInMultimap -> successorInMultimap
    boolean matchesValue(java.lang.Object,int) -> matchesValue
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> getPredecessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> getSuccessorInValueSet
    void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setPredecessorInValueSet
    void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setSuccessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueEntry getPredecessorInMultimap() -> getPredecessorInMultimap
    com.google.common.collect.LinkedHashMultimap$ValueEntry getSuccessorInMultimap() -> getSuccessorInMultimap
    void setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> setSuccessorInMultimap
    void setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> setPredecessorInMultimap
com.google.common.collect.LinkedHashMultimap$ValueSet -> com.google.common.collect.LinkedHashMultimap$ValueSet:
    java.lang.Object key -> key
    com.google.common.collect.LinkedHashMultimap$ValueEntry[] hashTable -> hashTable
    int size -> size
    int modCount -> modCount
    com.google.common.collect.LinkedHashMultimap$ValueSetLink firstEntry -> firstEntry
    com.google.common.collect.LinkedHashMultimap$ValueSetLink lastEntry -> lastEntry
    com.google.common.collect.LinkedHashMultimap this$0 -> this$0
    int mask() -> mask
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> getPredecessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> getSuccessorInValueSet
    void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setPredecessorInValueSet
    void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setSuccessorInValueSet
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    void rehashIfNecessary() -> rehashIfNecessary
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    com.google.common.collect.LinkedHashMultimap$ValueSetLink access$000(com.google.common.collect.LinkedHashMultimap$ValueSet) -> access$000
    int access$100(com.google.common.collect.LinkedHashMultimap$ValueSet) -> access$100
com.google.common.collect.LinkedHashMultimap$ValueSet$1 -> com.google.common.collect.LinkedHashMultimap$ValueSet$1:
    com.google.common.collect.LinkedHashMultimap$ValueSetLink nextEntry -> nextEntry
    com.google.common.collect.LinkedHashMultimap$ValueEntry toRemove -> toRemove
    int expectedModCount -> expectedModCount
    com.google.common.collect.LinkedHashMultimap$ValueSet this$1 -> this$1
    void checkForComodification() -> checkForComodification
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.LinkedHashMultimap$ValueSetLink -> com.google.common.collect.LinkedHashMultimap$ValueSetLink:
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> getPredecessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> getSuccessorInValueSet
    void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setPredecessorInValueSet
    void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setSuccessorInValueSet
com.google.common.collect.LinkedHashMultiset -> com.google.common.collect.LinkedHashMultiset:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.LinkedHashMultiset create() -> create
    com.google.common.collect.LinkedHashMultiset create(int) -> create
    com.google.common.collect.LinkedHashMultiset create(java.lang.Iterable) -> create
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    int setCount(java.lang.Object,int) -> setCount
    int remove(java.lang.Object,int) -> remove
    int add(java.lang.Object,int) -> add
    int count(java.lang.Object) -> count
    java.util.Iterator iterator() -> iterator
    int size() -> size
    void clear() -> clear
    java.util.Set entrySet() -> entrySet
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set elementSet() -> elementSet
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean addAll(java.util.Collection) -> addAll
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean remove(java.lang.Object) -> remove
    boolean add(java.lang.Object) -> add
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
com.google.common.collect.LinkedListMultimap -> com.google.common.collect.LinkedListMultimap:
    com.google.common.collect.LinkedListMultimap$Node head -> head
    com.google.common.collect.LinkedListMultimap$Node tail -> tail
    java.util.Map keyToKeyList -> keyToKeyList
    int size -> size
    int modCount -> modCount
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.LinkedListMultimap create() -> create
    com.google.common.collect.LinkedListMultimap create(int) -> create
    com.google.common.collect.LinkedListMultimap create(com.google.common.collect.Multimap) -> create
    com.google.common.collect.LinkedListMultimap$Node addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node) -> addNode
    void removeNode(com.google.common.collect.LinkedListMultimap$Node) -> removeNode
    void removeAllNodes(java.lang.Object) -> removeAllNodes
    void checkElement(java.lang.Object) -> checkElement
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.List getCopy(java.lang.Object) -> getCopy
    java.util.List removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.List get(java.lang.Object) -> get
    java.util.Set createKeySet() -> createKeySet
    java.util.List values() -> values
    java.util.List createValues() -> createValues
    java.util.List entries() -> entries
    java.util.List createEntries() -> createEntries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Map asMap() -> asMap
    java.util.Collection createValues() -> createValues
    java.util.Collection values() -> values
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    java.util.Collection createEntries() -> createEntries
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    int access$000(com.google.common.collect.LinkedListMultimap) -> access$000
    com.google.common.collect.LinkedListMultimap$Node access$100(com.google.common.collect.LinkedListMultimap) -> access$100
    com.google.common.collect.LinkedListMultimap$Node access$200(com.google.common.collect.LinkedListMultimap) -> access$200
    void access$300(java.lang.Object) -> access$300
    void access$400(com.google.common.collect.LinkedListMultimap,com.google.common.collect.LinkedListMultimap$Node) -> access$400
    void access$500(com.google.common.collect.LinkedListMultimap,java.lang.Object) -> access$500
    java.util.Map access$600(com.google.common.collect.LinkedListMultimap) -> access$600
    com.google.common.collect.LinkedListMultimap$Node access$700(com.google.common.collect.LinkedListMultimap,java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node) -> access$700
    int access$900(com.google.common.collect.LinkedListMultimap) -> access$900
com.google.common.collect.LinkedListMultimap$1 -> com.google.common.collect.LinkedListMultimap$1:
    java.lang.Object val$key -> val$key
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.LinkedListMultimap$2 -> com.google.common.collect.LinkedListMultimap$2:
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.LinkedListMultimap$3 -> com.google.common.collect.LinkedListMultimap$3:
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.LinkedListMultimap$3$1 -> com.google.common.collect.LinkedListMultimap$3$1:
    com.google.common.collect.LinkedListMultimap$NodeIterator val$nodeItr -> val$nodeItr
    com.google.common.collect.LinkedListMultimap$3 this$1 -> this$1
    java.lang.Object transform(java.util.Map$Entry) -> transform
    void set(java.lang.Object) -> set
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.LinkedListMultimap$4 -> com.google.common.collect.LinkedListMultimap$4:
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.LinkedListMultimap$DistinctKeyIterator -> com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:
    java.util.Set seenKeys -> seenKeys
    com.google.common.collect.LinkedListMultimap$Node next -> next
    com.google.common.collect.LinkedListMultimap$Node current -> current
    int expectedModCount -> expectedModCount
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void checkForConcurrentModification() -> checkForConcurrentModification
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.LinkedListMultimap$KeyList -> com.google.common.collect.LinkedListMultimap$KeyList:
    com.google.common.collect.LinkedListMultimap$Node head -> head
    com.google.common.collect.LinkedListMultimap$Node tail -> tail
    int count -> count
com.google.common.collect.LinkedListMultimap$Node -> com.google.common.collect.LinkedListMultimap$Node:
    java.lang.Object key -> key
    java.lang.Object value -> value
    com.google.common.collect.LinkedListMultimap$Node next -> next
    com.google.common.collect.LinkedListMultimap$Node previous -> previous
    com.google.common.collect.LinkedListMultimap$Node nextSibling -> nextSibling
    com.google.common.collect.LinkedListMultimap$Node previousSibling -> previousSibling
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.LinkedListMultimap$NodeIterator -> com.google.common.collect.LinkedListMultimap$NodeIterator:
    int nextIndex -> nextIndex
    com.google.common.collect.LinkedListMultimap$Node next -> next
    com.google.common.collect.LinkedListMultimap$Node current -> current
    com.google.common.collect.LinkedListMultimap$Node previous -> previous
    int expectedModCount -> expectedModCount
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void checkForConcurrentModification() -> checkForConcurrentModification
    boolean hasNext() -> hasNext
    com.google.common.collect.LinkedListMultimap$Node next() -> next
    void remove() -> remove
    boolean hasPrevious() -> hasPrevious
    com.google.common.collect.LinkedListMultimap$Node previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.util.Map$Entry) -> set
    void add(java.util.Map$Entry) -> add
    void setValue(java.lang.Object) -> setValue
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
com.google.common.collect.LinkedListMultimap$ValueForKeyIterator -> com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:
    java.lang.Object key -> key
    int nextIndex -> nextIndex
    com.google.common.collect.LinkedListMultimap$Node next -> next
    com.google.common.collect.LinkedListMultimap$Node current -> current
    com.google.common.collect.LinkedListMultimap$Node previous -> previous
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.ListMultimap -> com.google.common.collect.ListMultimap:
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.Lists -> com.google.common.collect.Lists:
    java.util.ArrayList newArrayList() -> newArrayList
    java.util.ArrayList newArrayList(java.lang.Object[]) -> newArrayList
    int computeArrayListCapacity(int) -> computeArrayListCapacity
    java.util.ArrayList newArrayList(java.lang.Iterable) -> newArrayList
    java.util.ArrayList newArrayList(java.util.Iterator) -> newArrayList
    java.util.ArrayList newArrayListWithCapacity(int) -> newArrayListWithCapacity
    java.util.ArrayList newArrayListWithExpectedSize(int) -> newArrayListWithExpectedSize
    java.util.LinkedList newLinkedList() -> newLinkedList
    java.util.LinkedList newLinkedList(java.lang.Iterable) -> newLinkedList
    java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList() -> newCopyOnWriteArrayList
    java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList(java.lang.Iterable) -> newCopyOnWriteArrayList
    java.util.List asList(java.lang.Object,java.lang.Object[]) -> asList
    java.util.List asList(java.lang.Object,java.lang.Object,java.lang.Object[]) -> asList
    java.util.List cartesianProduct(java.util.List) -> cartesianProduct
    java.util.List cartesianProduct(java.util.List[]) -> cartesianProduct
    java.util.List transform(java.util.List,com.google.common.base.Function) -> transform
    java.util.List partition(java.util.List,int) -> partition
    com.google.common.collect.ImmutableList charactersOf(java.lang.String) -> charactersOf
    java.util.List charactersOf(java.lang.CharSequence) -> charactersOf
    java.util.List reverse(java.util.List) -> reverse
    int hashCodeImpl(java.util.List) -> hashCodeImpl
    boolean equalsImpl(java.util.List,java.lang.Object) -> equalsImpl
    boolean addAllImpl(java.util.List,int,java.lang.Iterable) -> addAllImpl
    int indexOfImpl(java.util.List,java.lang.Object) -> indexOfImpl
    int lastIndexOfImpl(java.util.List,java.lang.Object) -> lastIndexOfImpl
    java.util.ListIterator listIteratorImpl(java.util.List,int) -> listIteratorImpl
    java.util.List subListImpl(java.util.List,int,int) -> subListImpl
    java.util.List cast(java.lang.Iterable) -> cast
com.google.common.collect.Lists$1 -> com.google.common.collect.Lists$1:
    long serialVersionUID -> serialVersionUID
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$2 -> com.google.common.collect.Lists$2:
    long serialVersionUID -> serialVersionUID
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$AbstractListWrapper -> com.google.common.collect.Lists$AbstractListWrapper:
    java.util.List backingList -> backingList
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    boolean contains(java.lang.Object) -> contains
    int size() -> size
com.google.common.collect.Lists$CharSequenceAsList -> com.google.common.collect.Lists$CharSequenceAsList:
    java.lang.CharSequence sequence -> sequence
    java.lang.Character get(int) -> get
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$OnePlusArrayList -> com.google.common.collect.Lists$OnePlusArrayList:
    java.lang.Object first -> first
    java.lang.Object[] rest -> rest
    long serialVersionUID -> serialVersionUID
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$Partition -> com.google.common.collect.Lists$Partition:
    java.util.List list -> list
    int size -> size
    java.util.List get(int) -> get
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$RandomAccessListWrapper -> com.google.common.collect.Lists$RandomAccessListWrapper:
com.google.common.collect.Lists$RandomAccessPartition -> com.google.common.collect.Lists$RandomAccessPartition:
com.google.common.collect.Lists$RandomAccessReverseList -> com.google.common.collect.Lists$RandomAccessReverseList:
com.google.common.collect.Lists$ReverseList -> com.google.common.collect.Lists$ReverseList:
    java.util.List forwardList -> forwardList
    java.util.List getForwardList() -> getForwardList
    int reverseIndex(int) -> reverseIndex
    int reversePosition(int) -> reversePosition
    void add(int,java.lang.Object) -> add
    void clear() -> clear
    java.lang.Object remove(int) -> remove
    void removeRange(int,int) -> removeRange
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    int size() -> size
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator(int) -> listIterator
    int access$000(com.google.common.collect.Lists$ReverseList,int) -> access$000
com.google.common.collect.Lists$ReverseList$1 -> com.google.common.collect.Lists$ReverseList$1:
    boolean canRemoveOrSet -> canRemoveOrSet
    java.util.ListIterator val$forwardIterator -> val$forwardIterator
    com.google.common.collect.Lists$ReverseList this$0 -> this$0
    void add(java.lang.Object) -> add
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.Object) -> set
com.google.common.collect.Lists$StringAsImmutableList -> com.google.common.collect.Lists$StringAsImmutableList:
    java.lang.String string -> string
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    boolean isPartialView() -> isPartialView
    java.lang.Character get(int) -> get
    int size() -> size
    java.util.List subList(int,int) -> subList
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$TransformingRandomAccessList -> com.google.common.collect.Lists$TransformingRandomAccessList:
    java.util.List fromList -> fromList
    com.google.common.base.Function function -> function
    long serialVersionUID -> serialVersionUID
    void clear() -> clear
    java.lang.Object get(int) -> get
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator(int) -> listIterator
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(int) -> remove
    int size() -> size
com.google.common.collect.Lists$TransformingRandomAccessList$1 -> com.google.common.collect.Lists$TransformingRandomAccessList$1:
    com.google.common.collect.Lists$TransformingRandomAccessList this$0 -> this$0
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Lists$TransformingSequentialList -> com.google.common.collect.Lists$TransformingSequentialList:
    java.util.List fromList -> fromList
    com.google.common.base.Function function -> function
    long serialVersionUID -> serialVersionUID
    void clear() -> clear
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$TransformingSequentialList$1 -> com.google.common.collect.Lists$TransformingSequentialList$1:
    com.google.common.collect.Lists$TransformingSequentialList this$0 -> this$0
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Lists$TwoPlusArrayList -> com.google.common.collect.Lists$TwoPlusArrayList:
    java.lang.Object first -> first
    java.lang.Object second -> second
    java.lang.Object[] rest -> rest
    long serialVersionUID -> serialVersionUID
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.MapConstraint -> com.google.common.collect.MapConstraint:
    void checkKeyValue(java.lang.Object,java.lang.Object) -> checkKeyValue
    java.lang.String toString() -> toString
com.google.common.collect.MapConstraints -> com.google.common.collect.MapConstraints:
    com.google.common.collect.MapConstraint notNull() -> notNull
    java.util.Map constrainedMap(java.util.Map,com.google.common.collect.MapConstraint) -> constrainedMap
    com.google.common.collect.Multimap constrainedMultimap(com.google.common.collect.Multimap,com.google.common.collect.MapConstraint) -> constrainedMultimap
    com.google.common.collect.ListMultimap constrainedListMultimap(com.google.common.collect.ListMultimap,com.google.common.collect.MapConstraint) -> constrainedListMultimap
    com.google.common.collect.SetMultimap constrainedSetMultimap(com.google.common.collect.SetMultimap,com.google.common.collect.MapConstraint) -> constrainedSetMultimap
    com.google.common.collect.SortedSetMultimap constrainedSortedSetMultimap(com.google.common.collect.SortedSetMultimap,com.google.common.collect.MapConstraint) -> constrainedSortedSetMultimap
    java.util.Map$Entry constrainedEntry(java.util.Map$Entry,com.google.common.collect.MapConstraint) -> constrainedEntry
    java.util.Map$Entry constrainedAsMapEntry(java.util.Map$Entry,com.google.common.collect.MapConstraint) -> constrainedAsMapEntry
    java.util.Set constrainedAsMapEntries(java.util.Set,com.google.common.collect.MapConstraint) -> constrainedAsMapEntries
    java.util.Collection constrainedEntries(java.util.Collection,com.google.common.collect.MapConstraint) -> constrainedEntries
    java.util.Set constrainedEntrySet(java.util.Set,com.google.common.collect.MapConstraint) -> constrainedEntrySet
    com.google.common.collect.BiMap constrainedBiMap(com.google.common.collect.BiMap,com.google.common.collect.MapConstraint) -> constrainedBiMap
    java.util.Collection checkValues(java.lang.Object,java.lang.Iterable,com.google.common.collect.MapConstraint) -> checkValues
    java.util.Map checkMap(java.util.Map,com.google.common.collect.MapConstraint) -> checkMap
    java.util.Set access$000(java.util.Set,com.google.common.collect.MapConstraint) -> access$000
    java.util.Map access$100(java.util.Map,com.google.common.collect.MapConstraint) -> access$100
    java.util.Set access$200(java.util.Set,com.google.common.collect.MapConstraint) -> access$200
    java.util.Collection access$300(java.util.Collection,com.google.common.collect.MapConstraint) -> access$300
    java.util.Collection access$400(java.lang.Object,java.lang.Iterable,com.google.common.collect.MapConstraint) -> access$400
    java.util.Map$Entry access$500(java.util.Map$Entry,com.google.common.collect.MapConstraint) -> access$500
    java.util.Map$Entry access$700(java.util.Map$Entry,com.google.common.collect.MapConstraint) -> access$700
com.google.common.collect.MapConstraints$1 -> com.google.common.collect.MapConstraints$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.MapConstraint val$constraint -> val$constraint
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$2 -> com.google.common.collect.MapConstraints$2:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.MapConstraint val$constraint -> val$constraint
    java.util.Map$Entry delegate() -> delegate
    java.util.Collection getValue() -> getValue
    java.lang.Object getValue() -> getValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$2$1 -> com.google.common.collect.MapConstraints$2$1:
    com.google.common.collect.MapConstraints$2 this$0 -> this$0
    java.lang.Object checkElement(java.lang.Object) -> checkElement
com.google.common.collect.MapConstraints$ConstrainedAsMapEntries -> com.google.common.collect.MapConstraints$ConstrainedAsMapEntries:
    com.google.common.collect.MapConstraint constraint -> constraint
    java.util.Set entries -> entries
    java.util.Set delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    com.google.common.collect.MapConstraint access$600(com.google.common.collect.MapConstraints$ConstrainedAsMapEntries) -> access$600
com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1 -> com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.MapConstraints$ConstrainedAsMapEntries this$0 -> this$0
    java.util.Map$Entry next() -> next
    java.util.Iterator delegate() -> delegate
    java.lang.Object next() -> next
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$ConstrainedAsMapValues -> com.google.common.collect.MapConstraints$ConstrainedAsMapValues:
    java.util.Collection delegate -> delegate
    java.util.Set entrySet -> entrySet
    java.util.Collection delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1 -> com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.MapConstraints$ConstrainedAsMapValues this$0 -> this$0
    boolean hasNext() -> hasNext
    java.util.Collection next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.MapConstraints$ConstrainedBiMap -> com.google.common.collect.MapConstraints$ConstrainedBiMap:
    com.google.common.collect.BiMap inverse -> inverse
    com.google.common.collect.BiMap delegate() -> delegate
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
    java.util.Map delegate() -> delegate
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$ConstrainedEntries -> com.google.common.collect.MapConstraints$ConstrainedEntries:
    com.google.common.collect.MapConstraint constraint -> constraint
    java.util.Collection entries -> entries
    java.util.Collection delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$ConstrainedEntries$1 -> com.google.common.collect.MapConstraints$ConstrainedEntries$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.MapConstraints$ConstrainedEntries this$0 -> this$0
    java.util.Map$Entry next() -> next
    java.util.Iterator delegate() -> delegate
    java.lang.Object next() -> next
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$ConstrainedEntrySet -> com.google.common.collect.MapConstraints$ConstrainedEntrySet:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapConstraints$ConstrainedListMultimap -> com.google.common.collect.MapConstraints$ConstrainedListMultimap:
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
com.google.common.collect.MapConstraints$ConstrainedMap -> com.google.common.collect.MapConstraints$ConstrainedMap:
    java.util.Map delegate -> delegate
    com.google.common.collect.MapConstraint constraint -> constraint
    java.util.Set entrySet -> entrySet
    java.util.Map delegate() -> delegate
    java.util.Set entrySet() -> entrySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$ConstrainedMultimap -> com.google.common.collect.MapConstraints$ConstrainedMultimap:
    com.google.common.collect.MapConstraint constraint -> constraint
    com.google.common.collect.Multimap delegate -> delegate
    java.util.Collection entries -> entries
    java.util.Map asMap -> asMap
    com.google.common.collect.Multimap delegate() -> delegate
    java.util.Map asMap() -> asMap
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$ConstrainedMultimap$1 -> com.google.common.collect.MapConstraints$ConstrainedMultimap$1:
    java.util.Set entrySet -> entrySet
    java.util.Collection values -> values
    java.util.Map val$asMapDelegate -> val$asMapDelegate
    com.google.common.collect.MapConstraints$ConstrainedMultimap this$0 -> this$0
    java.util.Map delegate() -> delegate
    java.util.Set entrySet() -> entrySet
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection values() -> values
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapConstraints$ConstrainedMultimap$2 -> com.google.common.collect.MapConstraints$ConstrainedMultimap$2:
    java.lang.Object val$key -> val$key
    com.google.common.collect.MapConstraints$ConstrainedMultimap this$0 -> this$0
    java.lang.Object checkElement(java.lang.Object) -> checkElement
com.google.common.collect.MapConstraints$ConstrainedSetMultimap -> com.google.common.collect.MapConstraints$ConstrainedSetMultimap:
    java.util.Set get(java.lang.Object) -> get
    java.util.Set entries() -> entries
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    java.util.Collection removeAll(java.lang.Object) -> removeAll
com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap -> com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap:
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.MapConstraints$InverseConstraint -> com.google.common.collect.MapConstraints$InverseConstraint:
    com.google.common.collect.MapConstraint constraint -> constraint
    void checkKeyValue(java.lang.Object,java.lang.Object) -> checkKeyValue
com.google.common.collect.MapConstraints$NotNullMapConstraint -> com.google.common.collect.MapConstraints$NotNullMapConstraint:
    com.google.common.collect.MapConstraints$NotNullMapConstraint INSTANCE -> INSTANCE
    com.google.common.collect.MapConstraints$NotNullMapConstraint[] $VALUES -> $VALUES
    com.google.common.collect.MapConstraints$NotNullMapConstraint[] values() -> values
    com.google.common.collect.MapConstraints$NotNullMapConstraint valueOf(java.lang.String) -> valueOf
    void checkKeyValue(java.lang.Object,java.lang.Object) -> checkKeyValue
    java.lang.String toString() -> toString
com.google.common.collect.MapDifference -> com.google.common.collect.MapDifference:
    boolean areEqual() -> areEqual
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesDiffering() -> entriesDiffering
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapDifference$ValueDifference -> com.google.common.collect.MapDifference$ValueDifference:
    java.lang.Object leftValue() -> leftValue
    java.lang.Object rightValue() -> rightValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapMaker -> com.google.common.collect.MapMaker:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int DEFAULT_EXPIRATION_NANOS -> DEFAULT_EXPIRATION_NANOS
    int UNSET_INT -> UNSET_INT
    boolean useCustomMap -> useCustomMap
    int initialCapacity -> initialCapacity
    int concurrencyLevel -> concurrencyLevel
    int maximumSize -> maximumSize
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> valueStrength
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long expireAfterAccessNanos -> expireAfterAccessNanos
    com.google.common.collect.MapMaker$RemovalCause nullRemovalCause -> nullRemovalCause
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.collect.MapMaker keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
    com.google.common.base.Equivalence getKeyEquivalence() -> getKeyEquivalence
    com.google.common.collect.MapMaker initialCapacity(int) -> initialCapacity
    int getInitialCapacity() -> getInitialCapacity
    com.google.common.collect.MapMaker maximumSize(int) -> maximumSize
    com.google.common.collect.MapMaker concurrencyLevel(int) -> concurrencyLevel
    int getConcurrencyLevel() -> getConcurrencyLevel
    com.google.common.collect.MapMaker weakKeys() -> weakKeys
    com.google.common.collect.MapMaker setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength) -> setKeyStrength
    com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength() -> getKeyStrength
    com.google.common.collect.MapMaker weakValues() -> weakValues
    com.google.common.collect.MapMaker softValues() -> softValues
    com.google.common.collect.MapMaker setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength) -> setValueStrength
    com.google.common.collect.MapMakerInternalMap$Strength getValueStrength() -> getValueStrength
    com.google.common.collect.MapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    void checkExpiration(long,java.util.concurrent.TimeUnit) -> checkExpiration
    long getExpireAfterWriteNanos() -> getExpireAfterWriteNanos
    com.google.common.collect.MapMaker expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    long getExpireAfterAccessNanos() -> getExpireAfterAccessNanos
    com.google.common.base.Ticker getTicker() -> getTicker
    com.google.common.collect.GenericMapMaker removalListener(com.google.common.collect.MapMaker$RemovalListener) -> removalListener
    java.util.concurrent.ConcurrentMap makeMap() -> makeMap
    com.google.common.collect.MapMakerInternalMap makeCustomMap() -> makeCustomMap
    java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function) -> makeComputingMap
    java.lang.String toString() -> toString
    com.google.common.collect.GenericMapMaker expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    com.google.common.collect.GenericMapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    com.google.common.collect.GenericMapMaker softValues() -> softValues
    com.google.common.collect.GenericMapMaker weakValues() -> weakValues
    com.google.common.collect.GenericMapMaker weakKeys() -> weakKeys
    com.google.common.collect.GenericMapMaker concurrencyLevel(int) -> concurrencyLevel
    com.google.common.collect.GenericMapMaker maximumSize(int) -> maximumSize
    com.google.common.collect.GenericMapMaker initialCapacity(int) -> initialCapacity
    com.google.common.collect.GenericMapMaker keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
com.google.common.collect.MapMaker$1 -> com.google.common.collect.MapMaker$1:
com.google.common.collect.MapMaker$ComputingMapAdapter -> com.google.common.collect.MapMaker$ComputingMapAdapter:
    long serialVersionUID -> serialVersionUID
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.MapMaker$NullComputingConcurrentMap -> com.google.common.collect.MapMaker$NullComputingConcurrentMap:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Function computingFunction -> computingFunction
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object compute(java.lang.Object) -> compute
com.google.common.collect.MapMaker$NullConcurrentMap -> com.google.common.collect.MapMaker$NullConcurrentMap:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMaker$RemovalListener removalListener -> removalListener
    com.google.common.collect.MapMaker$RemovalCause removalCause -> removalCause
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    void notifyRemoval(java.lang.Object,java.lang.Object) -> notifyRemoval
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.util.Set entrySet() -> entrySet
com.google.common.collect.MapMaker$RemovalCause -> com.google.common.collect.MapMaker$RemovalCause:
    com.google.common.collect.MapMaker$RemovalCause EXPLICIT -> EXPLICIT
    com.google.common.collect.MapMaker$RemovalCause REPLACED -> REPLACED
    com.google.common.collect.MapMaker$RemovalCause COLLECTED -> COLLECTED
    com.google.common.collect.MapMaker$RemovalCause EXPIRED -> EXPIRED
    com.google.common.collect.MapMaker$RemovalCause SIZE -> SIZE
    com.google.common.collect.MapMaker$RemovalCause[] $VALUES -> $VALUES
    com.google.common.collect.MapMaker$RemovalCause[] values() -> values
    com.google.common.collect.MapMaker$RemovalCause valueOf(java.lang.String) -> valueOf
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$1 -> com.google.common.collect.MapMaker$RemovalCause$1:
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$2 -> com.google.common.collect.MapMaker$RemovalCause$2:
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$3 -> com.google.common.collect.MapMaker$RemovalCause$3:
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$4 -> com.google.common.collect.MapMaker$RemovalCause$4:
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalCause$5 -> com.google.common.collect.MapMaker$RemovalCause$5:
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMaker$RemovalListener -> com.google.common.collect.MapMaker$RemovalListener:
    void onRemoval(com.google.common.collect.MapMaker$RemovalNotification) -> onRemoval
com.google.common.collect.MapMaker$RemovalNotification -> com.google.common.collect.MapMaker$RemovalNotification:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMaker$RemovalCause cause -> cause
    com.google.common.collect.MapMaker$RemovalCause getCause() -> getCause
    boolean wasEvicted() -> wasEvicted
com.google.common.collect.MapMakerInternalMap -> com.google.common.collect.MapMakerInternalMap:
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int CONTAINS_VALUE_RETRIES -> CONTAINS_VALUE_RETRIES
    int DRAIN_THRESHOLD -> DRAIN_THRESHOLD
    int DRAIN_MAX -> DRAIN_MAX
    long CLEANUP_EXECUTOR_DELAY_SECS -> CLEANUP_EXECUTOR_DELAY_SECS
    java.util.logging.Logger logger -> logger
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    com.google.common.collect.MapMakerInternalMap$Segment[] segments -> segments
    int concurrencyLevel -> concurrencyLevel
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> valueStrength
    int maximumSize -> maximumSize
    long expireAfterAccessNanos -> expireAfterAccessNanos
    long expireAfterWriteNanos -> expireAfterWriteNanos
    java.util.Queue removalNotificationQueue -> removalNotificationQueue
    com.google.common.collect.MapMaker$RemovalListener removalListener -> removalListener
    com.google.common.collect.MapMakerInternalMap$EntryFactory entryFactory -> entryFactory
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.collect.MapMakerInternalMap$ValueReference UNSET -> UNSET
    java.util.Queue DISCARDING_QUEUE -> DISCARDING_QUEUE
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    boolean evictsBySize() -> evictsBySize
    boolean expires() -> expires
    boolean expiresAfterWrite() -> expiresAfterWrite
    boolean expiresAfterAccess() -> expiresAfterAccess
    boolean usesKeyReferences() -> usesKeyReferences
    boolean usesValueReferences() -> usesValueReferences
    com.google.common.collect.MapMakerInternalMap$ValueReference unset() -> unset
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nullEntry() -> nullEntry
    java.util.Queue discardingQueue() -> discardingQueue
    int rehash(int) -> rehash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference newValueReference(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> newValueReference
    int hash(java.lang.Object) -> hash
    void reclaimValue(com.google.common.collect.MapMakerInternalMap$ValueReference) -> reclaimValue
    void reclaimKey(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> reclaimKey
    boolean isLive(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> isLive
    com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int) -> segmentFor
    com.google.common.collect.MapMakerInternalMap$Segment createSegment(int,int) -> createSegment
    java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> getLiveValue
    boolean isExpired(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> isExpired
    boolean isExpired(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,long) -> isExpired
    void connectExpirables(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> connectExpirables
    void nullifyExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> nullifyExpirable
    void processPendingNotifications() -> processPendingNotifications
    void connectEvictables(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> connectEvictables
    void nullifyEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> nullifyEvictable
    com.google.common.collect.MapMakerInternalMap$Segment[] newSegmentArray(int) -> newSegmentArray
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(java.lang.Object) -> getEntry
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.MapMakerInternalMap$1 -> com.google.common.collect.MapMakerInternalMap$1:
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
com.google.common.collect.MapMakerInternalMap$2 -> com.google.common.collect.MapMakerInternalMap$2:
    boolean offer(java.lang.Object) -> offer
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    int size() -> size
    java.util.Iterator iterator() -> iterator
com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry -> com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry:
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy -> com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> valueStrength
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long expireAfterAccessNanos -> expireAfterAccessNanos
    int maximumSize -> maximumSize
    int concurrencyLevel -> concurrencyLevel
    com.google.common.collect.MapMaker$RemovalListener removalListener -> removalListener
    java.util.concurrent.ConcurrentMap delegate -> delegate
    java.util.concurrent.ConcurrentMap delegate() -> delegate
    void writeMapTo(java.io.ObjectOutputStream) -> writeMapTo
    com.google.common.collect.MapMaker readMapMaker(java.io.ObjectInputStream) -> readMapMaker
    void readEntries(java.io.ObjectInputStream) -> readEntries
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapMakerInternalMap$CleanupMapTask -> com.google.common.collect.MapMakerInternalMap$CleanupMapTask:
    java.lang.ref.WeakReference mapReference -> mapReference
    void run() -> run
com.google.common.collect.MapMakerInternalMap$EntryFactory -> com.google.common.collect.MapMakerInternalMap$EntryFactory:
    com.google.common.collect.MapMakerInternalMap$EntryFactory STRONG -> STRONG
    com.google.common.collect.MapMakerInternalMap$EntryFactory STRONG_EXPIRABLE -> STRONG_EXPIRABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory STRONG_EVICTABLE -> STRONG_EVICTABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory STRONG_EXPIRABLE_EVICTABLE -> STRONG_EXPIRABLE_EVICTABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory WEAK -> WEAK
    com.google.common.collect.MapMakerInternalMap$EntryFactory WEAK_EXPIRABLE -> WEAK_EXPIRABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory WEAK_EVICTABLE -> WEAK_EVICTABLE
    com.google.common.collect.MapMakerInternalMap$EntryFactory WEAK_EXPIRABLE_EVICTABLE -> WEAK_EXPIRABLE_EVICTABLE
    int EXPIRABLE_MASK -> EXPIRABLE_MASK
    int EVICTABLE_MASK -> EVICTABLE_MASK
    com.google.common.collect.MapMakerInternalMap$EntryFactory[][] factories -> factories
    com.google.common.collect.MapMakerInternalMap$EntryFactory[] $VALUES -> $VALUES
    com.google.common.collect.MapMakerInternalMap$EntryFactory[] values() -> values
    com.google.common.collect.MapMakerInternalMap$EntryFactory valueOf(java.lang.String) -> valueOf
    com.google.common.collect.MapMakerInternalMap$EntryFactory getFactory(com.google.common.collect.MapMakerInternalMap$Strength,boolean,boolean) -> getFactory
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
    void copyExpirableEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyExpirableEntry
    void copyEvictableEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEvictableEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$1 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$1:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$2 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$2:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$3 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$3:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$4 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$4:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$5 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$5:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$6 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$6:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$7 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$7:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryFactory$8 -> com.google.common.collect.MapMakerInternalMap$EntryFactory$8:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
com.google.common.collect.MapMakerInternalMap$EntryIterator -> com.google.common.collect.MapMakerInternalMap$EntryIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$EntrySet -> com.google.common.collect.MapMakerInternalMap$EntrySet:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$EvictionQueue -> com.google.common.collect.MapMakerInternalMap$EvictionQueue:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry head -> head
    boolean offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> offer
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry peek() -> peek
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry poll() -> poll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
com.google.common.collect.MapMakerInternalMap$EvictionQueue$1 -> com.google.common.collect.MapMakerInternalMap$EvictionQueue$1:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    com.google.common.collect.MapMakerInternalMap$EvictionQueue this$0 -> this$0
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$EvictionQueue$2 -> com.google.common.collect.MapMakerInternalMap$EvictionQueue$2:
    com.google.common.collect.MapMakerInternalMap$EvictionQueue this$0 -> this$0
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry computeNext(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.MapMakerInternalMap$ExpirationQueue -> com.google.common.collect.MapMakerInternalMap$ExpirationQueue:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry head -> head
    boolean offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> offer
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry peek() -> peek
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry poll() -> poll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1 -> com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    com.google.common.collect.MapMakerInternalMap$ExpirationQueue this$0 -> this$0
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
com.google.common.collect.MapMakerInternalMap$ExpirationQueue$2 -> com.google.common.collect.MapMakerInternalMap$ExpirationQueue$2:
    com.google.common.collect.MapMakerInternalMap$ExpirationQueue this$0 -> this$0
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry computeNext(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.MapMakerInternalMap$HashIterator -> com.google.common.collect.MapMakerInternalMap$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    com.google.common.collect.MapMakerInternalMap$Segment currentSegment -> currentSegment
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> currentTable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEntry -> nextEntry
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextExternal -> nextExternal
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry lastReturned -> lastReturned
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    java.lang.Object next() -> next
    void advance() -> advance
    boolean nextInChain() -> nextInChain
    boolean nextInTable() -> nextInTable
    boolean advanceTo(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> advanceTo
    boolean hasNext() -> hasNext
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry() -> nextEntry
    void remove() -> remove
com.google.common.collect.MapMakerInternalMap$KeyIterator -> com.google.common.collect.MapMakerInternalMap$KeyIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$KeySet -> com.google.common.collect.MapMakerInternalMap$KeySet:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$NullEntry -> com.google.common.collect.MapMakerInternalMap$NullEntry:
    com.google.common.collect.MapMakerInternalMap$NullEntry INSTANCE -> INSTANCE
    com.google.common.collect.MapMakerInternalMap$NullEntry[] $VALUES -> $VALUES
    com.google.common.collect.MapMakerInternalMap$NullEntry[] values() -> values
    com.google.common.collect.MapMakerInternalMap$NullEntry valueOf(java.lang.String) -> valueOf
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$ReferenceEntry -> com.google.common.collect.MapMakerInternalMap$ReferenceEntry:
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$Segment -> com.google.common.collect.MapMakerInternalMap$Segment:
    com.google.common.collect.MapMakerInternalMap map -> map
    int count -> count
    int modCount -> modCount
    int threshold -> threshold
    java.util.concurrent.atomic.AtomicReferenceArray table -> table
    int maxSegmentSize -> maxSegmentSize
    java.lang.ref.ReferenceQueue keyReferenceQueue -> keyReferenceQueue
    java.lang.ref.ReferenceQueue valueReferenceQueue -> valueReferenceQueue
    java.util.Queue recencyQueue -> recencyQueue
    java.util.concurrent.atomic.AtomicInteger readCount -> readCount
    java.util.Queue evictionQueue -> evictionQueue
    java.util.Queue expirationQueue -> expirationQueue
    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> newEntryArray
    void initTable(java.util.concurrent.atomic.AtomicReferenceArray) -> initTable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry newEntry(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyEntry
    void setValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> setValue
    void tryDrainReferenceQueues() -> tryDrainReferenceQueues
    void drainReferenceQueues() -> drainReferenceQueues
    void drainKeyReferenceQueue() -> drainKeyReferenceQueue
    void drainValueReferenceQueue() -> drainValueReferenceQueue
    void clearReferenceQueues() -> clearReferenceQueues
    void clearKeyReferenceQueue() -> clearKeyReferenceQueue
    void clearValueReferenceQueue() -> clearValueReferenceQueue
    void recordRead(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> recordRead
    void recordLockedRead(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> recordLockedRead
    void recordWrite(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> recordWrite
    void drainRecencyQueue() -> drainRecencyQueue
    void recordExpirationTime(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,long) -> recordExpirationTime
    void tryExpireEntries() -> tryExpireEntries
    void expireEntries() -> expireEntries
    void enqueueNotification(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMaker$RemovalCause) -> enqueueNotification
    void enqueueNotification(java.lang.Object,int,java.lang.Object,com.google.common.collect.MapMaker$RemovalCause) -> enqueueNotification
    boolean evictEntries() -> evictEntries
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getFirst(int) -> getFirst
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(java.lang.Object,int) -> getEntry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getLiveEntry(java.lang.Object,int) -> getLiveEntry
    java.lang.Object get(java.lang.Object,int) -> get
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    void expand() -> expand
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object remove(java.lang.Object,int) -> remove
    boolean remove(java.lang.Object,int,java.lang.Object) -> remove
    void clear() -> clear
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> removeFromChain
    void removeCollectedEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> removeCollectedEntry
    boolean reclaimKey(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,int) -> reclaimKey
    boolean reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ValueReference) -> reclaimValue
    boolean clearValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$ValueReference) -> clearValue
    boolean removeEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,int,com.google.common.collect.MapMaker$RemovalCause) -> removeEntry
    boolean isCollected(com.google.common.collect.MapMakerInternalMap$ValueReference) -> isCollected
    java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> getLiveValue
    void postReadCleanup() -> postReadCleanup
    void preWriteCleanup() -> preWriteCleanup
    void postWriteCleanup() -> postWriteCleanup
    void runCleanup() -> runCleanup
    void runLockedCleanup() -> runLockedCleanup
    void runUnlockedCleanup() -> runUnlockedCleanup
com.google.common.collect.MapMakerInternalMap$SerializationProxy -> com.google.common.collect.MapMakerInternalMap$SerializationProxy:
    long serialVersionUID -> serialVersionUID
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.MapMakerInternalMap$SoftEntry -> com.google.common.collect.MapMakerInternalMap$SoftEntry:
    int hash -> hash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry next -> next
    com.google.common.collect.MapMakerInternalMap$ValueReference valueReference -> valueReference
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry -> com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry -> com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry -> com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$SoftValueReference -> com.google.common.collect.MapMakerInternalMap$SoftValueReference:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry entry -> entry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
com.google.common.collect.MapMakerInternalMap$Strength -> com.google.common.collect.MapMakerInternalMap$Strength:
    com.google.common.collect.MapMakerInternalMap$Strength STRONG -> STRONG
    com.google.common.collect.MapMakerInternalMap$Strength SOFT -> SOFT
    com.google.common.collect.MapMakerInternalMap$Strength WEAK -> WEAK
    com.google.common.collect.MapMakerInternalMap$Strength[] $VALUES -> $VALUES
    com.google.common.collect.MapMakerInternalMap$Strength[] values() -> values
    com.google.common.collect.MapMakerInternalMap$Strength valueOf(java.lang.String) -> valueOf
    com.google.common.collect.MapMakerInternalMap$ValueReference referenceValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$Strength$1 -> com.google.common.collect.MapMakerInternalMap$Strength$1:
    com.google.common.collect.MapMakerInternalMap$ValueReference referenceValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$Strength$2 -> com.google.common.collect.MapMakerInternalMap$Strength$2:
    com.google.common.collect.MapMakerInternalMap$ValueReference referenceValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$Strength$3 -> com.google.common.collect.MapMakerInternalMap$Strength$3:
    com.google.common.collect.MapMakerInternalMap$ValueReference referenceValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,java.lang.Object) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$StrongEntry -> com.google.common.collect.MapMakerInternalMap$StrongEntry:
    java.lang.Object key -> key
    int hash -> hash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry next -> next
    com.google.common.collect.MapMakerInternalMap$ValueReference valueReference -> valueReference
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry -> com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry -> com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry -> com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$StrongValueReference -> com.google.common.collect.MapMakerInternalMap$StrongValueReference:
    java.lang.Object referent -> referent
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
com.google.common.collect.MapMakerInternalMap$ValueIterator -> com.google.common.collect.MapMakerInternalMap$ValueIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$ValueReference -> com.google.common.collect.MapMakerInternalMap$ValueReference:
    java.lang.Object get() -> get
    java.lang.Object waitForValue() -> waitForValue
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
    boolean isComputingReference() -> isComputingReference
com.google.common.collect.MapMakerInternalMap$Values -> com.google.common.collect.MapMakerInternalMap$Values:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$WeakEntry -> com.google.common.collect.MapMakerInternalMap$WeakEntry:
    int hash -> hash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry next -> next
    com.google.common.collect.MapMakerInternalMap$ValueReference valueReference -> valueReference
    java.lang.Object getKey() -> getKey
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
    com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext() -> getNext
com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry -> com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry -> com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry -> com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry:
    long time -> time
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextExpirable -> nextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousExpirable -> previousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry nextEvictable -> nextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry previousEvictable -> previousEvictable
    long getExpirationTime() -> getExpirationTime
    void setExpirationTime(long) -> setExpirationTime
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable() -> getNextExpirable
    void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable() -> getPreviousExpirable
    void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousExpirable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable() -> getNextEvictable
    void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setNextEvictable
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable() -> getPreviousEvictable
    void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> setPreviousEvictable
com.google.common.collect.MapMakerInternalMap$WeakValueReference -> com.google.common.collect.MapMakerInternalMap$WeakValueReference:
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry entry -> entry
    com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry() -> getEntry
    void clear(com.google.common.collect.MapMakerInternalMap$ValueReference) -> clear
    com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$ReferenceEntry) -> copyFor
    boolean isComputingReference() -> isComputingReference
    java.lang.Object waitForValue() -> waitForValue
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry -> com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.Maps -> com.google.common.collect.Maps:
    com.google.common.base.Joiner$MapJoiner STANDARD_JOINER -> STANDARD_JOINER
    com.google.common.base.Function keyFunction() -> keyFunction
    com.google.common.base.Function valueFunction() -> valueFunction
    java.util.Iterator keyIterator(java.util.Iterator) -> keyIterator
    java.util.Iterator valueIterator(java.util.Iterator) -> valueIterator
    com.google.common.collect.UnmodifiableIterator valueIterator(com.google.common.collect.UnmodifiableIterator) -> valueIterator
    com.google.common.collect.ImmutableMap immutableEnumMap(java.util.Map) -> immutableEnumMap
    java.util.HashMap newHashMap() -> newHashMap
    java.util.HashMap newHashMapWithExpectedSize(int) -> newHashMapWithExpectedSize
    int capacity(int) -> capacity
    java.util.HashMap newHashMap(java.util.Map) -> newHashMap
    java.util.LinkedHashMap newLinkedHashMap() -> newLinkedHashMap
    java.util.LinkedHashMap newLinkedHashMap(java.util.Map) -> newLinkedHashMap
    java.util.concurrent.ConcurrentMap newConcurrentMap() -> newConcurrentMap
    java.util.TreeMap newTreeMap() -> newTreeMap
    java.util.TreeMap newTreeMap(java.util.SortedMap) -> newTreeMap
    java.util.TreeMap newTreeMap(java.util.Comparator) -> newTreeMap
    java.util.EnumMap newEnumMap(java.lang.Class) -> newEnumMap
    java.util.EnumMap newEnumMap(java.util.Map) -> newEnumMap
    java.util.IdentityHashMap newIdentityHashMap() -> newIdentityHashMap
    com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map) -> difference
    com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence) -> difference
    void doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> doDifference
    java.util.Map unmodifiableMap(java.util.Map) -> unmodifiableMap
    com.google.common.collect.SortedMapDifference difference(java.util.SortedMap,java.util.Map) -> difference
    java.util.Comparator orNaturalOrder(java.util.Comparator) -> orNaturalOrder
    java.util.Map asMap(java.util.Set,com.google.common.base.Function) -> asMap
    java.util.SortedMap asMap(java.util.SortedSet,com.google.common.base.Function) -> asMap
    java.util.SortedMap asMapSortedIgnoreNavigable(java.util.SortedSet,com.google.common.base.Function) -> asMapSortedIgnoreNavigable
    java.util.NavigableMap asMap(java.util.NavigableSet,com.google.common.base.Function) -> asMap
    java.util.Iterator asMapEntryIterator(java.util.Set,com.google.common.base.Function) -> asMapEntryIterator
    java.util.Set removeOnlySet(java.util.Set) -> removeOnlySet
    java.util.SortedSet removeOnlySortedSet(java.util.SortedSet) -> removeOnlySortedSet
    java.util.NavigableSet removeOnlyNavigableSet(java.util.NavigableSet) -> removeOnlyNavigableSet
    com.google.common.collect.ImmutableMap toMap(java.lang.Iterable,com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableMap toMap(java.util.Iterator,com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.google.common.base.Function) -> uniqueIndex
    com.google.common.collect.ImmutableMap uniqueIndex(java.util.Iterator,com.google.common.base.Function) -> uniqueIndex
    com.google.common.collect.ImmutableMap fromProperties(java.util.Properties) -> fromProperties
    java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object) -> immutableEntry
    java.util.Set unmodifiableEntrySet(java.util.Set) -> unmodifiableEntrySet
    java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry) -> unmodifiableEntry
    com.google.common.base.Converter asConverter(com.google.common.collect.BiMap) -> asConverter
    com.google.common.collect.BiMap synchronizedBiMap(com.google.common.collect.BiMap) -> synchronizedBiMap
    com.google.common.collect.BiMap unmodifiableBiMap(com.google.common.collect.BiMap) -> unmodifiableBiMap
    java.util.Map transformValues(java.util.Map,com.google.common.base.Function) -> transformValues
    java.util.SortedMap transformValues(java.util.SortedMap,com.google.common.base.Function) -> transformValues
    java.util.NavigableMap transformValues(java.util.NavigableMap,com.google.common.base.Function) -> transformValues
    java.util.Map transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    java.util.SortedMap transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    java.util.NavigableMap transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    java.util.SortedMap transformEntriesIgnoreNavigable(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntriesIgnoreNavigable
    com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function) -> asEntryTransformer
    com.google.common.base.Function asValueToValueFunction(com.google.common.collect.Maps$EntryTransformer,java.lang.Object) -> asValueToValueFunction
    com.google.common.base.Function asEntryToValueFunction(com.google.common.collect.Maps$EntryTransformer) -> asEntryToValueFunction
    java.util.Map$Entry transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry) -> transformEntry
    com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer) -> asEntryToEntryFunction
    com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate) -> keyPredicateOnEntries
    com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate) -> valuePredicateOnEntries
    java.util.Map filterKeys(java.util.Map,com.google.common.base.Predicate) -> filterKeys
    java.util.SortedMap filterKeys(java.util.SortedMap,com.google.common.base.Predicate) -> filterKeys
    java.util.NavigableMap filterKeys(java.util.NavigableMap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.BiMap filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterKeys
    java.util.Map filterValues(java.util.Map,com.google.common.base.Predicate) -> filterValues
    java.util.SortedMap filterValues(java.util.SortedMap,com.google.common.base.Predicate) -> filterValues
    java.util.NavigableMap filterValues(java.util.NavigableMap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.BiMap filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterValues
    java.util.Map filterEntries(java.util.Map,com.google.common.base.Predicate) -> filterEntries
    java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate) -> filterEntries
    java.util.SortedMap filterSortedIgnoreNavigable(java.util.SortedMap,com.google.common.base.Predicate) -> filterSortedIgnoreNavigable
    java.util.NavigableMap filterEntries(java.util.NavigableMap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterEntries
    java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.NavigableMap filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate) -> filterFiltered
    com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap) -> unmodifiableNavigableMap
    java.util.Map$Entry unmodifiableOrNull(java.util.Map$Entry) -> unmodifiableOrNull
    java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap) -> synchronizedNavigableMap
    java.lang.Object safeGet(java.util.Map,java.lang.Object) -> safeGet
    boolean safeContainsKey(java.util.Map,java.lang.Object) -> safeContainsKey
    java.lang.Object safeRemove(java.util.Map,java.lang.Object) -> safeRemove
    boolean containsKeyImpl(java.util.Map,java.lang.Object) -> containsKeyImpl
    boolean containsValueImpl(java.util.Map,java.lang.Object) -> containsValueImpl
    boolean containsEntryImpl(java.util.Collection,java.lang.Object) -> containsEntryImpl
    boolean removeEntryImpl(java.util.Collection,java.lang.Object) -> removeEntryImpl
    boolean equalsImpl(java.util.Map,java.lang.Object) -> equalsImpl
    java.lang.String toStringImpl(java.util.Map) -> toStringImpl
    void putAllImpl(java.util.Map,java.util.Map) -> putAllImpl
    java.lang.Object keyOrNull(java.util.Map$Entry) -> keyOrNull
    java.lang.Object valueOrNull(java.util.Map$Entry) -> valueOrNull
    java.util.Map access$100(java.util.Map) -> access$100
    java.util.Set access$200(java.util.Set) -> access$200
    java.util.SortedSet access$300(java.util.SortedSet) -> access$300
    java.util.NavigableSet access$400(java.util.NavigableSet) -> access$400
    java.util.Map$Entry access$800(java.util.Map$Entry) -> access$800
com.google.common.collect.Maps$1 -> com.google.common.collect.Maps$1:
    com.google.common.collect.UnmodifiableIterator val$entryIterator -> val$entryIterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Maps$10 -> com.google.common.collect.Maps$10:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.Maps$11 -> com.google.common.collect.Maps$11:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    java.util.Map$Entry apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$2 -> com.google.common.collect.Maps$2:
    com.google.common.base.Function val$function -> val$function
    java.util.Map$Entry transform(java.lang.Object) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Maps$3 -> com.google.common.collect.Maps$3:
    java.util.Set val$set -> val$set
    java.util.Set delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$4 -> com.google.common.collect.Maps$4:
    java.util.SortedSet val$set -> val$set
    java.util.SortedSet delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$5 -> com.google.common.collect.Maps$5:
    java.util.NavigableSet val$set -> val$set
    java.util.NavigableSet delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$6 -> com.google.common.collect.Maps$6:
    java.util.Map$Entry val$entry -> val$entry
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.Maps$7 -> com.google.common.collect.Maps$7:
    com.google.common.base.Function val$function -> val$function
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Maps$8 -> com.google.common.collect.Maps$8:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    java.lang.Object val$key -> val$key
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$9 -> com.google.common.collect.Maps$9:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$AbstractFilteredMap -> com.google.common.collect.Maps$AbstractFilteredMap:
    java.util.Map unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    boolean apply(java.lang.Object,java.lang.Object) -> apply
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Collection createValues() -> createValues
com.google.common.collect.Maps$AsMapView -> com.google.common.collect.Maps$AsMapView:
    java.util.Set set -> set
    com.google.common.base.Function function -> function
    java.util.Set backingSet() -> backingSet
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection createValues() -> createValues
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Set createEntrySet() -> createEntrySet
com.google.common.collect.Maps$AsMapView$1 -> com.google.common.collect.Maps$AsMapView$1:
    com.google.common.collect.Maps$AsMapView this$0 -> this$0
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$BiMapConverter -> com.google.common.collect.Maps$BiMapConverter:
    com.google.common.collect.BiMap bimap -> bimap
    long serialVersionUID -> serialVersionUID
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object convert(com.google.common.collect.BiMap,java.lang.Object) -> convert
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Maps$DescendingMap -> com.google.common.collect.Maps$DescendingMap:
    java.util.Comparator comparator -> comparator
    java.util.Set entrySet -> entrySet
    java.util.NavigableSet navigableKeySet -> navigableKeySet
    java.util.NavigableMap forward() -> forward
    java.util.Map delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Ordering reverse(java.util.Comparator) -> reverse
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Set entrySet() -> entrySet
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Collection values() -> values
    java.lang.String toString() -> toString
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$DescendingMap$1 -> com.google.common.collect.Maps$DescendingMap$1:
    com.google.common.collect.Maps$DescendingMap this$0 -> this$0
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$EntryFunction -> com.google.common.collect.Maps$EntryFunction:
    com.google.common.collect.Maps$EntryFunction KEY -> KEY
    com.google.common.collect.Maps$EntryFunction VALUE -> VALUE
    com.google.common.collect.Maps$EntryFunction[] $VALUES -> $VALUES
    com.google.common.collect.Maps$EntryFunction[] values() -> values
    com.google.common.collect.Maps$EntryFunction valueOf(java.lang.String) -> valueOf
com.google.common.collect.Maps$EntryFunction$1 -> com.google.common.collect.Maps$EntryFunction$1:
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$EntryFunction$2 -> com.google.common.collect.Maps$EntryFunction$2:
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$EntrySet -> com.google.common.collect.Maps$EntrySet:
    java.util.Map map() -> map
    int size() -> size
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$EntryTransformer -> com.google.common.collect.Maps$EntryTransformer:
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Maps$FilteredEntryBiMap -> com.google.common.collect.Maps$FilteredEntryBiMap:
    com.google.common.collect.BiMap inverse -> inverse
    com.google.common.base.Predicate inversePredicate(com.google.common.base.Predicate) -> inversePredicate
    com.google.common.collect.BiMap unfiltered() -> unfiltered
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
    java.util.Collection values() -> values
com.google.common.collect.Maps$FilteredEntryBiMap$1 -> com.google.common.collect.Maps$FilteredEntryBiMap$1:
    com.google.common.base.Predicate val$forwardPredicate -> val$forwardPredicate
    boolean apply(java.util.Map$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.Maps$FilteredEntryMap -> com.google.common.collect.Maps$FilteredEntryMap:
    java.util.Set filteredEntrySet -> filteredEntrySet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
com.google.common.collect.Maps$FilteredEntryMap$EntrySet -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> this$0
    java.util.Set delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1:
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet this$1 -> this$1
    java.util.Map$Entry transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1 -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 this$2 -> this$2
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$FilteredEntryMap$KeySet -> com.google.common.collect.Maps$FilteredEntryMap$KeySet:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> this$0
    boolean remove(java.lang.Object) -> remove
    boolean removeIf(com.google.common.base.Predicate) -> removeIf
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Maps$FilteredEntryNavigableMap -> com.google.common.collect.Maps$FilteredEntryNavigableMap:
    java.util.NavigableMap unfiltered -> unfiltered
    com.google.common.base.Predicate entryPredicate -> entryPredicate
    java.util.Map filteredDelegate -> filteredDelegate
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Collection values() -> values
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set entrySet() -> entrySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    com.google.common.base.Predicate access$600(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> access$600
    java.util.NavigableMap access$700(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> access$700
com.google.common.collect.Maps$FilteredEntryNavigableMap$1 -> com.google.common.collect.Maps$FilteredEntryNavigableMap$1:
    com.google.common.collect.Maps$FilteredEntryNavigableMap this$0 -> this$0
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$FilteredEntrySortedMap -> com.google.common.collect.Maps$FilteredEntrySortedMap:
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.SortedSet keySet() -> keySet
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Set createKeySet() -> createKeySet
    java.util.Set keySet() -> keySet
com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet -> com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:
    com.google.common.collect.Maps$FilteredEntrySortedMap this$0 -> this$0
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
com.google.common.collect.Maps$FilteredKeyMap -> com.google.common.collect.Maps$FilteredKeyMap:
    com.google.common.base.Predicate keyPredicate -> keyPredicate
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
    boolean containsKey(java.lang.Object) -> containsKey
com.google.common.collect.Maps$FilteredMapValues -> com.google.common.collect.Maps$FilteredMapValues:
    java.util.Map unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    boolean remove(java.lang.Object) -> remove
    boolean removeIf(com.google.common.base.Predicate) -> removeIf
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Maps$ImprovedAbstractMap -> com.google.common.collect.Maps$ImprovedAbstractMap:
    java.util.Set entrySet -> entrySet
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
com.google.common.collect.Maps$KeySet -> com.google.common.collect.Maps$KeySet:
    java.util.Map map -> map
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Maps$MapDifferenceImpl -> com.google.common.collect.Maps$MapDifferenceImpl:
    java.util.Map onlyOnLeft -> onlyOnLeft
    java.util.Map onlyOnRight -> onlyOnRight
    java.util.Map onBoth -> onBoth
    java.util.Map differences -> differences
    boolean areEqual() -> areEqual
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesDiffering() -> entriesDiffering
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Maps$NavigableAsMapView -> com.google.common.collect.Maps$NavigableAsMapView:
    java.util.NavigableSet set -> set
    com.google.common.base.Function function -> function
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    int size() -> size
    java.util.NavigableMap descendingMap() -> descendingMap
com.google.common.collect.Maps$NavigableKeySet -> com.google.common.collect.Maps$NavigableKeySet:
    java.util.NavigableMap map() -> map
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedMap map() -> map
    java.util.Map map() -> map
com.google.common.collect.Maps$SortedAsMapView -> com.google.common.collect.Maps$SortedAsMapView:
    java.util.SortedSet backingSet() -> backingSet
    java.util.Comparator comparator() -> comparator
    java.util.Set keySet() -> keySet
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Set backingSet() -> backingSet
com.google.common.collect.Maps$SortedKeySet -> com.google.common.collect.Maps$SortedKeySet:
    java.util.SortedMap map() -> map
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.Map map() -> map
com.google.common.collect.Maps$SortedMapDifferenceImpl -> com.google.common.collect.Maps$SortedMapDifferenceImpl:
    java.util.SortedMap entriesDiffering() -> entriesDiffering
    java.util.SortedMap entriesInCommon() -> entriesInCommon
    java.util.SortedMap entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.SortedMap entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesDiffering() -> entriesDiffering
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
com.google.common.collect.Maps$TransformedEntriesMap -> com.google.common.collect.Maps$TransformedEntriesMap:
    java.util.Map fromMap -> fromMap
    com.google.common.collect.Maps$EntryTransformer transformer -> transformer
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Set createEntrySet() -> createEntrySet
com.google.common.collect.Maps$TransformedEntriesMap$1 -> com.google.common.collect.Maps$TransformedEntriesMap$1:
    com.google.common.collect.Maps$TransformedEntriesMap this$0 -> this$0
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$TransformedEntriesNavigableMap -> com.google.common.collect.Maps$TransformedEntriesNavigableMap:
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.NavigableMap headMap(java.lang.Object) -> headMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map$Entry transformEntry(java.util.Map$Entry) -> transformEntry
    java.util.NavigableMap fromMap() -> fromMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap fromMap() -> fromMap
com.google.common.collect.Maps$TransformedEntriesSortedMap -> com.google.common.collect.Maps$TransformedEntriesSortedMap:
    java.util.SortedMap fromMap() -> fromMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
com.google.common.collect.Maps$UnmodifiableBiMap -> com.google.common.collect.Maps$UnmodifiableBiMap:
    java.util.Map unmodifiableMap -> unmodifiableMap
    com.google.common.collect.BiMap delegate -> delegate
    com.google.common.collect.BiMap inverse -> inverse
    java.util.Set values -> values
    long serialVersionUID -> serialVersionUID
    java.util.Map delegate() -> delegate
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$UnmodifiableEntries -> com.google.common.collect.Maps$UnmodifiableEntries:
    java.util.Collection entries -> entries
    java.util.Collection delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$UnmodifiableEntries$1 -> com.google.common.collect.Maps$UnmodifiableEntries$1:
    java.util.Iterator val$delegate -> val$delegate
    com.google.common.collect.Maps$UnmodifiableEntries this$0 -> this$0
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.Maps$UnmodifiableEntrySet -> com.google.common.collect.Maps$UnmodifiableEntrySet:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Maps$UnmodifiableNavigableMap -> com.google.common.collect.Maps$UnmodifiableNavigableMap:
    java.util.NavigableMap delegate -> delegate
    com.google.common.collect.Maps$UnmodifiableNavigableMap descendingMap -> descendingMap
    java.util.SortedMap delegate() -> delegate
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$ValueDifferenceImpl -> com.google.common.collect.Maps$ValueDifferenceImpl:
    java.lang.Object left -> left
    java.lang.Object right -> right
    com.google.common.collect.MapDifference$ValueDifference create(java.lang.Object,java.lang.Object) -> create
    java.lang.Object leftValue() -> leftValue
    java.lang.Object rightValue() -> rightValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Maps$Values -> com.google.common.collect.Maps$Values:
    java.util.Map map -> map
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.common.collect.MinMaxPriorityQueue -> com.google.common.collect.MinMaxPriorityQueue:
    com.google.common.collect.MinMaxPriorityQueue$Heap minHeap -> minHeap
    com.google.common.collect.MinMaxPriorityQueue$Heap maxHeap -> maxHeap
    int maximumSize -> maximumSize
    java.lang.Object[] queue -> queue
    int size -> size
    int modCount -> modCount
    int EVEN_POWERS_OF_TWO -> EVEN_POWERS_OF_TWO
    int ODD_POWERS_OF_TWO -> ODD_POWERS_OF_TWO
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    com.google.common.collect.MinMaxPriorityQueue create() -> create
    com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable) -> create
    com.google.common.collect.MinMaxPriorityQueue$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.MinMaxPriorityQueue$Builder expectedSize(int) -> expectedSize
    com.google.common.collect.MinMaxPriorityQueue$Builder maximumSize(int) -> maximumSize
    int size() -> size
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object elementData(int) -> elementData
    java.lang.Object peek() -> peek
    int getMaxElementIndex() -> getMaxElementIndex
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object removeFirst() -> removeFirst
    java.lang.Object peekFirst() -> peekFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object removeLast() -> removeLast
    java.lang.Object peekLast() -> peekLast
    com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int) -> removeAt
    com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object) -> fillHole
    java.lang.Object removeAndGet(int) -> removeAndGet
    com.google.common.collect.MinMaxPriorityQueue$Heap heapForIndex(int) -> heapForIndex
    boolean isEvenLevel(int) -> isEvenLevel
    boolean isIntact() -> isIntact
    java.util.Iterator iterator() -> iterator
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.util.Comparator comparator() -> comparator
    int capacity() -> capacity
    int initialQueueSize(int,int,java.lang.Iterable) -> initialQueueSize
    void growIfNeeded() -> growIfNeeded
    int calculateNewCapacity() -> calculateNewCapacity
    int capAtMaximumSize(int,int) -> capAtMaximumSize
    java.lang.Object[] access$500(com.google.common.collect.MinMaxPriorityQueue) -> access$500
    int access$600(com.google.common.collect.MinMaxPriorityQueue) -> access$600
    int access$700(com.google.common.collect.MinMaxPriorityQueue) -> access$700
com.google.common.collect.MinMaxPriorityQueue$1 -> com.google.common.collect.MinMaxPriorityQueue$1:
com.google.common.collect.MinMaxPriorityQueue$Builder -> com.google.common.collect.MinMaxPriorityQueue$Builder:
    int UNSET_EXPECTED_SIZE -> UNSET_EXPECTED_SIZE
    java.util.Comparator comparator -> comparator
    int expectedSize -> expectedSize
    int maximumSize -> maximumSize
    com.google.common.collect.MinMaxPriorityQueue$Builder expectedSize(int) -> expectedSize
    com.google.common.collect.MinMaxPriorityQueue$Builder maximumSize(int) -> maximumSize
    com.google.common.collect.MinMaxPriorityQueue create() -> create
    com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable) -> create
    com.google.common.collect.Ordering ordering() -> ordering
    com.google.common.collect.Ordering access$200(com.google.common.collect.MinMaxPriorityQueue$Builder) -> access$200
    int access$300(com.google.common.collect.MinMaxPriorityQueue$Builder) -> access$300
com.google.common.collect.MinMaxPriorityQueue$Heap -> com.google.common.collect.MinMaxPriorityQueue$Heap:
    com.google.common.collect.Ordering ordering -> ordering
    com.google.common.collect.MinMaxPriorityQueue$Heap otherHeap -> otherHeap
    com.google.common.collect.MinMaxPriorityQueue this$0 -> this$0
    int compareElements(int,int) -> compareElements
    com.google.common.collect.MinMaxPriorityQueue$MoveDesc tryCrossOverAndBubbleUp(int,int,java.lang.Object) -> tryCrossOverAndBubbleUp
    void bubbleUp(int,java.lang.Object) -> bubbleUp
    int bubbleUpAlternatingLevels(int,java.lang.Object) -> bubbleUpAlternatingLevels
    int findMin(int,int) -> findMin
    int findMinChild(int) -> findMinChild
    int findMinGrandChild(int) -> findMinGrandChild
    int crossOverUp(int,java.lang.Object) -> crossOverUp
    int getCorrectLastElement(java.lang.Object) -> getCorrectLastElement
    int crossOver(int,java.lang.Object) -> crossOver
    int fillHoleAt(int) -> fillHoleAt
    boolean verifyIndex(int) -> verifyIndex
    int getLeftChildIndex(int) -> getLeftChildIndex
    int getRightChildIndex(int) -> getRightChildIndex
    int getParentIndex(int) -> getParentIndex
    int getGrandparentIndex(int) -> getGrandparentIndex
    boolean access$400(com.google.common.collect.MinMaxPriorityQueue$Heap,int) -> access$400
com.google.common.collect.MinMaxPriorityQueue$MoveDesc -> com.google.common.collect.MinMaxPriorityQueue$MoveDesc:
    java.lang.Object toTrickle -> toTrickle
    java.lang.Object replaced -> replaced
com.google.common.collect.MinMaxPriorityQueue$QueueIterator -> com.google.common.collect.MinMaxPriorityQueue$QueueIterator:
    int cursor -> cursor
    int expectedModCount -> expectedModCount
    java.util.Queue forgetMeNot -> forgetMeNot
    java.util.List skipMe -> skipMe
    java.lang.Object lastFromForgetMeNot -> lastFromForgetMeNot
    boolean canRemove -> canRemove
    com.google.common.collect.MinMaxPriorityQueue this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    boolean containsExact(java.lang.Iterable,java.lang.Object) -> containsExact
    boolean removeExact(java.lang.Object) -> removeExact
    void checkModCount() -> checkModCount
    int nextNotInSkipMe(int) -> nextNotInSkipMe
com.google.common.collect.Multimap -> com.google.common.collect.Multimap:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    com.google.common.collect.Multiset keys() -> keys
    java.util.Collection values() -> values
    java.util.Collection entries() -> entries
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MultimapBuilder -> com.google.common.collect.MultimapBuilder:
    int DEFAULT_EXPECTED_KEYS -> DEFAULT_EXPECTED_KEYS
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys hashKeys() -> hashKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys hashKeys(int) -> hashKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys linkedHashKeys() -> linkedHashKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys linkedHashKeys(int) -> linkedHashKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys treeKeys() -> treeKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys treeKeys(java.util.Comparator) -> treeKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys enumKeys(java.lang.Class) -> enumKeys
    com.google.common.collect.Multimap build() -> build
    com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
com.google.common.collect.MultimapBuilder$1 -> com.google.common.collect.MultimapBuilder$1:
    int val$expectedKeys -> val$expectedKeys
    java.util.Map createMap() -> createMap
com.google.common.collect.MultimapBuilder$2 -> com.google.common.collect.MultimapBuilder$2:
    int val$expectedKeys -> val$expectedKeys
    java.util.Map createMap() -> createMap
com.google.common.collect.MultimapBuilder$3 -> com.google.common.collect.MultimapBuilder$3:
    java.util.Comparator val$comparator -> val$comparator
    java.util.Map createMap() -> createMap
com.google.common.collect.MultimapBuilder$4 -> com.google.common.collect.MultimapBuilder$4:
    java.lang.Class val$keyClass -> val$keyClass
    java.util.Map createMap() -> createMap
com.google.common.collect.MultimapBuilder$ArrayListSupplier -> com.google.common.collect.MultimapBuilder$ArrayListSupplier:
    int expectedValuesPerKey -> expectedValuesPerKey
    java.util.List get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$EnumSetSupplier -> com.google.common.collect.MultimapBuilder$EnumSetSupplier:
    java.lang.Class clazz -> clazz
    java.util.Set get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$HashSetSupplier -> com.google.common.collect.MultimapBuilder$HashSetSupplier:
    int expectedValuesPerKey -> expectedValuesPerKey
    java.util.Set get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier -> com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:
    int expectedValuesPerKey -> expectedValuesPerKey
    java.util.Set get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$LinkedListSupplier -> com.google.common.collect.MultimapBuilder$LinkedListSupplier:
    com.google.common.collect.MultimapBuilder$LinkedListSupplier INSTANCE -> INSTANCE
    com.google.common.collect.MultimapBuilder$LinkedListSupplier[] $VALUES -> $VALUES
    com.google.common.collect.MultimapBuilder$LinkedListSupplier[] values() -> values
    com.google.common.collect.MultimapBuilder$LinkedListSupplier valueOf(java.lang.String) -> valueOf
    com.google.common.base.Supplier instance() -> instance
    java.util.List get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$ListMultimapBuilder -> com.google.common.collect.MultimapBuilder$ListMultimapBuilder:
    com.google.common.collect.ListMultimap build() -> build
    com.google.common.collect.ListMultimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:
    int DEFAULT_EXPECTED_VALUES_PER_KEY -> DEFAULT_EXPECTED_VALUES_PER_KEY
    java.util.Map createMap() -> createMap
    com.google.common.collect.MultimapBuilder$ListMultimapBuilder arrayListValues() -> arrayListValues
    com.google.common.collect.MultimapBuilder$ListMultimapBuilder arrayListValues(int) -> arrayListValues
    com.google.common.collect.MultimapBuilder$ListMultimapBuilder linkedListValues() -> linkedListValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder hashSetValues() -> hashSetValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder hashSetValues(int) -> hashSetValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder linkedHashSetValues() -> linkedHashSetValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder linkedHashSetValues(int) -> linkedHashSetValues
    com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder treeSetValues() -> treeSetValues
    com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder treeSetValues(java.util.Comparator) -> treeSetValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder enumSetValues(java.lang.Class) -> enumSetValues
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1:
    int val$expectedValuesPerKey -> val$expectedValuesPerKey
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    com.google.common.collect.ListMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    com.google.common.collect.ListMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3:
    int val$expectedValuesPerKey -> val$expectedValuesPerKey
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4:
    int val$expectedValuesPerKey -> val$expectedValuesPerKey
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5:
    java.util.Comparator val$comparator -> val$comparator
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    com.google.common.collect.SortedSetMultimap build() -> build
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6:
    java.lang.Class val$valueClass -> val$valueClass
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$SetMultimapBuilder -> com.google.common.collect.MultimapBuilder$SetMultimapBuilder:
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.SetMultimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder -> com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:
    com.google.common.collect.SortedSetMultimap build() -> build
    com.google.common.collect.SortedSetMultimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.SetMultimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$TreeSetSupplier -> com.google.common.collect.MultimapBuilder$TreeSetSupplier:
    java.util.Comparator comparator -> comparator
    java.util.SortedSet get() -> get
    java.lang.Object get() -> get
com.google.common.collect.Multimaps -> com.google.common.collect.Multimaps:
    com.google.common.collect.Multimap newMultimap(java.util.Map,com.google.common.base.Supplier) -> newMultimap
    com.google.common.collect.ListMultimap newListMultimap(java.util.Map,com.google.common.base.Supplier) -> newListMultimap
    com.google.common.collect.SetMultimap newSetMultimap(java.util.Map,com.google.common.base.Supplier) -> newSetMultimap
    com.google.common.collect.SortedSetMultimap newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier) -> newSortedSetMultimap
    com.google.common.collect.Multimap invertFrom(com.google.common.collect.Multimap,com.google.common.collect.Multimap) -> invertFrom
    com.google.common.collect.Multimap synchronizedMultimap(com.google.common.collect.Multimap) -> synchronizedMultimap
    com.google.common.collect.Multimap unmodifiableMultimap(com.google.common.collect.Multimap) -> unmodifiableMultimap
    com.google.common.collect.Multimap unmodifiableMultimap(com.google.common.collect.ImmutableMultimap) -> unmodifiableMultimap
    com.google.common.collect.SetMultimap synchronizedSetMultimap(com.google.common.collect.SetMultimap) -> synchronizedSetMultimap
    com.google.common.collect.SetMultimap unmodifiableSetMultimap(com.google.common.collect.SetMultimap) -> unmodifiableSetMultimap
    com.google.common.collect.SetMultimap unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap) -> unmodifiableSetMultimap
    com.google.common.collect.SortedSetMultimap synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap) -> synchronizedSortedSetMultimap
    com.google.common.collect.SortedSetMultimap unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap) -> unmodifiableSortedSetMultimap
    com.google.common.collect.ListMultimap synchronizedListMultimap(com.google.common.collect.ListMultimap) -> synchronizedListMultimap
    com.google.common.collect.ListMultimap unmodifiableListMultimap(com.google.common.collect.ListMultimap) -> unmodifiableListMultimap
    com.google.common.collect.ListMultimap unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap) -> unmodifiableListMultimap
    java.util.Collection unmodifiableValueCollection(java.util.Collection) -> unmodifiableValueCollection
    java.util.Collection unmodifiableEntries(java.util.Collection) -> unmodifiableEntries
    java.util.Map asMap(com.google.common.collect.ListMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.SetMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.SortedSetMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.Multimap) -> asMap
    com.google.common.collect.SetMultimap forMap(java.util.Map) -> forMap
    com.google.common.collect.Multimap transformValues(com.google.common.collect.Multimap,com.google.common.base.Function) -> transformValues
    com.google.common.collect.Multimap transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    com.google.common.collect.ListMultimap transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function) -> transformValues
    com.google.common.collect.ListMultimap transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function) -> index
    com.google.common.collect.ImmutableListMultimap index(java.util.Iterator,com.google.common.base.Function) -> index
    com.google.common.collect.Multimap filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.ListMultimap filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.Multimap filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.SetMultimap filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.Multimap filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.SetMultimap filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.Multimap filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate) -> filterFiltered
    com.google.common.collect.SetMultimap filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate) -> filterFiltered
    boolean equalsImpl(com.google.common.collect.Multimap,java.lang.Object) -> equalsImpl
    java.util.Collection access$000(java.util.Collection) -> access$000
    java.util.Collection access$100(java.util.Collection) -> access$100
com.google.common.collect.Multimaps$AsMap -> com.google.common.collect.Multimaps$AsMap:
    com.google.common.collect.Multimap multimap -> multimap
    int size() -> size
    java.util.Set createEntrySet() -> createEntrySet
    void removeValuesForKey(java.lang.Object) -> removeValuesForKey
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection remove(java.lang.Object) -> remove
    java.util.Set keySet() -> keySet
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.Multimap access$200(com.google.common.collect.Multimaps$AsMap) -> access$200
com.google.common.collect.Multimaps$AsMap$EntrySet -> com.google.common.collect.Multimaps$AsMap$EntrySet:
    com.google.common.collect.Multimaps$AsMap this$0 -> this$0
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.Multimaps$AsMap$EntrySet$1 -> com.google.common.collect.Multimaps$AsMap$EntrySet$1:
    com.google.common.collect.Multimaps$AsMap$EntrySet this$1 -> this$1
    java.util.Collection apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Multimaps$CustomListMultimap -> com.google.common.collect.Multimaps$CustomListMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    java.util.List createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$CustomMultimap -> com.google.common.collect.Multimaps$CustomMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    java.util.Collection createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.collect.Multimaps$CustomSetMultimap -> com.google.common.collect.Multimaps$CustomSetMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    java.util.Set createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$CustomSortedSetMultimap -> com.google.common.collect.Multimaps$CustomSortedSetMultimap:
    com.google.common.base.Supplier factory -> factory
    java.util.Comparator valueComparator -> valueComparator
    long serialVersionUID -> serialVersionUID
    java.util.SortedSet createCollection() -> createCollection
    java.util.Comparator valueComparator() -> valueComparator
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set createCollection() -> createCollection
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$Entries -> com.google.common.collect.Multimaps$Entries:
    com.google.common.collect.Multimap multimap() -> multimap
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Multimaps$Keys -> com.google.common.collect.Multimaps$Keys:
    com.google.common.collect.Multimap multimap -> multimap
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
    java.util.Set createEntrySet() -> createEntrySet
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int count(java.lang.Object) -> count
    int remove(java.lang.Object,int) -> remove
    void clear() -> clear
    java.util.Set elementSet() -> elementSet
com.google.common.collect.Multimaps$Keys$1 -> com.google.common.collect.Multimaps$Keys$1:
    com.google.common.collect.Multimaps$Keys this$0 -> this$0
    com.google.common.collect.Multiset$Entry transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Multimaps$Keys$1$1 -> com.google.common.collect.Multimaps$Keys$1$1:
    java.util.Map$Entry val$backingEntry -> val$backingEntry
    com.google.common.collect.Multimaps$Keys$1 this$1 -> this$1
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.Multimaps$Keys$KeysEntrySet -> com.google.common.collect.Multimaps$Keys$KeysEntrySet:
    com.google.common.collect.Multimaps$Keys this$0 -> this$0
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.Multimaps$MapMultimap -> com.google.common.collect.Multimaps$MapMultimap:
    java.util.Map map -> map
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    java.util.Set get(java.lang.Object) -> get
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Set removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entries() -> entries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    int hashCode() -> hashCode
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
com.google.common.collect.Multimaps$MapMultimap$1 -> com.google.common.collect.Multimaps$MapMultimap$1:
    java.lang.Object val$key -> val$key
    com.google.common.collect.Multimaps$MapMultimap this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.Multimaps$MapMultimap$1$1 -> com.google.common.collect.Multimaps$MapMultimap$1$1:
    int i -> i
    com.google.common.collect.Multimaps$MapMultimap$1 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Multimaps$TransformedEntriesListMultimap -> com.google.common.collect.Multimaps$TransformedEntriesListMultimap:
    java.util.List transform(java.lang.Object,java.util.Collection) -> transform
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection transform(java.lang.Object,java.util.Collection) -> transform
com.google.common.collect.Multimaps$TransformedEntriesMultimap -> com.google.common.collect.Multimaps$TransformedEntriesMultimap:
    com.google.common.collect.Multimap fromMultimap -> fromMultimap
    com.google.common.collect.Maps$EntryTransformer transformer -> transformer
    java.util.Collection transform(java.lang.Object,java.util.Collection) -> transform
    java.util.Map createAsMap() -> createAsMap
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.util.Set keySet() -> keySet
    com.google.common.collect.Multiset keys() -> keys
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    int size() -> size
    java.util.Collection createValues() -> createValues
com.google.common.collect.Multimaps$TransformedEntriesMultimap$1 -> com.google.common.collect.Multimaps$TransformedEntriesMultimap$1:
    com.google.common.collect.Multimaps$TransformedEntriesMultimap this$0 -> this$0
    java.util.Collection transformEntry(java.lang.Object,java.util.Collection) -> transformEntry
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Multimaps$UnmodifiableListMultimap -> com.google.common.collect.Multimaps$UnmodifiableListMultimap:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ListMultimap delegate() -> delegate
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableMultimap -> com.google.common.collect.Multimaps$UnmodifiableMultimap:
    com.google.common.collect.Multimap delegate -> delegate
    java.util.Collection entries -> entries
    com.google.common.collect.Multiset keys -> keys
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Map map -> map
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.Multimap delegate() -> delegate
    void clear() -> clear
    java.util.Map asMap() -> asMap
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableMultimap$1 -> com.google.common.collect.Multimaps$UnmodifiableMultimap$1:
    com.google.common.collect.Multimaps$UnmodifiableMultimap this$0 -> this$0
    java.util.Collection apply(java.util.Collection) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Multimaps$UnmodifiableSetMultimap -> com.google.common.collect.Multimaps$UnmodifiableSetMultimap:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Set get(java.lang.Object) -> get
    java.util.Set entries() -> entries
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap -> com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multiset -> com.google.common.collect.Multiset:
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Multiset$Entry -> com.google.common.collect.Multiset$Entry:
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Multisets -> com.google.common.collect.Multisets:
    com.google.common.collect.Ordering DECREASING_COUNT_ORDERING -> DECREASING_COUNT_ORDERING
    com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.Multiset) -> unmodifiableMultiset
    com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.ImmutableMultiset) -> unmodifiableMultiset
    com.google.common.collect.SortedMultiset unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset) -> unmodifiableSortedMultiset
    com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int) -> immutableEntry
    com.google.common.collect.Multiset filter(com.google.common.collect.Multiset,com.google.common.base.Predicate) -> filter
    int inferDistinctElements(java.lang.Iterable) -> inferDistinctElements
    com.google.common.collect.Multiset union(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> union
    com.google.common.collect.Multiset intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> intersection
    com.google.common.collect.Multiset sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> sum
    com.google.common.collect.Multiset difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> difference
    boolean containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> containsOccurrences
    boolean retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> retainOccurrences
    boolean retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> retainOccurrencesImpl
    boolean removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable) -> removeOccurrences
    boolean removeOccurrencesImpl(com.google.common.collect.Multiset,java.lang.Iterable) -> removeOccurrencesImpl
    boolean removeOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> removeOccurrencesImpl
    boolean equalsImpl(com.google.common.collect.Multiset,java.lang.Object) -> equalsImpl
    boolean addAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> addAllImpl
    boolean removeAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> removeAllImpl
    boolean retainAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> retainAllImpl
    int setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int) -> setCountImpl
    boolean setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int) -> setCountImpl
    java.util.Iterator iteratorImpl(com.google.common.collect.Multiset) -> iteratorImpl
    int sizeImpl(com.google.common.collect.Multiset) -> sizeImpl
    com.google.common.collect.Multiset cast(java.lang.Iterable) -> cast
    com.google.common.collect.ImmutableMultiset copyHighestCountFirst(com.google.common.collect.Multiset) -> copyHighestCountFirst
com.google.common.collect.Multisets$1 -> com.google.common.collect.Multisets$1:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$1$1 -> com.google.common.collect.Multisets$1$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    java.util.Iterator val$iterator2 -> val$iterator2
    com.google.common.collect.Multisets$1 this$0 -> this$0
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$2 -> com.google.common.collect.Multisets$2:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$2$1 -> com.google.common.collect.Multisets$2$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    com.google.common.collect.Multisets$2 this$0 -> this$0
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$3 -> com.google.common.collect.Multisets$3:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$3$1 -> com.google.common.collect.Multisets$3$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    java.util.Iterator val$iterator2 -> val$iterator2
    com.google.common.collect.Multisets$3 this$0 -> this$0
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$4 -> com.google.common.collect.Multisets$4:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    int count(java.lang.Object) -> count
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$4$1 -> com.google.common.collect.Multisets$4$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    com.google.common.collect.Multisets$4 this$0 -> this$0
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$5 -> com.google.common.collect.Multisets$5:
    int compare(com.google.common.collect.Multiset$Entry,com.google.common.collect.Multiset$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.Multisets$AbstractEntry -> com.google.common.collect.Multisets$AbstractEntry:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Multisets$ElementSet -> com.google.common.collect.Multisets$ElementSet:
    com.google.common.collect.Multiset multiset() -> multiset
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    int size() -> size
com.google.common.collect.Multisets$ElementSet$1 -> com.google.common.collect.Multisets$ElementSet$1:
    com.google.common.collect.Multisets$ElementSet this$0 -> this$0
    java.lang.Object transform(com.google.common.collect.Multiset$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Multisets$EntrySet -> com.google.common.collect.Multisets$EntrySet:
    com.google.common.collect.Multiset multiset() -> multiset
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Multisets$FilteredMultiset -> com.google.common.collect.Multisets$FilteredMultiset:
    com.google.common.collect.Multiset unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Set createElementSet() -> createElementSet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Multisets$FilteredMultiset$1 -> com.google.common.collect.Multisets$FilteredMultiset$1:
    com.google.common.collect.Multisets$FilteredMultiset this$0 -> this$0
    boolean apply(com.google.common.collect.Multiset$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.Multisets$ImmutableEntry -> com.google.common.collect.Multisets$ImmutableEntry:
    java.lang.Object element -> element
    int count -> count
    long serialVersionUID -> serialVersionUID
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.Multisets$MultisetIteratorImpl -> com.google.common.collect.Multisets$MultisetIteratorImpl:
    com.google.common.collect.Multiset multiset -> multiset
    java.util.Iterator entryIterator -> entryIterator
    com.google.common.collect.Multiset$Entry currentEntry -> currentEntry
    int laterCount -> laterCount
    int totalCount -> totalCount
    boolean canRemove -> canRemove
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Multisets$UnmodifiableMultiset -> com.google.common.collect.Multisets$UnmodifiableMultiset:
    com.google.common.collect.Multiset delegate -> delegate
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.Multiset delegate() -> delegate
    java.util.Set createElementSet() -> createElementSet
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    int add(java.lang.Object,int) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    int remove(java.lang.Object,int) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.MutableClassToInstanceMap -> com.google.common.collect.MutableClassToInstanceMap:
    com.google.common.collect.MapConstraint VALUE_CAN_BE_CAST_TO_KEY -> VALUE_CAN_BE_CAST_TO_KEY
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MutableClassToInstanceMap create() -> create
    com.google.common.collect.MutableClassToInstanceMap create(java.util.Map) -> create
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object cast(java.lang.Class,java.lang.Object) -> cast
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.lang.Object access$000(java.lang.Class,java.lang.Object) -> access$000
com.google.common.collect.MutableClassToInstanceMap$1 -> com.google.common.collect.MutableClassToInstanceMap$1:
    void checkKeyValue(java.lang.Class,java.lang.Object) -> checkKeyValue
    void checkKeyValue(java.lang.Object,java.lang.Object) -> checkKeyValue
com.google.common.collect.NaturalOrdering -> com.google.common.collect.NaturalOrdering:
    com.google.common.collect.NaturalOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.NullsFirstOrdering -> com.google.common.collect.NullsFirstOrdering:
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.NullsLastOrdering -> com.google.common.collect.NullsLastOrdering:
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.ObjectArrays -> com.google.common.collect.ObjectArrays:
    java.lang.Object[] EMPTY_ARRAY -> EMPTY_ARRAY
    java.lang.Object[] newArray(java.lang.Class,int) -> newArray
    java.lang.Object[] newArray(java.lang.Object[],int) -> newArray
    java.lang.Object[] concat(java.lang.Object[],java.lang.Object[],java.lang.Class) -> concat
    java.lang.Object[] concat(java.lang.Object,java.lang.Object[]) -> concat
    java.lang.Object[] concat(java.lang.Object[],java.lang.Object) -> concat
    java.lang.Object[] arraysCopyOf(java.lang.Object[],int) -> arraysCopyOf
    java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[]) -> toArrayImpl
    java.lang.Object[] toArrayImpl(java.lang.Object[],int,int,java.lang.Object[]) -> toArrayImpl
    java.lang.Object[] toArrayImpl(java.util.Collection) -> toArrayImpl
    java.lang.Object[] copyAsObjectArray(java.lang.Object[],int,int) -> copyAsObjectArray
    java.lang.Object[] fillArray(java.lang.Iterable,java.lang.Object[]) -> fillArray
    void swap(java.lang.Object[],int,int) -> swap
    java.lang.Object[] checkElementsNotNull(java.lang.Object[]) -> checkElementsNotNull
    java.lang.Object[] checkElementsNotNull(java.lang.Object[],int) -> checkElementsNotNull
    java.lang.Object checkElementNotNull(java.lang.Object,int) -> checkElementNotNull
com.google.common.collect.Ordering -> com.google.common.collect.Ordering:
    int LEFT_IS_GREATER -> LEFT_IS_GREATER
    int RIGHT_IS_GREATER -> RIGHT_IS_GREATER
    com.google.common.collect.Ordering natural() -> natural
    com.google.common.collect.Ordering from(java.util.Comparator) -> from
    com.google.common.collect.Ordering from(com.google.common.collect.Ordering) -> from
    com.google.common.collect.Ordering explicit(java.util.List) -> explicit
    com.google.common.collect.Ordering explicit(java.lang.Object,java.lang.Object[]) -> explicit
    com.google.common.collect.Ordering allEqual() -> allEqual
    com.google.common.collect.Ordering usingToString() -> usingToString
    com.google.common.collect.Ordering arbitrary() -> arbitrary
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    com.google.common.collect.Ordering onResultOf(com.google.common.base.Function) -> onResultOf
    com.google.common.collect.Ordering onKeys() -> onKeys
    com.google.common.collect.Ordering compound(java.util.Comparator) -> compound
    com.google.common.collect.Ordering compound(java.lang.Iterable) -> compound
    com.google.common.collect.Ordering lexicographical() -> lexicographical
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Object min(java.util.Iterator) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.util.List leastOf(java.lang.Iterable,int) -> leastOf
    java.util.List leastOf(java.util.Iterator,int) -> leastOf
    int partition(java.lang.Object[],int,int,int) -> partition
    java.util.List greatestOf(java.lang.Iterable,int) -> greatestOf
    java.util.List greatestOf(java.util.Iterator,int) -> greatestOf
    java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    boolean isOrdered(java.lang.Iterable) -> isOrdered
    boolean isStrictlyOrdered(java.lang.Iterable) -> isStrictlyOrdered
    int binarySearch(java.util.List,java.lang.Object) -> binarySearch
com.google.common.collect.Ordering$ArbitraryOrdering -> com.google.common.collect.Ordering$ArbitraryOrdering:
    java.util.Map uids -> uids
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.String toString() -> toString
    int identityHashCode(java.lang.Object) -> identityHashCode
com.google.common.collect.Ordering$ArbitraryOrdering$1 -> com.google.common.collect.Ordering$ArbitraryOrdering$1:
    java.util.concurrent.atomic.AtomicInteger counter -> counter
    com.google.common.collect.Ordering$ArbitraryOrdering this$0 -> this$0
    java.lang.Integer apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Ordering$ArbitraryOrderingHolder -> com.google.common.collect.Ordering$ArbitraryOrderingHolder:
    com.google.common.collect.Ordering ARBITRARY_ORDERING -> ARBITRARY_ORDERING
com.google.common.collect.Ordering$IncomparableValueException -> com.google.common.collect.Ordering$IncomparableValueException:
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
com.google.common.collect.PeekingIterator -> com.google.common.collect.PeekingIterator:
    java.lang.Object peek() -> peek
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Platform -> com.google.common.collect.Platform:
    java.lang.Object[] newArray(java.lang.Object[],int) -> newArray
    java.util.Set newSetFromMap(java.util.Map) -> newSetFromMap
    com.google.common.collect.MapMaker tryWeakKeys(com.google.common.collect.MapMaker) -> tryWeakKeys
    java.util.SortedMap mapsTransformEntriesSortedMap(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> mapsTransformEntriesSortedMap
    java.util.SortedMap mapsAsMapSortedSet(java.util.SortedSet,com.google.common.base.Function) -> mapsAsMapSortedSet
    java.util.SortedSet setsFilterSortedSet(java.util.SortedSet,com.google.common.base.Predicate) -> setsFilterSortedSet
    java.util.SortedMap mapsFilterSortedMap(java.util.SortedMap,com.google.common.base.Predicate) -> mapsFilterSortedMap
com.google.common.collect.Queues -> com.google.common.collect.Queues:
    java.util.concurrent.ArrayBlockingQueue newArrayBlockingQueue(int) -> newArrayBlockingQueue
    java.util.ArrayDeque newArrayDeque() -> newArrayDeque
    java.util.ArrayDeque newArrayDeque(java.lang.Iterable) -> newArrayDeque
    java.util.concurrent.ConcurrentLinkedQueue newConcurrentLinkedQueue() -> newConcurrentLinkedQueue
    java.util.concurrent.ConcurrentLinkedQueue newConcurrentLinkedQueue(java.lang.Iterable) -> newConcurrentLinkedQueue
    java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque() -> newLinkedBlockingDeque
    java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque(int) -> newLinkedBlockingDeque
    java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque(java.lang.Iterable) -> newLinkedBlockingDeque
    java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue() -> newLinkedBlockingQueue
    java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue(int) -> newLinkedBlockingQueue
    java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue(java.lang.Iterable) -> newLinkedBlockingQueue
    java.util.concurrent.PriorityBlockingQueue newPriorityBlockingQueue() -> newPriorityBlockingQueue
    java.util.concurrent.PriorityBlockingQueue newPriorityBlockingQueue(java.lang.Iterable) -> newPriorityBlockingQueue
    java.util.PriorityQueue newPriorityQueue() -> newPriorityQueue
    java.util.PriorityQueue newPriorityQueue(java.lang.Iterable) -> newPriorityQueue
    java.util.concurrent.SynchronousQueue newSynchronousQueue() -> newSynchronousQueue
    int drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit) -> drain
    int drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit) -> drainUninterruptibly
    java.util.Queue synchronizedQueue(java.util.Queue) -> synchronizedQueue
    java.util.Deque synchronizedDeque(java.util.Deque) -> synchronizedDeque
com.google.common.collect.Range -> com.google.common.collect.Range:
    com.google.common.base.Function LOWER_BOUND_FN -> LOWER_BOUND_FN
    com.google.common.base.Function UPPER_BOUND_FN -> UPPER_BOUND_FN
    com.google.common.collect.Ordering RANGE_LEX_ORDERING -> RANGE_LEX_ORDERING
    com.google.common.collect.Range ALL -> ALL
    com.google.common.collect.Cut lowerBound -> lowerBound
    com.google.common.collect.Cut upperBound -> upperBound
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Function lowerBoundFn() -> lowerBoundFn
    com.google.common.base.Function upperBoundFn() -> upperBoundFn
    com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut) -> create
    com.google.common.collect.Range open(java.lang.Comparable,java.lang.Comparable) -> open
    com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable) -> closed
    com.google.common.collect.Range closedOpen(java.lang.Comparable,java.lang.Comparable) -> closedOpen
    com.google.common.collect.Range openClosed(java.lang.Comparable,java.lang.Comparable) -> openClosed
    com.google.common.collect.Range range(java.lang.Comparable,com.google.common.collect.BoundType,java.lang.Comparable,com.google.common.collect.BoundType) -> range
    com.google.common.collect.Range lessThan(java.lang.Comparable) -> lessThan
    com.google.common.collect.Range atMost(java.lang.Comparable) -> atMost
    com.google.common.collect.Range upTo(java.lang.Comparable,com.google.common.collect.BoundType) -> upTo
    com.google.common.collect.Range greaterThan(java.lang.Comparable) -> greaterThan
    com.google.common.collect.Range atLeast(java.lang.Comparable) -> atLeast
    com.google.common.collect.Range downTo(java.lang.Comparable,com.google.common.collect.BoundType) -> downTo
    com.google.common.collect.Range all() -> all
    com.google.common.collect.Range singleton(java.lang.Comparable) -> singleton
    com.google.common.collect.Range encloseAll(java.lang.Iterable) -> encloseAll
    boolean hasLowerBound() -> hasLowerBound
    java.lang.Comparable lowerEndpoint() -> lowerEndpoint
    com.google.common.collect.BoundType lowerBoundType() -> lowerBoundType
    boolean hasUpperBound() -> hasUpperBound
    java.lang.Comparable upperEndpoint() -> upperEndpoint
    com.google.common.collect.BoundType upperBoundType() -> upperBoundType
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Comparable) -> contains
    boolean apply(java.lang.Comparable) -> apply
    boolean containsAll(java.lang.Iterable) -> containsAll
    boolean encloses(com.google.common.collect.Range) -> encloses
    boolean isConnected(com.google.common.collect.Range) -> isConnected
    com.google.common.collect.Range intersection(com.google.common.collect.Range) -> intersection
    com.google.common.collect.Range span(com.google.common.collect.Range) -> span
    com.google.common.collect.Range canonical(com.google.common.collect.DiscreteDomain) -> canonical
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toString(com.google.common.collect.Cut,com.google.common.collect.Cut) -> toString
    java.util.SortedSet cast(java.lang.Iterable) -> cast
    java.lang.Object readResolve() -> readResolve
    int compareOrThrow(java.lang.Comparable,java.lang.Comparable) -> compareOrThrow
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.Range$1 -> com.google.common.collect.Range$1:
    com.google.common.collect.Cut apply(com.google.common.collect.Range) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Range$2 -> com.google.common.collect.Range$2:
    com.google.common.collect.Cut apply(com.google.common.collect.Range) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Range$3 -> com.google.common.collect.Range$3:
    int compare(com.google.common.collect.Range,com.google.common.collect.Range) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.Range$4 -> com.google.common.collect.Range$4:
    int[] $SwitchMap$com$google$common$collect$BoundType -> $SwitchMap$com$google$common$collect$BoundType
com.google.common.collect.RangeMap -> com.google.common.collect.RangeMap:
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    java.util.Map asMapOfRanges() -> asMapOfRanges
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.RangeSet -> com.google.common.collect.RangeSet:
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    boolean encloses(com.google.common.collect.Range) -> encloses
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    boolean isEmpty() -> isEmpty
    com.google.common.collect.Range span() -> span
    java.util.Set asRanges() -> asRanges
    com.google.common.collect.RangeSet complement() -> complement
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    void clear() -> clear
    void addAll(com.google.common.collect.RangeSet) -> addAll
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.RegularContiguousSet -> com.google.common.collect.RegularContiguousSet:
    com.google.common.collect.Range range -> range
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ContiguousSet intersectionInCurrentDomain(com.google.common.collect.Range) -> intersectionInCurrentDomain
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> headSetImpl
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSetImpl
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> tailSetImpl
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    boolean equalsOrThrow(java.lang.Comparable,java.lang.Comparable) -> equalsOrThrow
    boolean isPartialView() -> isPartialView
    java.lang.Comparable first() -> first
    java.lang.Comparable last() -> last
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    com.google.common.collect.Range range() -> range
    com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    java.lang.Object last() -> last
    java.lang.Object first() -> first
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
    boolean access$000(java.lang.Comparable,java.lang.Comparable) -> access$000
com.google.common.collect.RegularContiguousSet$1 -> com.google.common.collect.RegularContiguousSet$1:
    java.lang.Comparable last -> last
    com.google.common.collect.RegularContiguousSet this$0 -> this$0
    java.lang.Comparable computeNext(java.lang.Comparable) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.RegularContiguousSet$2 -> com.google.common.collect.RegularContiguousSet$2:
    java.lang.Comparable first -> first
    com.google.common.collect.RegularContiguousSet this$0 -> this$0
    java.lang.Comparable computeNext(java.lang.Comparable) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.RegularContiguousSet$SerializedForm -> com.google.common.collect.RegularContiguousSet$SerializedForm:
    com.google.common.collect.Range range -> range
    com.google.common.collect.DiscreteDomain domain -> domain
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableAsList -> com.google.common.collect.RegularImmutableAsList:
    com.google.common.collect.ImmutableCollection delegate -> delegate
    com.google.common.collect.ImmutableList delegateList -> delegateList
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    com.google.common.collect.ImmutableList delegateList() -> delegateList
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object get(int) -> get
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.RegularImmutableBiMap -> com.google.common.collect.RegularImmutableBiMap:
    double MAX_LOAD_FACTOR -> MAX_LOAD_FACTOR
    com.google.common.collect.ImmutableMapEntry[] keyTable -> keyTable
    com.google.common.collect.ImmutableMapEntry[] valueTable -> valueTable
    com.google.common.collect.ImmutableMapEntry[] entries -> entries
    int mask -> mask
    int hashCode -> hashCode
    com.google.common.collect.ImmutableBiMap inverse -> inverse
    com.google.common.collect.ImmutableMapEntry[] createEntryArray(int) -> createEntryArray
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    boolean isPartialView() -> isPartialView
    int size() -> size
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.BiMap inverse() -> inverse
    com.google.common.collect.ImmutableMapEntry[] access$000(com.google.common.collect.RegularImmutableBiMap) -> access$000
    int access$100(com.google.common.collect.RegularImmutableBiMap) -> access$100
    int access$300(com.google.common.collect.RegularImmutableBiMap) -> access$300
    com.google.common.collect.ImmutableMapEntry[] access$400(com.google.common.collect.RegularImmutableBiMap) -> access$400
com.google.common.collect.RegularImmutableBiMap$1 -> com.google.common.collect.RegularImmutableBiMap$1:
    com.google.common.collect.RegularImmutableBiMap this$0 -> this$0
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableBiMap$Inverse -> com.google.common.collect.RegularImmutableBiMap$Inverse:
    com.google.common.collect.RegularImmutableBiMap this$0 -> this$0
    int size() -> size
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.BiMap inverse() -> inverse
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet -> com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:
    com.google.common.collect.RegularImmutableBiMap$Inverse this$1 -> this$1
    com.google.common.collect.ImmutableMap map() -> map
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1 -> com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1:
    com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet this$2 -> this$2
    java.util.Map$Entry get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm -> com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:
    com.google.common.collect.ImmutableBiMap forward -> forward
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableBiMap$NonTerminalBiMapEntry -> com.google.common.collect.RegularImmutableBiMap$NonTerminalBiMapEntry:
    com.google.common.collect.ImmutableMapEntry nextInKeyBucket -> nextInKeyBucket
    com.google.common.collect.ImmutableMapEntry nextInValueBucket -> nextInValueBucket
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.RegularImmutableList -> com.google.common.collect.RegularImmutableList:
    int offset -> offset
    int size -> size
    java.lang.Object[] array -> array
    int size() -> size
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> subListUnchecked
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.RegularImmutableMap -> com.google.common.collect.RegularImmutableMap:
    com.google.common.collect.ImmutableMapEntry[] entries -> entries
    com.google.common.collect.ImmutableMapEntry[] table -> table
    int mask -> mask
    double MAX_LOAD_FACTOR -> MAX_LOAD_FACTOR
    long serialVersionUID -> serialVersionUID
    void checkNoConflictInBucket(java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry) -> checkNoConflictInBucket
    com.google.common.collect.ImmutableMapEntry[] createEntryArray(int) -> createEntryArray
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableMapEntry[] access$100(com.google.common.collect.RegularImmutableMap) -> access$100
com.google.common.collect.RegularImmutableMap$1 -> com.google.common.collect.RegularImmutableMap$1:
com.google.common.collect.RegularImmutableMap$EntrySet -> com.google.common.collect.RegularImmutableMap$EntrySet:
    com.google.common.collect.RegularImmutableMap this$0 -> this$0
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableMap$NonTerminalMapEntry -> com.google.common.collect.RegularImmutableMap$NonTerminalMapEntry:
    com.google.common.collect.ImmutableMapEntry nextInKeyBucket -> nextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.RegularImmutableMultiset -> com.google.common.collect.RegularImmutableMultiset:
    com.google.common.collect.ImmutableMap map -> map
    int size -> size
    boolean isPartialView() -> isPartialView
    int count(java.lang.Object) -> count
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    int hashCode() -> hashCode
    java.util.Set elementSet() -> elementSet
com.google.common.collect.RegularImmutableSet -> com.google.common.collect.RegularImmutableSet:
    java.lang.Object[] elements -> elements
    java.lang.Object[] table -> table
    int mask -> mask
    int hashCode -> hashCode
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isPartialView() -> isPartialView
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableSortedMap -> com.google.common.collect.RegularImmutableSortedMap:
    com.google.common.collect.RegularImmutableSortedSet keySet -> keySet
    com.google.common.collect.ImmutableList valueList -> valueList
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSortedSet keySet() -> keySet
    com.google.common.collect.ImmutableCollection values() -> values
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSortedMap getSubMap(int,int) -> getSubMap
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> headMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> tailMap
    com.google.common.collect.ImmutableSortedMap createDescendingMap() -> createDescendingMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.ImmutableSet keySet() -> keySet
    com.google.common.collect.ImmutableList access$100(com.google.common.collect.RegularImmutableSortedMap) -> access$100
com.google.common.collect.RegularImmutableSortedMap$1 -> com.google.common.collect.RegularImmutableSortedMap$1:
com.google.common.collect.RegularImmutableSortedMap$EntrySet -> com.google.common.collect.RegularImmutableSortedMap$EntrySet:
    com.google.common.collect.RegularImmutableSortedMap this$0 -> this$0
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    com.google.common.collect.ImmutableMap map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableSortedMap$EntrySet$1 -> com.google.common.collect.RegularImmutableSortedMap$EntrySet$1:
    com.google.common.collect.ImmutableList keyList -> keyList
    com.google.common.collect.RegularImmutableSortedMap$EntrySet this$1 -> this$1
    java.util.Map$Entry get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.RegularImmutableSortedMultiset -> com.google.common.collect.RegularImmutableSortedMultiset:
    com.google.common.collect.RegularImmutableSortedSet elementSet -> elementSet
    int[] counts -> counts
    long[] cumulativeCounts -> cumulativeCounts
    int offset -> offset
    int length -> length
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    int count(java.lang.Object) -> count
    int size() -> size
    com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.ImmutableSortedMultiset getSubMultiset(int,int) -> getSubMultiset
    boolean isPartialView() -> isPartialView
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    java.util.NavigableSet elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
    java.util.Set elementSet() -> elementSet
com.google.common.collect.RegularImmutableSortedSet -> com.google.common.collect.RegularImmutableSortedSet:
    com.google.common.collect.ImmutableList elements -> elements
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    boolean isEmpty() -> isEmpty
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    int unsafeBinarySearch(java.lang.Object) -> unsafeBinarySearch
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    int headIndex(java.lang.Object,boolean) -> headIndex
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    int tailIndex(java.lang.Object,boolean) -> tailIndex
    java.util.Comparator unsafeComparator() -> unsafeComparator
    com.google.common.collect.ImmutableSortedSet getSubSet(int,int) -> getSubSet
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableTable -> com.google.common.collect.RegularImmutableTable:
    com.google.common.collect.Table$Cell getCell(int) -> getCell
    com.google.common.collect.ImmutableSet createCellSet() -> createCellSet
    java.lang.Object getValue(int) -> getValue
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    com.google.common.collect.RegularImmutableTable forCells(java.util.List,java.util.Comparator,java.util.Comparator) -> forCells
    com.google.common.collect.RegularImmutableTable forCells(java.lang.Iterable) -> forCells
    com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator) -> forCellsInternal
    java.util.Collection createValues() -> createValues
    java.util.Set createCellSet() -> createCellSet
com.google.common.collect.RegularImmutableTable$1 -> com.google.common.collect.RegularImmutableTable$1:
    java.util.Comparator val$rowComparator -> val$rowComparator
    java.util.Comparator val$columnComparator -> val$columnComparator
    int compare(com.google.common.collect.Table$Cell,com.google.common.collect.Table$Cell) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.RegularImmutableTable$CellSet -> com.google.common.collect.RegularImmutableTable$CellSet:
    com.google.common.collect.RegularImmutableTable this$0 -> this$0
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableTable$CellSet$1 -> com.google.common.collect.RegularImmutableTable$CellSet$1:
    com.google.common.collect.RegularImmutableTable$CellSet this$1 -> this$1
    com.google.common.collect.Table$Cell get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.RegularImmutableTable$Values -> com.google.common.collect.RegularImmutableTable$Values:
    com.google.common.collect.RegularImmutableTable this$0 -> this$0
    int size() -> size
    java.lang.Object get(int) -> get
    boolean isPartialView() -> isPartialView
com.google.common.collect.ReverseNaturalOrdering -> com.google.common.collect.ReverseNaturalOrdering:
    com.google.common.collect.ReverseNaturalOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable) -> min
    java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> min
    java.lang.Comparable min(java.util.Iterator) -> min
    java.lang.Comparable min(java.lang.Iterable) -> min
    java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable) -> max
    java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> max
    java.lang.Comparable max(java.util.Iterator) -> max
    java.lang.Comparable max(java.lang.Iterable) -> max
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object min(java.util.Iterator) -> min
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.ReverseOrdering -> com.google.common.collect.ReverseOrdering:
    com.google.common.collect.Ordering forwardOrder -> forwardOrder
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object min(java.util.Iterator) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.collect.RowSortedTable -> com.google.common.collect.RowSortedTable:
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.SortedMap rowMap() -> rowMap
com.google.common.collect.Serialization -> com.google.common.collect.Serialization:
    int readCount(java.io.ObjectInputStream) -> readCount
    void writeMap(java.util.Map,java.io.ObjectOutputStream) -> writeMap
    void populateMap(java.util.Map,java.io.ObjectInputStream) -> populateMap
    void populateMap(java.util.Map,java.io.ObjectInputStream,int) -> populateMap
    void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream) -> writeMultiset
    void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream) -> populateMultiset
    void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int) -> populateMultiset
    void writeMultimap(com.google.common.collect.Multimap,java.io.ObjectOutputStream) -> writeMultimap
    void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream) -> populateMultimap
    void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int) -> populateMultimap
    com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String) -> getFieldSetter
com.google.common.collect.Serialization$1 -> com.google.common.collect.Serialization$1:
com.google.common.collect.Serialization$FieldSetter -> com.google.common.collect.Serialization$FieldSetter:
    java.lang.reflect.Field field -> field
    void set(java.lang.Object,java.lang.Object) -> set
    void set(java.lang.Object,int) -> set
com.google.common.collect.SetMultimap -> com.google.common.collect.SetMultimap:
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.Sets -> com.google.common.collect.Sets:
    com.google.common.collect.ImmutableSet immutableEnumSet(java.lang.Enum,java.lang.Enum[]) -> immutableEnumSet
    com.google.common.collect.ImmutableSet immutableEnumSet(java.lang.Iterable) -> immutableEnumSet
    java.util.EnumSet newEnumSet(java.lang.Iterable,java.lang.Class) -> newEnumSet
    java.util.HashSet newHashSet() -> newHashSet
    java.util.HashSet newHashSet(java.lang.Object[]) -> newHashSet
    java.util.HashSet newHashSetWithExpectedSize(int) -> newHashSetWithExpectedSize
    java.util.HashSet newHashSet(java.lang.Iterable) -> newHashSet
    java.util.HashSet newHashSet(java.util.Iterator) -> newHashSet
    java.util.Set newConcurrentHashSet() -> newConcurrentHashSet
    java.util.Set newConcurrentHashSet(java.lang.Iterable) -> newConcurrentHashSet
    java.util.LinkedHashSet newLinkedHashSet() -> newLinkedHashSet
    java.util.LinkedHashSet newLinkedHashSetWithExpectedSize(int) -> newLinkedHashSetWithExpectedSize
    java.util.LinkedHashSet newLinkedHashSet(java.lang.Iterable) -> newLinkedHashSet
    java.util.TreeSet newTreeSet() -> newTreeSet
    java.util.TreeSet newTreeSet(java.lang.Iterable) -> newTreeSet
    java.util.TreeSet newTreeSet(java.util.Comparator) -> newTreeSet
    java.util.Set newIdentityHashSet() -> newIdentityHashSet
    java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet() -> newCopyOnWriteArraySet
    java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet(java.lang.Iterable) -> newCopyOnWriteArraySet
    java.util.EnumSet complementOf(java.util.Collection) -> complementOf
    java.util.EnumSet complementOf(java.util.Collection,java.lang.Class) -> complementOf
    java.util.EnumSet makeComplementByHand(java.util.Collection,java.lang.Class) -> makeComplementByHand
    java.util.Set newSetFromMap(java.util.Map) -> newSetFromMap
    com.google.common.collect.Sets$SetView union(java.util.Set,java.util.Set) -> union
    com.google.common.collect.Sets$SetView intersection(java.util.Set,java.util.Set) -> intersection
    com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set) -> difference
    com.google.common.collect.Sets$SetView symmetricDifference(java.util.Set,java.util.Set) -> symmetricDifference
    java.util.Set filter(java.util.Set,com.google.common.base.Predicate) -> filter
    java.util.SortedSet filter(java.util.SortedSet,com.google.common.base.Predicate) -> filter
    java.util.SortedSet filterSortedIgnoreNavigable(java.util.SortedSet,com.google.common.base.Predicate) -> filterSortedIgnoreNavigable
    java.util.NavigableSet filter(java.util.NavigableSet,com.google.common.base.Predicate) -> filter
    java.util.Set cartesianProduct(java.util.List) -> cartesianProduct
    java.util.Set cartesianProduct(java.util.Set[]) -> cartesianProduct
    java.util.Set powerSet(java.util.Set) -> powerSet
    int hashCodeImpl(java.util.Set) -> hashCodeImpl
    boolean equalsImpl(java.util.Set,java.lang.Object) -> equalsImpl
    java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet) -> unmodifiableNavigableSet
    java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet) -> synchronizedNavigableSet
    boolean removeAllImpl(java.util.Set,java.util.Iterator) -> removeAllImpl
    boolean removeAllImpl(java.util.Set,java.util.Collection) -> removeAllImpl
com.google.common.collect.Sets$1 -> com.google.common.collect.Sets$1:
    java.util.Set val$set1 -> val$set1
    java.util.Set val$set2minus1 -> val$set2minus1
    java.util.Set val$set2 -> val$set2
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.util.Set copyInto(java.util.Set) -> copyInto
    com.google.common.collect.ImmutableSet immutableCopy() -> immutableCopy
com.google.common.collect.Sets$2 -> com.google.common.collect.Sets$2:
    java.util.Set val$set1 -> val$set1
    com.google.common.base.Predicate val$inSet2 -> val$inSet2
    java.util.Set val$set2 -> val$set2
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
com.google.common.collect.Sets$3 -> com.google.common.collect.Sets$3:
    java.util.Set val$set1 -> val$set1
    com.google.common.base.Predicate val$notInSet2 -> val$notInSet2
    java.util.Set val$set2 -> val$set2
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
com.google.common.collect.Sets$CartesianSet -> com.google.common.collect.Sets$CartesianSet:
    com.google.common.collect.ImmutableList axes -> axes
    com.google.common.collect.CartesianList delegate -> delegate
    java.util.Set create(java.util.List) -> create
    java.util.Collection delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Sets$CartesianSet$1 -> com.google.common.collect.Sets$CartesianSet$1:
    com.google.common.collect.ImmutableList val$axes -> val$axes
    int size() -> size
    java.util.List get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.Sets$DescendingSet -> com.google.common.collect.Sets$DescendingSet:
    java.util.NavigableSet forward -> forward
    java.util.NavigableSet delegate() -> delegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Ordering reverse(java.util.Comparator) -> reverse
    java.lang.Object first() -> first
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.lang.Object last() -> last
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.String toString() -> toString
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Sets$FilteredNavigableSet -> com.google.common.collect.Sets$FilteredNavigableSet:
    java.util.NavigableSet unfiltered() -> unfiltered
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.lang.Object last() -> last
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
com.google.common.collect.Sets$FilteredSet -> com.google.common.collect.Sets$FilteredSet:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Sets$FilteredSortedSet -> com.google.common.collect.Sets$FilteredSortedSet:
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
com.google.common.collect.Sets$ImprovedAbstractSet -> com.google.common.collect.Sets$ImprovedAbstractSet:
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Sets$PowerSet -> com.google.common.collect.Sets$PowerSet:
    com.google.common.collect.ImmutableMap inputSet -> inputSet
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Sets$PowerSet$1 -> com.google.common.collect.Sets$PowerSet$1:
    com.google.common.collect.Sets$PowerSet this$0 -> this$0
    java.util.Set get(int) -> get
    java.lang.Object get(int) -> get
com.google.common.collect.Sets$SetView -> com.google.common.collect.Sets$SetView:
    com.google.common.collect.ImmutableSet immutableCopy() -> immutableCopy
    java.util.Set copyInto(java.util.Set) -> copyInto
com.google.common.collect.Sets$SubSet -> com.google.common.collect.Sets$SubSet:
    com.google.common.collect.ImmutableMap inputSet -> inputSet
    int mask -> mask
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableMap access$100(com.google.common.collect.Sets$SubSet) -> access$100
    int access$200(com.google.common.collect.Sets$SubSet) -> access$200
com.google.common.collect.Sets$SubSet$1 -> com.google.common.collect.Sets$SubSet$1:
    com.google.common.collect.ImmutableList elements -> elements
    int remainingSetBits -> remainingSetBits
    com.google.common.collect.Sets$SubSet this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Sets$UnmodifiableNavigableSet -> com.google.common.collect.Sets$UnmodifiableNavigableSet:
    java.util.NavigableSet delegate -> delegate
    com.google.common.collect.Sets$UnmodifiableNavigableSet descendingSet -> descendingSet
    long serialVersionUID -> serialVersionUID
    java.util.SortedSet delegate() -> delegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.SingletonImmutableBiMap -> com.google.common.collect.SingletonImmutableBiMap:
    java.lang.Object singleKey -> singleKey
    java.lang.Object singleValue -> singleValue
    com.google.common.collect.ImmutableBiMap inverse -> inverse
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.BiMap inverse() -> inverse
com.google.common.collect.SingletonImmutableList -> com.google.common.collect.SingletonImmutableList:
    java.lang.Object element -> element
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    int size() -> size
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    com.google.common.collect.ImmutableList reverse() -> reverse
    boolean contains(java.lang.Object) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isEmpty() -> isEmpty
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SingletonImmutableSet -> com.google.common.collect.SingletonImmutableSet:
    java.lang.Object element -> element
    int cachedHashCode -> cachedHashCode
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SingletonImmutableTable -> com.google.common.collect.SingletonImmutableTable:
    java.lang.Object singleRowKey -> singleRowKey
    java.lang.Object singleColumnKey -> singleColumnKey
    java.lang.Object singleValue -> singleValue
    com.google.common.collect.ImmutableMap column(java.lang.Object) -> column
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    int size() -> size
    com.google.common.collect.ImmutableSet createCellSet() -> createCellSet
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    java.util.Collection createValues() -> createValues
    java.util.Set createCellSet() -> createCellSet
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    java.util.Map column(java.lang.Object) -> column
com.google.common.collect.SortedIterable -> com.google.common.collect.SortedIterable:
    java.util.Comparator comparator() -> comparator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SortedIterables -> com.google.common.collect.SortedIterables:
    boolean hasSameComparator(java.util.Comparator,java.lang.Iterable) -> hasSameComparator
    java.util.Comparator comparator(java.util.SortedSet) -> comparator
com.google.common.collect.SortedLists -> com.google.common.collect.SortedLists:
    int binarySearch(java.util.List,java.lang.Comparable,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,com.google.common.base.Function,java.lang.Comparable,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
com.google.common.collect.SortedLists$1 -> com.google.common.collect.SortedLists$1:
com.google.common.collect.SortedLists$KeyAbsentBehavior -> com.google.common.collect.SortedLists$KeyAbsentBehavior:
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_LOWER -> NEXT_LOWER
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER -> NEXT_HIGHER
    com.google.common.collect.SortedLists$KeyAbsentBehavior INVERTED_INSERTION_INDEX -> INVERTED_INSERTION_INDEX
    com.google.common.collect.SortedLists$KeyAbsentBehavior[] $VALUES -> $VALUES
    com.google.common.collect.SortedLists$KeyAbsentBehavior[] values() -> values
    com.google.common.collect.SortedLists$KeyAbsentBehavior valueOf(java.lang.String) -> valueOf
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyAbsentBehavior$1 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$1:
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyAbsentBehavior$2 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$2:
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyAbsentBehavior$3 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$3:
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior -> com.google.common.collect.SortedLists$KeyPresentBehavior:
    com.google.common.collect.SortedLists$KeyPresentBehavior ANY_PRESENT -> ANY_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_PRESENT -> LAST_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_PRESENT -> FIRST_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_AFTER -> FIRST_AFTER
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_BEFORE -> LAST_BEFORE
    com.google.common.collect.SortedLists$KeyPresentBehavior[] $VALUES -> $VALUES
    com.google.common.collect.SortedLists$KeyPresentBehavior[] values() -> values
    com.google.common.collect.SortedLists$KeyPresentBehavior valueOf(java.lang.String) -> valueOf
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$1 -> com.google.common.collect.SortedLists$KeyPresentBehavior$1:
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$2 -> com.google.common.collect.SortedLists$KeyPresentBehavior$2:
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$3 -> com.google.common.collect.SortedLists$KeyPresentBehavior$3:
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$4 -> com.google.common.collect.SortedLists$KeyPresentBehavior$4:
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$5 -> com.google.common.collect.SortedLists$KeyPresentBehavior$5:
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedMapDifference -> com.google.common.collect.SortedMapDifference:
    java.util.SortedMap entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.SortedMap entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.SortedMap entriesInCommon() -> entriesInCommon
    java.util.SortedMap entriesDiffering() -> entriesDiffering
com.google.common.collect.SortedMultiset -> com.google.common.collect.SortedMultiset:
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableSet elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
com.google.common.collect.SortedMultisetBridge -> com.google.common.collect.SortedMultisetBridge:
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.SortedMultisets -> com.google.common.collect.SortedMultisets:
    java.lang.Object getElementOrThrow(com.google.common.collect.Multiset$Entry) -> getElementOrThrow
    java.lang.Object getElementOrNull(com.google.common.collect.Multiset$Entry) -> getElementOrNull
    java.lang.Object access$000(com.google.common.collect.Multiset$Entry) -> access$000
    java.lang.Object access$100(com.google.common.collect.Multiset$Entry) -> access$100
com.google.common.collect.SortedMultisets$ElementSet -> com.google.common.collect.SortedMultisets$ElementSet:
    com.google.common.collect.SortedMultiset multiset -> multiset
    com.google.common.collect.SortedMultiset multiset() -> multiset
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    com.google.common.collect.Multiset multiset() -> multiset
com.google.common.collect.SortedMultisets$NavigableElementSet -> com.google.common.collect.SortedMultisets$NavigableElementSet:
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
com.google.common.collect.SortedSetMultimap -> com.google.common.collect.SortedSetMultimap:
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    java.util.Comparator valueComparator() -> valueComparator
com.google.common.collect.SparseImmutableTable -> com.google.common.collect.SparseImmutableTable:
    com.google.common.collect.ImmutableMap rowMap -> rowMap
    com.google.common.collect.ImmutableMap columnMap -> columnMap
    int[] iterationOrderRow -> iterationOrderRow
    int[] iterationOrderColumn -> iterationOrderColumn
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    int size() -> size
    com.google.common.collect.Table$Cell getCell(int) -> getCell
    java.lang.Object getValue(int) -> getValue
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
com.google.common.collect.StandardRowSortedTable -> com.google.common.collect.StandardRowSortedTable:
    long serialVersionUID -> serialVersionUID
    java.util.SortedMap sortedBackingMap() -> sortedBackingMap
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.SortedMap rowMap() -> rowMap
    java.util.SortedMap createRowMap() -> createRowMap
    java.util.Map createRowMap() -> createRowMap
    java.util.Map rowMap() -> rowMap
    java.util.Set rowKeySet() -> rowKeySet
    java.util.SortedMap access$100(com.google.common.collect.StandardRowSortedTable) -> access$100
com.google.common.collect.StandardRowSortedTable$1 -> com.google.common.collect.StandardRowSortedTable$1:
com.google.common.collect.StandardRowSortedTable$RowSortedMap -> com.google.common.collect.StandardRowSortedTable$RowSortedMap:
    com.google.common.collect.StandardRowSortedTable this$0 -> this$0
    java.util.SortedSet keySet() -> keySet
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Set createKeySet() -> createKeySet
    java.util.Set keySet() -> keySet
com.google.common.collect.StandardTable -> com.google.common.collect.StandardTable:
    java.util.Map backingMap -> backingMap
    com.google.common.base.Supplier factory -> factory
    java.util.Set columnKeySet -> columnKeySet
    java.util.Map rowMap -> rowMap
    com.google.common.collect.StandardTable$ColumnMap columnMap -> columnMap
    long serialVersionUID -> serialVersionUID
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Map getOrCreate(java.lang.Object) -> getOrCreate
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map removeColumn(java.lang.Object) -> removeColumn
    boolean containsMapping(java.lang.Object,java.lang.Object,java.lang.Object) -> containsMapping
    boolean removeMapping(java.lang.Object,java.lang.Object,java.lang.Object) -> removeMapping
    java.util.Set cellSet() -> cellSet
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Map row(java.lang.Object) -> row
    java.util.Map column(java.lang.Object) -> column
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Iterator createColumnKeyIterator() -> createColumnKeyIterator
    java.util.Collection values() -> values
    java.util.Map rowMap() -> rowMap
    java.util.Map createRowMap() -> createRowMap
    java.util.Map columnMap() -> columnMap
    boolean access$400(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object) -> access$400
    boolean access$500(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object) -> access$500
    java.util.Map access$1000(com.google.common.collect.StandardTable,java.lang.Object) -> access$1000
com.google.common.collect.StandardTable$1 -> com.google.common.collect.StandardTable$1:
com.google.common.collect.StandardTable$CellIterator -> com.google.common.collect.StandardTable$CellIterator:
    java.util.Iterator rowIterator -> rowIterator
    java.util.Map$Entry rowEntry -> rowEntry
    java.util.Iterator columnIterator -> columnIterator
    com.google.common.collect.StandardTable this$0 -> this$0
    boolean hasNext() -> hasNext
    com.google.common.collect.Table$Cell next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.StandardTable$Column -> com.google.common.collect.StandardTable$Column:
    java.lang.Object columnKey -> columnKey
    com.google.common.collect.StandardTable this$0 -> this$0
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object remove(java.lang.Object) -> remove
    boolean removeFromColumnIf(com.google.common.base.Predicate) -> removeFromColumnIf
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection createValues() -> createValues
com.google.common.collect.StandardTable$Column$EntrySet -> com.google.common.collect.StandardTable$Column$EntrySet:
    com.google.common.collect.StandardTable$Column this$1 -> this$1
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$Column$EntrySetIterator -> com.google.common.collect.StandardTable$Column$EntrySetIterator:
    java.util.Iterator iterator -> iterator
    com.google.common.collect.StandardTable$Column this$1 -> this$1
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.StandardTable$Column$EntrySetIterator$1 -> com.google.common.collect.StandardTable$Column$EntrySetIterator$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.StandardTable$Column$EntrySetIterator this$2 -> this$2
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.StandardTable$Column$KeySet -> com.google.common.collect.StandardTable$Column$KeySet:
    com.google.common.collect.StandardTable$Column this$1 -> this$1
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$Column$Values -> com.google.common.collect.StandardTable$Column$Values:
    com.google.common.collect.StandardTable$Column this$1 -> this$1
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$ColumnKeyIterator -> com.google.common.collect.StandardTable$ColumnKeyIterator:
    java.util.Map seen -> seen
    java.util.Iterator mapIterator -> mapIterator
    java.util.Iterator entryIterator -> entryIterator
    com.google.common.collect.StandardTable this$0 -> this$0
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.StandardTable$ColumnKeySet -> com.google.common.collect.StandardTable$ColumnKeySet:
    com.google.common.collect.StandardTable this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean contains(java.lang.Object) -> contains
com.google.common.collect.StandardTable$ColumnMap -> com.google.common.collect.StandardTable$ColumnMap:
    com.google.common.collect.StandardTable this$0 -> this$0
    java.util.Map get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Map remove(java.lang.Object) -> remove
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set keySet() -> keySet
    java.util.Collection createValues() -> createValues
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet -> com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:
    com.google.common.collect.StandardTable$ColumnMap this$1 -> this$1
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1 -> com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1:
    com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet this$2 -> this$2
    java.util.Map apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues -> com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:
    com.google.common.collect.StandardTable$ColumnMap this$1 -> this$1
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$Row -> com.google.common.collect.StandardTable$Row:
    java.lang.Object rowKey -> rowKey
    java.util.Map backingRowMap -> backingRowMap
    com.google.common.collect.StandardTable this$0 -> this$0
    java.util.Map backingRowMap() -> backingRowMap
    java.util.Map computeBackingRowMap() -> computeBackingRowMap
    void maintainEmptyInvariant() -> maintainEmptyInvariant
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Set createEntrySet() -> createEntrySet
com.google.common.collect.StandardTable$Row$RowEntrySet -> com.google.common.collect.StandardTable$Row$RowEntrySet:
    com.google.common.collect.StandardTable$Row this$1 -> this$1
    java.util.Map map() -> map
    int size() -> size
    java.util.Iterator iterator() -> iterator
com.google.common.collect.StandardTable$Row$RowEntrySet$1 -> com.google.common.collect.StandardTable$Row$RowEntrySet$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.StandardTable$Row$RowEntrySet this$2 -> this$2
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.StandardTable$Row$RowEntrySet$1$1 -> com.google.common.collect.StandardTable$Row$RowEntrySet$1$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.StandardTable$Row$RowEntrySet$1 this$3 -> this$3
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    java.lang.Object delegate() -> delegate
com.google.common.collect.StandardTable$RowMap -> com.google.common.collect.StandardTable$RowMap:
    com.google.common.collect.StandardTable this$0 -> this$0
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Map get(java.lang.Object) -> get
    java.util.Map remove(java.lang.Object) -> remove
    java.util.Set createEntrySet() -> createEntrySet
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.StandardTable$RowMap$EntrySet -> com.google.common.collect.StandardTable$RowMap$EntrySet:
    com.google.common.collect.StandardTable$RowMap this$1 -> this$1
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.StandardTable$RowMap$EntrySet$1 -> com.google.common.collect.StandardTable$RowMap$EntrySet$1:
    com.google.common.collect.StandardTable$RowMap$EntrySet this$2 -> this$2
    java.util.Map apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.StandardTable$TableSet -> com.google.common.collect.StandardTable$TableSet:
    com.google.common.collect.StandardTable this$0 -> this$0
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.google.common.collect.Synchronized -> com.google.common.collect.Synchronized:
    java.util.Collection collection(java.util.Collection,java.lang.Object) -> collection
    java.util.Set set(java.util.Set,java.lang.Object) -> set
    java.util.SortedSet sortedSet(java.util.SortedSet,java.lang.Object) -> sortedSet
    java.util.List list(java.util.List,java.lang.Object) -> list
    com.google.common.collect.Multiset multiset(com.google.common.collect.Multiset,java.lang.Object) -> multiset
    com.google.common.collect.Multimap multimap(com.google.common.collect.Multimap,java.lang.Object) -> multimap
    com.google.common.collect.ListMultimap listMultimap(com.google.common.collect.ListMultimap,java.lang.Object) -> listMultimap
    com.google.common.collect.SetMultimap setMultimap(com.google.common.collect.SetMultimap,java.lang.Object) -> setMultimap
    com.google.common.collect.SortedSetMultimap sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object) -> sortedSetMultimap
    java.util.Collection typePreservingCollection(java.util.Collection,java.lang.Object) -> typePreservingCollection
    java.util.Set typePreservingSet(java.util.Set,java.lang.Object) -> typePreservingSet
    java.util.Map map(java.util.Map,java.lang.Object) -> map
    java.util.SortedMap sortedMap(java.util.SortedMap,java.lang.Object) -> sortedMap
    com.google.common.collect.BiMap biMap(com.google.common.collect.BiMap,java.lang.Object) -> biMap
    java.util.NavigableSet navigableSet(java.util.NavigableSet,java.lang.Object) -> navigableSet
    java.util.NavigableSet navigableSet(java.util.NavigableSet) -> navigableSet
    java.util.NavigableMap navigableMap(java.util.NavigableMap) -> navigableMap
    java.util.NavigableMap navigableMap(java.util.NavigableMap,java.lang.Object) -> navigableMap
    java.util.Map$Entry nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object) -> nullableSynchronizedEntry
    java.util.Queue queue(java.util.Queue,java.lang.Object) -> queue
    java.util.Deque deque(java.util.Deque,java.lang.Object) -> deque
    java.util.SortedSet access$100(java.util.SortedSet,java.lang.Object) -> access$100
    java.util.List access$200(java.util.List,java.lang.Object) -> access$200
    java.util.Set access$300(java.util.Set,java.lang.Object) -> access$300
    java.util.Collection access$400(java.util.Collection,java.lang.Object) -> access$400
    java.util.Collection access$500(java.util.Collection,java.lang.Object) -> access$500
    java.util.Map$Entry access$700(java.util.Map$Entry,java.lang.Object) -> access$700
com.google.common.collect.Synchronized$1 -> com.google.common.collect.Synchronized$1:
com.google.common.collect.Synchronized$SynchronizedAsMap -> com.google.common.collect.Synchronized$SynchronizedAsMap:
    java.util.Set asMapEntrySet -> asMapEntrySet
    java.util.Collection asMapValues -> asMapValues
    long serialVersionUID -> serialVersionUID
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.Synchronized$SynchronizedAsMapEntries -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries:
    long serialVersionUID -> serialVersionUID
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries this$0 -> this$0
    java.util.Iterator delegate() -> delegate
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 this$1 -> this$1
    java.util.Map$Entry delegate() -> delegate
    java.util.Collection getValue() -> getValue
    java.lang.Object getValue() -> getValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedAsMapValues -> com.google.common.collect.Synchronized$SynchronizedAsMapValues:
    long serialVersionUID -> serialVersionUID
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Synchronized$SynchronizedAsMapValues$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapValues$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.Synchronized$SynchronizedAsMapValues this$0 -> this$0
    java.util.Iterator delegate() -> delegate
    java.util.Collection next() -> next
    java.lang.Object next() -> next
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedBiMap -> com.google.common.collect.Synchronized$SynchronizedBiMap:
    java.util.Set valueSet -> valueSet
    com.google.common.collect.BiMap inverse -> inverse
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.BiMap delegate() -> delegate
    java.util.Set values() -> values
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Collection values() -> values
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedCollection -> com.google.common.collect.Synchronized$SynchronizedCollection:
    long serialVersionUID -> serialVersionUID
    java.util.Collection delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedDeque -> com.google.common.collect.Synchronized$SynchronizedDeque:
    long serialVersionUID -> serialVersionUID
    java.util.Deque delegate() -> delegate
    void addFirst(java.lang.Object) -> addFirst
    void addLast(java.lang.Object) -> addLast
    boolean offerFirst(java.lang.Object) -> offerFirst
    boolean offerLast(java.lang.Object) -> offerLast
    java.lang.Object removeFirst() -> removeFirst
    java.lang.Object removeLast() -> removeLast
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object getFirst() -> getFirst
    java.lang.Object getLast() -> getLast
    java.lang.Object peekFirst() -> peekFirst
    java.lang.Object peekLast() -> peekLast
    boolean removeFirstOccurrence(java.lang.Object) -> removeFirstOccurrence
    boolean removeLastOccurrence(java.lang.Object) -> removeLastOccurrence
    void push(java.lang.Object) -> push
    java.lang.Object pop() -> pop
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedEntry -> com.google.common.collect.Synchronized$SynchronizedEntry:
    long serialVersionUID -> serialVersionUID
    java.util.Map$Entry delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedList -> com.google.common.collect.Synchronized$SynchronizedList:
    long serialVersionUID -> serialVersionUID
    java.util.List delegate() -> delegate
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedListMultimap -> com.google.common.collect.Synchronized$SynchronizedListMultimap:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ListMultimap delegate() -> delegate
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMap -> com.google.common.collect.Synchronized$SynchronizedMap:
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    java.util.Map delegate() -> delegate
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    java.lang.Object get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.util.Set keySet() -> keySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    int size() -> size
    java.util.Collection values() -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMultimap -> com.google.common.collect.Synchronized$SynchronizedMultimap:
    java.util.Set keySet -> keySet
    java.util.Collection valuesCollection -> valuesCollection
    java.util.Collection entries -> entries
    java.util.Map asMap -> asMap
    com.google.common.collect.Multiset keys -> keys
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.Multimap delegate() -> delegate
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    java.util.Collection get(java.lang.Object) -> get
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Collection entries() -> entries
    java.util.Map asMap() -> asMap
    com.google.common.collect.Multiset keys() -> keys
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMultiset -> com.google.common.collect.Synchronized$SynchronizedMultiset:
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.Multiset delegate() -> delegate
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedNavigableMap -> com.google.common.collect.Synchronized$SynchronizedNavigableMap:
    java.util.NavigableSet descendingKeySet -> descendingKeySet
    java.util.NavigableMap descendingMap -> descendingMap
    java.util.NavigableSet navigableKeySet -> navigableKeySet
    long serialVersionUID -> serialVersionUID
    java.util.NavigableMap delegate() -> delegate
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap delegate() -> delegate
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedNavigableSet -> com.google.common.collect.Synchronized$SynchronizedNavigableSet:
    java.util.NavigableSet descendingSet -> descendingSet
    long serialVersionUID -> serialVersionUID
    java.util.NavigableSet delegate() -> delegate
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
    java.lang.Object floor(java.lang.Object) -> floor
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedObject -> com.google.common.collect.Synchronized$SynchronizedObject:
    java.lang.Object delegate -> delegate
    java.lang.Object mutex -> mutex
    long serialVersionUID -> serialVersionUID
    java.lang.Object delegate() -> delegate
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
com.google.common.collect.Synchronized$SynchronizedQueue -> com.google.common.collect.Synchronized$SynchronizedQueue:
    long serialVersionUID -> serialVersionUID
    java.util.Queue delegate() -> delegate
    java.lang.Object element() -> element
    boolean offer(java.lang.Object) -> offer
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    java.lang.Object remove() -> remove
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedRandomAccessList -> com.google.common.collect.Synchronized$SynchronizedRandomAccessList:
    long serialVersionUID -> serialVersionUID
com.google.common.collect.Synchronized$SynchronizedSet -> com.google.common.collect.Synchronized$SynchronizedSet:
    long serialVersionUID -> serialVersionUID
    java.util.Set delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSetMultimap -> com.google.common.collect.Synchronized$SynchronizedSetMultimap:
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Collection entries() -> entries
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedMap -> com.google.common.collect.Synchronized$SynchronizedSortedMap:
    long serialVersionUID -> serialVersionUID
    java.util.SortedMap delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedSet -> com.google.common.collect.Synchronized$SynchronizedSortedSet:
    long serialVersionUID -> serialVersionUID
    java.util.SortedSet delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap -> com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Table -> com.google.common.collect.Table:
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Map column(java.lang.Object) -> column
    java.util.Set cellSet() -> cellSet
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Collection values() -> values
    java.util.Map rowMap() -> rowMap
    java.util.Map columnMap() -> columnMap
com.google.common.collect.Table$Cell -> com.google.common.collect.Table$Cell:
    java.lang.Object getRowKey() -> getRowKey
    java.lang.Object getColumnKey() -> getColumnKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Tables -> com.google.common.collect.Tables:
    com.google.common.base.Function UNMODIFIABLE_WRAPPER -> UNMODIFIABLE_WRAPPER
    com.google.common.collect.Table$Cell immutableCell(java.lang.Object,java.lang.Object,java.lang.Object) -> immutableCell
    com.google.common.collect.Table transpose(com.google.common.collect.Table) -> transpose
    com.google.common.collect.Table newCustomTable(java.util.Map,com.google.common.base.Supplier) -> newCustomTable
    com.google.common.collect.Table transformValues(com.google.common.collect.Table,com.google.common.base.Function) -> transformValues
    com.google.common.collect.Table unmodifiableTable(com.google.common.collect.Table) -> unmodifiableTable
    com.google.common.collect.RowSortedTable unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable) -> unmodifiableRowSortedTable
    com.google.common.base.Function unmodifiableWrapper() -> unmodifiableWrapper
    boolean equalsImpl(com.google.common.collect.Table,java.lang.Object) -> equalsImpl
    com.google.common.base.Function access$000() -> access$000
com.google.common.collect.Tables$1 -> com.google.common.collect.Tables$1:
    java.util.Map apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$AbstractCell -> com.google.common.collect.Tables$AbstractCell:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Tables$ImmutableCell -> com.google.common.collect.Tables$ImmutableCell:
    java.lang.Object rowKey -> rowKey
    java.lang.Object columnKey -> columnKey
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    java.lang.Object getRowKey() -> getRowKey
    java.lang.Object getColumnKey() -> getColumnKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.Tables$TransformedTable -> com.google.common.collect.Tables$TransformedTable:
    com.google.common.collect.Table fromTable -> fromTable
    com.google.common.base.Function function -> function
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    int size() -> size
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Map column(java.lang.Object) -> column
    com.google.common.base.Function cellFunction() -> cellFunction
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Collection createValues() -> createValues
    java.util.Map rowMap() -> rowMap
    java.util.Map columnMap() -> columnMap
com.google.common.collect.Tables$TransformedTable$1 -> com.google.common.collect.Tables$TransformedTable$1:
    com.google.common.collect.Tables$TransformedTable this$0 -> this$0
    com.google.common.collect.Table$Cell apply(com.google.common.collect.Table$Cell) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransformedTable$2 -> com.google.common.collect.Tables$TransformedTable$2:
    com.google.common.collect.Tables$TransformedTable this$0 -> this$0
    java.util.Map apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransformedTable$3 -> com.google.common.collect.Tables$TransformedTable$3:
    com.google.common.collect.Tables$TransformedTable this$0 -> this$0
    java.util.Map apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransposeTable -> com.google.common.collect.Tables$TransposeTable:
    com.google.common.collect.Table original -> original
    com.google.common.base.Function TRANSPOSE_CELL -> TRANSPOSE_CELL
    void clear() -> clear
    java.util.Map column(java.lang.Object) -> column
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Map columnMap() -> columnMap
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    int size() -> size
    java.util.Collection values() -> values
    java.util.Iterator cellIterator() -> cellIterator
com.google.common.collect.Tables$TransposeTable$1 -> com.google.common.collect.Tables$TransposeTable$1:
    com.google.common.collect.Table$Cell apply(com.google.common.collect.Table$Cell) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$UnmodifiableRowSortedMap -> com.google.common.collect.Tables$UnmodifiableRowSortedMap:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.RowSortedTable delegate() -> delegate
    java.util.SortedMap rowMap() -> rowMap
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    java.util.Set rowKeySet() -> rowKeySet
    com.google.common.collect.Table delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Tables$UnmodifiableTable -> com.google.common.collect.Tables$UnmodifiableTable:
    com.google.common.collect.Table delegate -> delegate
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.Table delegate() -> delegate
    java.util.Set cellSet() -> cellSet
    void clear() -> clear
    java.util.Map column(java.lang.Object) -> column
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Map columnMap() -> columnMap
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.TransformedIterator -> com.google.common.collect.TransformedIterator:
    java.util.Iterator backingIterator -> backingIterator
    java.lang.Object transform(java.lang.Object) -> transform
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.TransformedListIterator -> com.google.common.collect.TransformedListIterator:
    java.util.ListIterator backingIterator() -> backingIterator
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.TreeBasedTable -> com.google.common.collect.TreeBasedTable:
    java.util.Comparator columnComparator -> columnComparator
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.TreeBasedTable create() -> create
    com.google.common.collect.TreeBasedTable create(java.util.Comparator,java.util.Comparator) -> create
    com.google.common.collect.TreeBasedTable create(com.google.common.collect.TreeBasedTable) -> create
    java.util.Comparator rowComparator() -> rowComparator
    java.util.Comparator columnComparator() -> columnComparator
    java.util.SortedMap row(java.lang.Object) -> row
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.SortedMap rowMap() -> rowMap
    java.util.Iterator createColumnKeyIterator() -> createColumnKeyIterator
    java.util.Map rowMap() -> rowMap
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map row(java.lang.Object) -> row
    java.util.Map columnMap() -> columnMap
    java.util.Collection values() -> values
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Map column(java.lang.Object) -> column
    java.util.Set cellSet() -> cellSet
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void putAll(com.google.common.collect.Table) -> putAll
com.google.common.collect.TreeBasedTable$1 -> com.google.common.collect.TreeBasedTable$1:
    com.google.common.collect.TreeBasedTable this$0 -> this$0
    java.util.Iterator apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.TreeBasedTable$2 -> com.google.common.collect.TreeBasedTable$2:
    java.lang.Object lastValue -> lastValue
    java.util.Iterator val$merged -> val$merged
    java.util.Comparator val$comparator -> val$comparator
    com.google.common.collect.TreeBasedTable this$0 -> this$0
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeBasedTable$Factory -> com.google.common.collect.TreeBasedTable$Factory:
    java.util.Comparator comparator -> comparator
    long serialVersionUID -> serialVersionUID
    java.util.TreeMap get() -> get
    java.lang.Object get() -> get
com.google.common.collect.TreeBasedTable$TreeRow -> com.google.common.collect.TreeBasedTable$TreeRow:
    java.lang.Object lowerBound -> lowerBound
    java.lang.Object upperBound -> upperBound
    java.util.SortedMap wholeRow -> wholeRow
    com.google.common.collect.TreeBasedTable this$0 -> this$0
    java.util.SortedSet keySet() -> keySet
    java.util.Comparator comparator() -> comparator
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean rangeContains(java.lang.Object) -> rangeContains
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap wholeRow() -> wholeRow
    java.util.SortedMap backingRowMap() -> backingRowMap
    java.util.SortedMap computeBackingRowMap() -> computeBackingRowMap
    void maintainEmptyInvariant() -> maintainEmptyInvariant
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.util.Map computeBackingRowMap() -> computeBackingRowMap
    java.util.Map backingRowMap() -> backingRowMap
    java.util.Set keySet() -> keySet
com.google.common.collect.TreeMultimap -> com.google.common.collect.TreeMultimap:
    java.util.Comparator keyComparator -> keyComparator
    java.util.Comparator valueComparator -> valueComparator
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.TreeMultimap create() -> create
    com.google.common.collect.TreeMultimap create(java.util.Comparator,java.util.Comparator) -> create
    com.google.common.collect.TreeMultimap create(com.google.common.collect.Multimap) -> create
    java.util.SortedSet createCollection() -> createCollection
    java.util.Collection createCollection(java.lang.Object) -> createCollection
    java.util.Comparator keyComparator() -> keyComparator
    java.util.Comparator valueComparator() -> valueComparator
    java.util.NavigableMap backingMap() -> backingMap
    java.util.NavigableSet get(java.lang.Object) -> get
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    java.util.NavigableSet keySet() -> keySet
    java.util.NavigableSet createKeySet() -> createKeySet
    java.util.NavigableMap asMap() -> asMap
    java.util.NavigableMap createAsMap() -> createAsMap
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.SortedSet keySet() -> keySet
    java.util.SortedMap backingMap() -> backingMap
    java.util.SortedMap asMap() -> asMap
    java.util.Collection values() -> values
    java.util.Map asMap() -> asMap
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.Set get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    java.util.Collection get(java.lang.Object) -> get
    boolean equals(java.lang.Object) -> equals
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Set entries() -> entries
    java.util.Set createCollection() -> createCollection
    java.util.Map createAsMap() -> createAsMap
    java.util.Set createKeySet() -> createKeySet
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    java.util.Map backingMap() -> backingMap
    java.util.Collection createCollection() -> createCollection
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    com.google.common.collect.Multiset keys() -> keys
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isEmpty() -> isEmpty
com.google.common.collect.TreeMultiset -> com.google.common.collect.TreeMultiset:
    com.google.common.collect.TreeMultiset$Reference rootReference -> rootReference
    com.google.common.collect.GeneralRange range -> range
    com.google.common.collect.TreeMultiset$AvlNode header -> header
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.TreeMultiset create() -> create
    com.google.common.collect.TreeMultiset create(java.util.Comparator) -> create
    com.google.common.collect.TreeMultiset create(java.lang.Iterable) -> create
    long aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate) -> aggregateForEntries
    long aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode) -> aggregateBelowRange
    long aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode) -> aggregateAboveRange
    int size() -> size
    int distinctElements() -> distinctElements
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    com.google.common.collect.Multiset$Entry wrapEntry(com.google.common.collect.TreeMultiset$AvlNode) -> wrapEntry
    com.google.common.collect.TreeMultiset$AvlNode firstNode() -> firstNode
    com.google.common.collect.TreeMultiset$AvlNode lastNode() -> lastNode
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    int distinctElements(com.google.common.collect.TreeMultiset$AvlNode) -> distinctElements
    void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> successor
    void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> successor
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet elementSet() -> elementSet
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set entrySet() -> entrySet
    void clear() -> clear
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    boolean add(java.lang.Object) -> add
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    com.google.common.collect.TreeMultiset$AvlNode access$1200(com.google.common.collect.TreeMultiset) -> access$1200
    com.google.common.collect.GeneralRange access$1300(com.google.common.collect.TreeMultiset) -> access$1300
    com.google.common.collect.Multiset$Entry access$1400(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode) -> access$1400
    com.google.common.collect.TreeMultiset$AvlNode access$1500(com.google.common.collect.TreeMultiset) -> access$1500
    com.google.common.collect.TreeMultiset$AvlNode access$1600(com.google.common.collect.TreeMultiset) -> access$1600
    void access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$1700
    void access$1800(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$1800
com.google.common.collect.TreeMultiset$1 -> com.google.common.collect.TreeMultiset$1:
    com.google.common.collect.TreeMultiset$AvlNode val$baseEntry -> val$baseEntry
    com.google.common.collect.TreeMultiset this$0 -> this$0
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.TreeMultiset$2 -> com.google.common.collect.TreeMultiset$2:
    com.google.common.collect.TreeMultiset$AvlNode current -> current
    com.google.common.collect.Multiset$Entry prevEntry -> prevEntry
    com.google.common.collect.TreeMultiset this$0 -> this$0
    boolean hasNext() -> hasNext
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.TreeMultiset$3 -> com.google.common.collect.TreeMultiset$3:
    com.google.common.collect.TreeMultiset$AvlNode current -> current
    com.google.common.collect.Multiset$Entry prevEntry -> prevEntry
    com.google.common.collect.TreeMultiset this$0 -> this$0
    boolean hasNext() -> hasNext
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.TreeMultiset$4 -> com.google.common.collect.TreeMultiset$4:
    int[] $SwitchMap$com$google$common$collect$BoundType -> $SwitchMap$com$google$common$collect$BoundType
com.google.common.collect.TreeMultiset$Aggregate -> com.google.common.collect.TreeMultiset$Aggregate:
    com.google.common.collect.TreeMultiset$Aggregate SIZE -> SIZE
    com.google.common.collect.TreeMultiset$Aggregate DISTINCT -> DISTINCT
    com.google.common.collect.TreeMultiset$Aggregate[] $VALUES -> $VALUES
    com.google.common.collect.TreeMultiset$Aggregate[] values() -> values
    com.google.common.collect.TreeMultiset$Aggregate valueOf(java.lang.String) -> valueOf
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> nodeAggregate
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> treeAggregate
com.google.common.collect.TreeMultiset$Aggregate$1 -> com.google.common.collect.TreeMultiset$Aggregate$1:
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> nodeAggregate
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> treeAggregate
com.google.common.collect.TreeMultiset$Aggregate$2 -> com.google.common.collect.TreeMultiset$Aggregate$2:
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> nodeAggregate
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> treeAggregate
com.google.common.collect.TreeMultiset$AvlNode -> com.google.common.collect.TreeMultiset$AvlNode:
    java.lang.Object elem -> elem
    int elemCount -> elemCount
    int distinctElements -> distinctElements
    long totalCount -> totalCount
    int height -> height
    com.google.common.collect.TreeMultiset$AvlNode left -> left
    com.google.common.collect.TreeMultiset$AvlNode right -> right
    com.google.common.collect.TreeMultiset$AvlNode pred -> pred
    com.google.common.collect.TreeMultiset$AvlNode succ -> succ
    int count(java.util.Comparator,java.lang.Object) -> count
    com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int) -> addRightChild
    com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int) -> addLeftChild
    com.google.common.collect.TreeMultiset$AvlNode add(java.util.Comparator,java.lang.Object,int,int[]) -> add
    com.google.common.collect.TreeMultiset$AvlNode remove(java.util.Comparator,java.lang.Object,int,int[]) -> remove
    com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int[]) -> setCount
    com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int,int[]) -> setCount
    com.google.common.collect.TreeMultiset$AvlNode deleteMe() -> deleteMe
    com.google.common.collect.TreeMultiset$AvlNode removeMin(com.google.common.collect.TreeMultiset$AvlNode) -> removeMin
    com.google.common.collect.TreeMultiset$AvlNode removeMax(com.google.common.collect.TreeMultiset$AvlNode) -> removeMax
    void recomputeMultiset() -> recomputeMultiset
    void recomputeHeight() -> recomputeHeight
    void recompute() -> recompute
    com.google.common.collect.TreeMultiset$AvlNode rebalance() -> rebalance
    int balanceFactor() -> balanceFactor
    com.google.common.collect.TreeMultiset$AvlNode rotateLeft() -> rotateLeft
    com.google.common.collect.TreeMultiset$AvlNode rotateRight() -> rotateRight
    long totalCount(com.google.common.collect.TreeMultiset$AvlNode) -> totalCount
    int height(com.google.common.collect.TreeMultiset$AvlNode) -> height
    com.google.common.collect.TreeMultiset$AvlNode ceiling(java.util.Comparator,java.lang.Object) -> ceiling
    com.google.common.collect.TreeMultiset$AvlNode floor(java.util.Comparator,java.lang.Object) -> floor
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
    java.lang.String toString() -> toString
    int access$200(com.google.common.collect.TreeMultiset$AvlNode) -> access$200
    long access$300(com.google.common.collect.TreeMultiset$AvlNode) -> access$300
    int access$400(com.google.common.collect.TreeMultiset$AvlNode) -> access$400
    java.lang.Object access$500(com.google.common.collect.TreeMultiset$AvlNode) -> access$500
    com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode) -> access$600
    com.google.common.collect.TreeMultiset$AvlNode access$700(com.google.common.collect.TreeMultiset$AvlNode) -> access$700
    com.google.common.collect.TreeMultiset$AvlNode access$800(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object) -> access$800
    com.google.common.collect.TreeMultiset$AvlNode access$900(com.google.common.collect.TreeMultiset$AvlNode) -> access$900
    com.google.common.collect.TreeMultiset$AvlNode access$1000(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object) -> access$1000
    com.google.common.collect.TreeMultiset$AvlNode access$1100(com.google.common.collect.TreeMultiset$AvlNode) -> access$1100
    com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$902
    com.google.common.collect.TreeMultiset$AvlNode access$1102(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$1102
com.google.common.collect.TreeMultiset$Reference -> com.google.common.collect.TreeMultiset$Reference:
    java.lang.Object value -> value
    java.lang.Object get() -> get
    void checkAndSet(java.lang.Object,java.lang.Object) -> checkAndSet
com.google.common.collect.TreeRangeMap -> com.google.common.collect.TreeRangeMap:
    java.util.NavigableMap entriesByLowerBound -> entriesByLowerBound
    com.google.common.collect.RangeMap EMPTY_SUB_RANGE_MAP -> EMPTY_SUB_RANGE_MAP
    com.google.common.collect.TreeRangeMap create() -> create
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    com.google.common.collect.Range span() -> span
    void putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object) -> putRangeMapEntry
    void remove(com.google.common.collect.Range) -> remove
    java.util.Map asMapOfRanges() -> asMapOfRanges
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    com.google.common.collect.RangeMap emptySubRangeMap() -> emptySubRangeMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.NavigableMap access$100(com.google.common.collect.TreeRangeMap) -> access$100
    com.google.common.collect.RangeMap access$200(com.google.common.collect.TreeRangeMap) -> access$200
com.google.common.collect.TreeRangeMap$1 -> com.google.common.collect.TreeRangeMap$1:
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    java.util.Map asMapOfRanges() -> asMapOfRanges
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
com.google.common.collect.TreeRangeMap$AsMapOfRanges -> com.google.common.collect.TreeRangeMap$AsMapOfRanges:
    com.google.common.collect.TreeRangeMap this$0 -> this$0
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.util.Set entrySet() -> entrySet
com.google.common.collect.TreeRangeMap$AsMapOfRanges$1 -> com.google.common.collect.TreeRangeMap$AsMapOfRanges$1:
    com.google.common.collect.TreeRangeMap$AsMapOfRanges this$1 -> this$1
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.TreeRangeMap$RangeMapEntry -> com.google.common.collect.TreeRangeMap$RangeMapEntry:
    com.google.common.collect.Range range -> range
    java.lang.Object value -> value
    com.google.common.collect.Range getKey() -> getKey
    java.lang.Object getValue() -> getValue
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Cut getLowerBound() -> getLowerBound
    com.google.common.collect.Cut getUpperBound() -> getUpperBound
    java.lang.Object getKey() -> getKey
com.google.common.collect.TreeRangeMap$SubRangeMap -> com.google.common.collect.TreeRangeMap$SubRangeMap:
    com.google.common.collect.Range subRange -> subRange
    com.google.common.collect.TreeRangeMap this$0 -> this$0
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    java.util.Map asMapOfRanges() -> asMapOfRanges
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.common.collect.Range access$300(com.google.common.collect.TreeRangeMap$SubRangeMap) -> access$300
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:
    com.google.common.collect.TreeRangeMap$SubRangeMap this$1 -> this$1
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean removeEntryIf(com.google.common.base.Predicate) -> removeEntryIf
    java.util.Set keySet() -> keySet
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    boolean access$400(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,com.google.common.base.Predicate) -> access$400
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1 -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> this$2
    boolean remove(java.lang.Object) -> remove
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2 -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> this$2
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    boolean isEmpty() -> isEmpty
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2$1 -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2$1:
    java.util.Iterator val$backingItr -> val$backingItr
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2 this$3 -> this$3
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3 -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> this$2
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.TreeRangeSet -> com.google.common.collect.TreeRangeSet:
    java.util.NavigableMap rangesByLowerBound -> rangesByLowerBound
    java.util.Set asRanges -> asRanges
    com.google.common.collect.RangeSet complement -> complement
    com.google.common.collect.TreeRangeSet create() -> create
    com.google.common.collect.TreeRangeSet create(com.google.common.collect.RangeSet) -> create
    java.util.Set asRanges() -> asRanges
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    boolean encloses(com.google.common.collect.Range) -> encloses
    com.google.common.collect.Range rangeEnclosing(com.google.common.collect.Range) -> rangeEnclosing
    com.google.common.collect.Range span() -> span
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    void replaceRangeWithSameLowerBound(com.google.common.collect.Range) -> replaceRangeWithSameLowerBound
    com.google.common.collect.RangeSet complement() -> complement
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    boolean equals(java.lang.Object) -> equals
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    void addAll(com.google.common.collect.RangeSet) -> addAll
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Range access$600(com.google.common.collect.TreeRangeSet,com.google.common.collect.Range) -> access$600
com.google.common.collect.TreeRangeSet$1 -> com.google.common.collect.TreeRangeSet$1:
com.google.common.collect.TreeRangeSet$AsRanges -> com.google.common.collect.TreeRangeSet$AsRanges:
    com.google.common.collect.TreeRangeSet this$0 -> this$0
    java.util.Collection delegate() -> delegate
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object delegate() -> delegate
com.google.common.collect.TreeRangeSet$Complement -> com.google.common.collect.TreeRangeSet$Complement:
    com.google.common.collect.TreeRangeSet this$0 -> this$0
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.RangeSet complement() -> complement
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound -> com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:
    java.util.NavigableMap positiveRangesByLowerBound -> positiveRangesByLowerBound
    java.util.NavigableMap positiveRangesByUpperBound -> positiveRangesByUpperBound
    com.google.common.collect.Range complementLowerBoundWindow -> complementLowerBoundWindow
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> subMap
    java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> subMap
    java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> headMap
    java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    com.google.common.collect.Range get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.Range access$100(com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound) -> access$100
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1 -> com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1:
    com.google.common.collect.Cut nextComplementRangeLowerBound -> nextComplementRangeLowerBound
    com.google.common.collect.Cut val$firstComplementRangeLowerBound -> val$firstComplementRangeLowerBound
    com.google.common.collect.PeekingIterator val$positiveItr -> val$positiveItr
    com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound this$0 -> this$0
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2 -> com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2:
    com.google.common.collect.Cut nextComplementRangeUpperBound -> nextComplementRangeUpperBound
    com.google.common.collect.Cut val$firstComplementRangeUpperBound -> val$firstComplementRangeUpperBound
    com.google.common.collect.PeekingIterator val$positiveItr -> val$positiveItr
    com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound this$0 -> this$0
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$RangesByUpperBound -> com.google.common.collect.TreeRangeSet$RangesByUpperBound:
    java.util.NavigableMap rangesByLowerBound -> rangesByLowerBound
    com.google.common.collect.Range upperBoundWindow -> upperBoundWindow
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> subMap
    java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> subMap
    java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> headMap
    java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    boolean containsKey(java.lang.Object) -> containsKey
    com.google.common.collect.Range get(java.lang.Object) -> get
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object) -> get
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.Range access$000(com.google.common.collect.TreeRangeSet$RangesByUpperBound) -> access$000
com.google.common.collect.TreeRangeSet$RangesByUpperBound$1 -> com.google.common.collect.TreeRangeSet$RangesByUpperBound$1:
    java.util.Iterator val$backingItr -> val$backingItr
    com.google.common.collect.TreeRangeSet$RangesByUpperBound this$0 -> this$0
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$RangesByUpperBound$2 -> com.google.common.collect.TreeRangeSet$RangesByUpperBound$2:
    com.google.common.collect.PeekingIterator val$backingItr -> val$backingItr
    com.google.common.collect.TreeRangeSet$RangesByUpperBound this$0 -> this$0
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$SubRangeSet -> com.google.common.collect.TreeRangeSet$SubRangeSet:
    com.google.common.collect.Range restriction -> restriction
    com.google.common.collect.TreeRangeSet this$0 -> this$0
    boolean encloses(com.google.common.collect.Range) -> encloses
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    boolean contains(java.lang.Comparable) -> contains
    void clear() -> clear
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound -> com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:
    com.google.common.collect.Range lowerBoundWindow -> lowerBoundWindow
    com.google.common.collect.Range restriction -> restriction
    java.util.NavigableMap rangesByLowerBound -> rangesByLowerBound
    java.util.NavigableMap rangesByUpperBound -> rangesByUpperBound
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> subMap
    java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> subMap
    java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> headMap
    java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    boolean containsKey(java.lang.Object) -> containsKey
    com.google.common.collect.Range get(java.lang.Object) -> get
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.Range access$300(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound) -> access$300
    com.google.common.collect.Range access$400(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound) -> access$400
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1 -> com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1:
    java.util.Iterator val$completeRangeItr -> val$completeRangeItr
    com.google.common.collect.Cut val$upperBoundOnLowerBounds -> val$upperBoundOnLowerBounds
    com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound this$0 -> this$0
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2 -> com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2:
    java.util.Iterator val$completeRangeItr -> val$completeRangeItr
    com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound this$0 -> this$0
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeTraverser -> com.google.common.collect.TreeTraverser:
    java.lang.Iterable children(java.lang.Object) -> children
    com.google.common.collect.FluentIterable preOrderTraversal(java.lang.Object) -> preOrderTraversal
    com.google.common.collect.UnmodifiableIterator preOrderIterator(java.lang.Object) -> preOrderIterator
    com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object) -> postOrderTraversal
    com.google.common.collect.UnmodifiableIterator postOrderIterator(java.lang.Object) -> postOrderIterator
    com.google.common.collect.FluentIterable breadthFirstTraversal(java.lang.Object) -> breadthFirstTraversal
com.google.common.collect.TreeTraverser$1 -> com.google.common.collect.TreeTraverser$1:
    java.lang.Object val$root -> val$root
    com.google.common.collect.TreeTraverser this$0 -> this$0
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$2 -> com.google.common.collect.TreeTraverser$2:
    java.lang.Object val$root -> val$root
    com.google.common.collect.TreeTraverser this$0 -> this$0
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$3 -> com.google.common.collect.TreeTraverser$3:
    java.lang.Object val$root -> val$root
    com.google.common.collect.TreeTraverser this$0 -> this$0
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$BreadthFirstIterator -> com.google.common.collect.TreeTraverser$BreadthFirstIterator:
    java.util.Queue queue -> queue
    com.google.common.collect.TreeTraverser this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object peek() -> peek
    java.lang.Object next() -> next
com.google.common.collect.TreeTraverser$PostOrderIterator -> com.google.common.collect.TreeTraverser$PostOrderIterator:
    java.util.ArrayDeque stack -> stack
    com.google.common.collect.TreeTraverser this$0 -> this$0
    java.lang.Object computeNext() -> computeNext
    com.google.common.collect.TreeTraverser$PostOrderNode expand(java.lang.Object) -> expand
com.google.common.collect.TreeTraverser$PostOrderNode -> com.google.common.collect.TreeTraverser$PostOrderNode:
    java.lang.Object root -> root
    java.util.Iterator childIterator -> childIterator
com.google.common.collect.TreeTraverser$PreOrderIterator -> com.google.common.collect.TreeTraverser$PreOrderIterator:
    java.util.Deque stack -> stack
    com.google.common.collect.TreeTraverser this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.UnmodifiableIterator -> com.google.common.collect.UnmodifiableIterator:
    void remove() -> remove
com.google.common.collect.UnmodifiableListIterator -> com.google.common.collect.UnmodifiableListIterator:
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
com.google.common.collect.UnmodifiableSortedMultiset -> com.google.common.collect.UnmodifiableSortedMultiset:
    com.google.common.collect.UnmodifiableSortedMultiset descendingMultiset -> descendingMultiset
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.SortedMultiset delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet createElementSet() -> createElementSet
    java.util.NavigableSet elementSet() -> elementSet
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    java.util.Set elementSet() -> elementSet
    java.util.Set createElementSet() -> createElementSet
    com.google.common.collect.Multiset delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.UsingToStringOrdering -> com.google.common.collect.UsingToStringOrdering:
    com.google.common.collect.UsingToStringOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
com.google.common.collect.WellBehavedMap -> com.google.common.collect.WellBehavedMap:
    java.util.Map delegate -> delegate
    java.util.Set entrySet -> entrySet
    com.google.common.collect.WellBehavedMap wrap(java.util.Map) -> wrap
    java.util.Map delegate() -> delegate
    java.util.Set entrySet() -> entrySet
    java.lang.Object delegate() -> delegate
com.google.common.collect.WellBehavedMap$1 -> com.google.common.collect.WellBehavedMap$1:
com.google.common.collect.WellBehavedMap$EntrySet -> com.google.common.collect.WellBehavedMap$EntrySet:
    com.google.common.collect.WellBehavedMap this$0 -> this$0
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.WellBehavedMap$EntrySet$1 -> com.google.common.collect.WellBehavedMap$EntrySet$1:
    com.google.common.collect.WellBehavedMap$EntrySet this$1 -> this$1
    java.util.Map$Entry transform(java.lang.Object) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.WellBehavedMap$EntrySet$1$1 -> com.google.common.collect.WellBehavedMap$EntrySet$1$1:
    java.lang.Object val$key -> val$key
    com.google.common.collect.WellBehavedMap$EntrySet$1 this$2 -> this$2
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.package-info -> com.google.common.collect.package-info:
com.google.common.escape.ArrayBasedCharEscaper -> com.google.common.escape.ArrayBasedCharEscaper:
    char[][] replacements -> replacements
    int replacementsLength -> replacementsLength
    char safeMin -> safeMin
    char safeMax -> safeMax
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(char) -> escape
    char[] escapeUnsafe(char) -> escapeUnsafe
com.google.common.escape.ArrayBasedEscaperMap -> com.google.common.escape.ArrayBasedEscaperMap:
    char[][] replacementArray -> replacementArray
    char[][] EMPTY_REPLACEMENT_ARRAY -> EMPTY_REPLACEMENT_ARRAY
    com.google.common.escape.ArrayBasedEscaperMap create(java.util.Map) -> create
    char[][] getReplacementArray() -> getReplacementArray
    char[][] createReplacementArray(java.util.Map) -> createReplacementArray
com.google.common.escape.ArrayBasedUnicodeEscaper -> com.google.common.escape.ArrayBasedUnicodeEscaper:
    char[][] replacements -> replacements
    int replacementsLength -> replacementsLength
    int safeMin -> safeMin
    int safeMax -> safeMax
    char safeMinChar -> safeMinChar
    char safeMaxChar -> safeMaxChar
    java.lang.String escape(java.lang.String) -> escape
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    char[] escape(int) -> escape
    char[] escapeUnsafe(int) -> escapeUnsafe
com.google.common.escape.CharEscaper -> com.google.common.escape.CharEscaper:
    int DEST_PAD_MULTIPLIER -> DEST_PAD_MULTIPLIER
    java.lang.String escape(java.lang.String) -> escape
    java.lang.String escapeSlow(java.lang.String,int) -> escapeSlow
    char[] escape(char) -> escape
    char[] growBuffer(char[],int,int) -> growBuffer
com.google.common.escape.CharEscaperBuilder -> com.google.common.escape.CharEscaperBuilder:
    java.util.Map map -> map
    int max -> max
    com.google.common.escape.CharEscaperBuilder addEscape(char,java.lang.String) -> addEscape
    com.google.common.escape.CharEscaperBuilder addEscapes(char[],java.lang.String) -> addEscapes
    char[][] toArray() -> toArray
    com.google.common.escape.Escaper toEscaper() -> toEscaper
com.google.common.escape.CharEscaperBuilder$CharArrayDecorator -> com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:
    char[][] replacements -> replacements
    int replaceLength -> replaceLength
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(char) -> escape
com.google.common.escape.Escaper -> com.google.common.escape.Escaper:
    com.google.common.base.Function asFunction -> asFunction
    java.lang.String escape(java.lang.String) -> escape
    com.google.common.base.Function asFunction() -> asFunction
com.google.common.escape.Escaper$1 -> com.google.common.escape.Escaper$1:
    com.google.common.escape.Escaper this$0 -> this$0
    java.lang.String apply(java.lang.String) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.escape.Escapers -> com.google.common.escape.Escapers:
    com.google.common.escape.Escaper NULL_ESCAPER -> NULL_ESCAPER
    com.google.common.escape.Escaper nullEscaper() -> nullEscaper
    com.google.common.escape.Escapers$Builder builder() -> builder
    com.google.common.escape.UnicodeEscaper asUnicodeEscaper(com.google.common.escape.Escaper) -> asUnicodeEscaper
    java.lang.String computeReplacement(com.google.common.escape.CharEscaper,char) -> computeReplacement
    java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper,int) -> computeReplacement
    java.lang.String stringOrNull(char[]) -> stringOrNull
    com.google.common.escape.UnicodeEscaper wrap(com.google.common.escape.CharEscaper) -> wrap
com.google.common.escape.Escapers$1 -> com.google.common.escape.Escapers$1:
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(char) -> escape
com.google.common.escape.Escapers$2 -> com.google.common.escape.Escapers$2:
    com.google.common.escape.CharEscaper val$escaper -> val$escaper
    char[] escape(int) -> escape
com.google.common.escape.Escapers$Builder -> com.google.common.escape.Escapers$Builder:
    java.util.Map replacementMap -> replacementMap
    char safeMin -> safeMin
    char safeMax -> safeMax
    java.lang.String unsafeReplacement -> unsafeReplacement
    com.google.common.escape.Escapers$Builder setSafeRange(char,char) -> setSafeRange
    com.google.common.escape.Escapers$Builder setUnsafeReplacement(java.lang.String) -> setUnsafeReplacement
    com.google.common.escape.Escapers$Builder addEscape(char,java.lang.String) -> addEscape
    com.google.common.escape.Escaper build() -> build
    java.lang.String access$100(com.google.common.escape.Escapers$Builder) -> access$100
com.google.common.escape.Escapers$Builder$1 -> com.google.common.escape.Escapers$Builder$1:
    char[] replacementChars -> replacementChars
    com.google.common.escape.Escapers$Builder this$0 -> this$0
    char[] escapeUnsafe(char) -> escapeUnsafe
com.google.common.escape.Platform -> com.google.common.escape.Platform:
    java.lang.ThreadLocal DEST_TL -> DEST_TL
    char[] charBufferFromThreadLocal() -> charBufferFromThreadLocal
com.google.common.escape.Platform$1 -> com.google.common.escape.Platform$1:
    char[] initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.escape.UnicodeEscaper -> com.google.common.escape.UnicodeEscaper:
    int DEST_PAD -> DEST_PAD
    char[] escape(int) -> escape
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    java.lang.String escape(java.lang.String) -> escape
    java.lang.String escapeSlow(java.lang.String,int) -> escapeSlow
    int codePointAt(java.lang.CharSequence,int,int) -> codePointAt
    char[] growBuffer(char[],int,int) -> growBuffer
com.google.common.escape.package-info -> com.google.common.escape.package-info:
com.google.common.eventbus.AllowConcurrentEvents -> com.google.common.eventbus.AllowConcurrentEvents:
com.google.common.eventbus.AnnotatedSubscriberFinder -> com.google.common.eventbus.AnnotatedSubscriberFinder:
    com.google.common.cache.LoadingCache subscriberMethodsCache -> subscriberMethodsCache
    com.google.common.collect.Multimap findAllSubscribers(java.lang.Object) -> findAllSubscribers
    com.google.common.collect.ImmutableList getAnnotatedMethods(java.lang.Class) -> getAnnotatedMethods
    com.google.common.collect.ImmutableList getAnnotatedMethodsInternal(java.lang.Class) -> getAnnotatedMethodsInternal
    com.google.common.eventbus.EventSubscriber makeSubscriber(java.lang.Object,java.lang.reflect.Method) -> makeSubscriber
    boolean methodIsDeclaredThreadSafe(java.lang.reflect.Method) -> methodIsDeclaredThreadSafe
    com.google.common.collect.ImmutableList access$000(java.lang.Class) -> access$000
com.google.common.eventbus.AnnotatedSubscriberFinder$1 -> com.google.common.eventbus.AnnotatedSubscriberFinder$1:
    com.google.common.collect.ImmutableList load(java.lang.Class) -> load
    java.lang.Object load(java.lang.Object) -> load
com.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier -> com.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier:
    java.lang.String name -> name
    java.util.List parameterTypes -> parameterTypes
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.eventbus.AsyncEventBus -> com.google.common.eventbus.AsyncEventBus:
    java.util.concurrent.Executor executor -> executor
    java.util.concurrent.ConcurrentLinkedQueue eventsToDispatch -> eventsToDispatch
    void enqueueEvent(java.lang.Object,com.google.common.eventbus.EventSubscriber) -> enqueueEvent
    void dispatchQueuedEvents() -> dispatchQueuedEvents
    void dispatch(java.lang.Object,com.google.common.eventbus.EventSubscriber) -> dispatch
    void access$001(com.google.common.eventbus.AsyncEventBus,java.lang.Object,com.google.common.eventbus.EventSubscriber) -> access$001
com.google.common.eventbus.AsyncEventBus$1 -> com.google.common.eventbus.AsyncEventBus$1:
    java.lang.Object val$event -> val$event
    com.google.common.eventbus.EventSubscriber val$subscriber -> val$subscriber
    com.google.common.eventbus.AsyncEventBus this$0 -> this$0
    void run() -> run
com.google.common.eventbus.DeadEvent -> com.google.common.eventbus.DeadEvent:
    java.lang.Object source -> source
    java.lang.Object event -> event
    java.lang.Object getSource() -> getSource
    java.lang.Object getEvent() -> getEvent
com.google.common.eventbus.EventBus -> com.google.common.eventbus.EventBus:
    com.google.common.cache.LoadingCache flattenHierarchyCache -> flattenHierarchyCache
    com.google.common.collect.SetMultimap subscribersByType -> subscribersByType
    java.util.concurrent.locks.ReadWriteLock subscribersByTypeLock -> subscribersByTypeLock
    com.google.common.eventbus.SubscriberFindingStrategy finder -> finder
    java.lang.ThreadLocal eventsToDispatch -> eventsToDispatch
    java.lang.ThreadLocal isDispatching -> isDispatching
    com.google.common.eventbus.SubscriberExceptionHandler subscriberExceptionHandler -> subscriberExceptionHandler
    void register(java.lang.Object) -> register
    void unregister(java.lang.Object) -> unregister
    void post(java.lang.Object) -> post
    void enqueueEvent(java.lang.Object,com.google.common.eventbus.EventSubscriber) -> enqueueEvent
    void dispatchQueuedEvents() -> dispatchQueuedEvents
    void dispatch(java.lang.Object,com.google.common.eventbus.EventSubscriber) -> dispatch
    java.util.Set flattenHierarchy(java.lang.Class) -> flattenHierarchy
com.google.common.eventbus.EventBus$1 -> com.google.common.eventbus.EventBus$1:
    java.util.Set load(java.lang.Class) -> load
    java.lang.Object load(java.lang.Object) -> load
com.google.common.eventbus.EventBus$2 -> com.google.common.eventbus.EventBus$2:
    com.google.common.eventbus.EventBus this$0 -> this$0
    java.util.Queue initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.eventbus.EventBus$3 -> com.google.common.eventbus.EventBus$3:
    com.google.common.eventbus.EventBus this$0 -> this$0
    java.lang.Boolean initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.eventbus.EventBus$EventWithSubscriber -> com.google.common.eventbus.EventBus$EventWithSubscriber:
    java.lang.Object event -> event
    com.google.common.eventbus.EventSubscriber subscriber -> subscriber
com.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler -> com.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler:
    java.util.logging.Logger logger -> logger
    void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> handleException
com.google.common.eventbus.EventSubscriber -> com.google.common.eventbus.EventSubscriber:
    java.lang.Object target -> target
    java.lang.reflect.Method method -> method
    void handleEvent(java.lang.Object) -> handleEvent
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getSubscriber() -> getSubscriber
    java.lang.reflect.Method getMethod() -> getMethod
com.google.common.eventbus.Subscribe -> com.google.common.eventbus.Subscribe:
com.google.common.eventbus.SubscriberExceptionContext -> com.google.common.eventbus.SubscriberExceptionContext:
    com.google.common.eventbus.EventBus eventBus -> eventBus
    java.lang.Object event -> event
    java.lang.Object subscriber -> subscriber
    java.lang.reflect.Method subscriberMethod -> subscriberMethod
    com.google.common.eventbus.EventBus getEventBus() -> getEventBus
    java.lang.Object getEvent() -> getEvent
    java.lang.Object getSubscriber() -> getSubscriber
    java.lang.reflect.Method getSubscriberMethod() -> getSubscriberMethod
com.google.common.eventbus.SubscriberExceptionHandler -> com.google.common.eventbus.SubscriberExceptionHandler:
    void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> handleException
com.google.common.eventbus.SubscriberFindingStrategy -> com.google.common.eventbus.SubscriberFindingStrategy:
    com.google.common.collect.Multimap findAllSubscribers(java.lang.Object) -> findAllSubscribers
com.google.common.eventbus.SynchronizedEventSubscriber -> com.google.common.eventbus.SynchronizedEventSubscriber:
    void handleEvent(java.lang.Object) -> handleEvent
com.google.common.hash.AbstractByteHasher -> com.google.common.hash.AbstractByteHasher:
    java.nio.ByteBuffer scratch -> scratch
    void update(byte) -> update
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher update(int) -> update
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractCompositeHashFunction -> com.google.common.hash.AbstractCompositeHashFunction:
    com.google.common.hash.HashFunction[] functions -> functions
    long serialVersionUID -> serialVersionUID
    com.google.common.hash.HashCode makeHash(com.google.common.hash.Hasher[]) -> makeHash
    com.google.common.hash.Hasher newHasher() -> newHasher
com.google.common.hash.AbstractCompositeHashFunction$1 -> com.google.common.hash.AbstractCompositeHashFunction$1:
    com.google.common.hash.Hasher[] val$hashers -> val$hashers
    com.google.common.hash.AbstractCompositeHashFunction this$0 -> this$0
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putFloat(float) -> putFloat
    com.google.common.hash.Hasher putDouble(double) -> putDouble
    com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.HashCode hash() -> hash
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractHasher -> com.google.common.hash.AbstractHasher:
    com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    com.google.common.hash.Hasher putDouble(double) -> putDouble
    com.google.common.hash.Hasher putFloat(float) -> putFloat
    com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
com.google.common.hash.AbstractNonStreamingHashFunction -> com.google.common.hash.AbstractNonStreamingHashFunction:
    com.google.common.hash.Hasher newHasher() -> newHasher
    com.google.common.hash.Hasher newHasher(int) -> newHasher
    com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel) -> hashObject
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashBytes(byte[]) -> hashBytes
com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher -> com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:
    com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream -> stream
    int BOTTOM_BYTE -> BOTTOM_BYTE
    com.google.common.hash.AbstractNonStreamingHashFunction this$0 -> this$0
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.HashCode hash() -> hash
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream -> com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:
    byte[] byteArray() -> byteArray
    int length() -> length
com.google.common.hash.AbstractStreamingHashFunction -> com.google.common.hash.AbstractStreamingHashFunction:
    com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel) -> hashObject
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashBytes(byte[]) -> hashBytes
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    com.google.common.hash.Hasher newHasher(int) -> newHasher
com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher -> com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher:
    java.nio.ByteBuffer buffer -> buffer
    int bufferSize -> bufferSize
    int chunkSize -> chunkSize
    void process(java.nio.ByteBuffer) -> process
    void processRemaining(java.nio.ByteBuffer) -> processRemaining
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.HashCode hash() -> hash
    com.google.common.hash.HashCode makeHash() -> makeHash
    void munchIfFull() -> munchIfFull
    void munch() -> munch
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.BloomFilter -> com.google.common.hash.BloomFilter:
    com.google.common.hash.BloomFilterStrategies$BitArray bits -> bits
    int numHashFunctions -> numHashFunctions
    com.google.common.hash.Funnel funnel -> funnel
    com.google.common.hash.BloomFilter$Strategy strategy -> strategy
    com.google.common.hash.BloomFilter$Strategy DEFAULT_STRATEGY -> DEFAULT_STRATEGY
    com.google.common.hash.BloomFilter copy() -> copy
    boolean mightContain(java.lang.Object) -> mightContain
    boolean apply(java.lang.Object) -> apply
    boolean put(java.lang.Object) -> put
    double expectedFpp() -> expectedFpp
    long bitSize() -> bitSize
    boolean isCompatible(com.google.common.hash.BloomFilter) -> isCompatible
    void putAll(com.google.common.hash.BloomFilter) -> putAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,int,double) -> create
    com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,int,double,com.google.common.hash.BloomFilter$Strategy) -> create
    com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,int) -> create
    int optimalNumOfHashFunctions(long,long) -> optimalNumOfHashFunctions
    long optimalNumOfBits(long,double) -> optimalNumOfBits
    java.lang.Object writeReplace() -> writeReplace
    void writeTo(java.io.OutputStream) -> writeTo
    com.google.common.hash.BloomFilter readFrom(java.io.InputStream,com.google.common.hash.Funnel) -> readFrom
    com.google.common.hash.BloomFilterStrategies$BitArray access$000(com.google.common.hash.BloomFilter) -> access$000
    int access$100(com.google.common.hash.BloomFilter) -> access$100
    com.google.common.hash.Funnel access$200(com.google.common.hash.BloomFilter) -> access$200
    com.google.common.hash.BloomFilter$Strategy access$300(com.google.common.hash.BloomFilter) -> access$300
com.google.common.hash.BloomFilter$1 -> com.google.common.hash.BloomFilter$1:
com.google.common.hash.BloomFilter$SerialForm -> com.google.common.hash.BloomFilter$SerialForm:
    long[] data -> data
    int numHashFunctions -> numHashFunctions
    com.google.common.hash.Funnel funnel -> funnel
    com.google.common.hash.BloomFilter$Strategy strategy -> strategy
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.hash.BloomFilter$Strategy -> com.google.common.hash.BloomFilter$Strategy:
    boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$BitArray) -> put
    boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$BitArray) -> mightContain
    int ordinal() -> ordinal
com.google.common.hash.BloomFilterStrategies -> com.google.common.hash.BloomFilterStrategies:
    com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_32 -> MURMUR128_MITZ_32
    com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_64 -> MURMUR128_MITZ_64
    com.google.common.hash.BloomFilterStrategies[] $VALUES -> $VALUES
    com.google.common.hash.BloomFilterStrategies[] values() -> values
    com.google.common.hash.BloomFilterStrategies valueOf(java.lang.String) -> valueOf
com.google.common.hash.BloomFilterStrategies$1 -> com.google.common.hash.BloomFilterStrategies$1:
    boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$BitArray) -> put
    boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$BitArray) -> mightContain
com.google.common.hash.BloomFilterStrategies$2 -> com.google.common.hash.BloomFilterStrategies$2:
    boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$BitArray) -> put
    boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$BitArray) -> mightContain
    long lowerEight(byte[]) -> lowerEight
    long upperEight(byte[]) -> upperEight
com.google.common.hash.BloomFilterStrategies$BitArray -> com.google.common.hash.BloomFilterStrategies$BitArray:
    long[] data -> data
    long bitCount -> bitCount
    boolean set(long) -> set
    boolean get(long) -> get
    long bitSize() -> bitSize
    long bitCount() -> bitCount
    com.google.common.hash.BloomFilterStrategies$BitArray copy() -> copy
    void putAll(com.google.common.hash.BloomFilterStrategies$BitArray) -> putAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.hash.ChecksumHashFunction -> com.google.common.hash.ChecksumHashFunction:
    com.google.common.base.Supplier checksumSupplier -> checksumSupplier
    int bits -> bits
    java.lang.String toString -> toString
    long serialVersionUID -> serialVersionUID
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    int access$100(com.google.common.hash.ChecksumHashFunction) -> access$100
com.google.common.hash.ChecksumHashFunction$1 -> com.google.common.hash.ChecksumHashFunction$1:
com.google.common.hash.ChecksumHashFunction$ChecksumHasher -> com.google.common.hash.ChecksumHashFunction$ChecksumHasher:
    java.util.zip.Checksum checksum -> checksum
    com.google.common.hash.ChecksumHashFunction this$0 -> this$0
    void update(byte) -> update
    void update(byte[],int,int) -> update
    com.google.common.hash.HashCode hash() -> hash
com.google.common.hash.Crc32cHashFunction -> com.google.common.hash.Crc32cHashFunction:
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
com.google.common.hash.Crc32cHashFunction$Crc32cHasher -> com.google.common.hash.Crc32cHashFunction$Crc32cHasher:
    int[] CRC_TABLE -> CRC_TABLE
    int crc -> crc
    void update(byte) -> update
    com.google.common.hash.HashCode hash() -> hash
com.google.common.hash.Funnel -> com.google.common.hash.Funnel:
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels -> com.google.common.hash.Funnels:
    com.google.common.hash.Funnel byteArrayFunnel() -> byteArrayFunnel
    com.google.common.hash.Funnel unencodedCharsFunnel() -> unencodedCharsFunnel
    com.google.common.hash.Funnel stringFunnel(java.nio.charset.Charset) -> stringFunnel
    com.google.common.hash.Funnel integerFunnel() -> integerFunnel
    com.google.common.hash.Funnel sequentialFunnel(com.google.common.hash.Funnel) -> sequentialFunnel
    com.google.common.hash.Funnel longFunnel() -> longFunnel
    java.io.OutputStream asOutputStream(com.google.common.hash.PrimitiveSink) -> asOutputStream
com.google.common.hash.Funnels$ByteArrayFunnel -> com.google.common.hash.Funnels$ByteArrayFunnel:
    com.google.common.hash.Funnels$ByteArrayFunnel INSTANCE -> INSTANCE
    com.google.common.hash.Funnels$ByteArrayFunnel[] $VALUES -> $VALUES
    com.google.common.hash.Funnels$ByteArrayFunnel[] values() -> values
    com.google.common.hash.Funnels$ByteArrayFunnel valueOf(java.lang.String) -> valueOf
    void funnel(byte[],com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$IntegerFunnel -> com.google.common.hash.Funnels$IntegerFunnel:
    com.google.common.hash.Funnels$IntegerFunnel INSTANCE -> INSTANCE
    com.google.common.hash.Funnels$IntegerFunnel[] $VALUES -> $VALUES
    com.google.common.hash.Funnels$IntegerFunnel[] values() -> values
    com.google.common.hash.Funnels$IntegerFunnel valueOf(java.lang.String) -> valueOf
    void funnel(java.lang.Integer,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$LongFunnel -> com.google.common.hash.Funnels$LongFunnel:
    com.google.common.hash.Funnels$LongFunnel INSTANCE -> INSTANCE
    com.google.common.hash.Funnels$LongFunnel[] $VALUES -> $VALUES
    com.google.common.hash.Funnels$LongFunnel[] values() -> values
    com.google.common.hash.Funnels$LongFunnel valueOf(java.lang.String) -> valueOf
    void funnel(java.lang.Long,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$SequentialFunnel -> com.google.common.hash.Funnels$SequentialFunnel:
    com.google.common.hash.Funnel elementFunnel -> elementFunnel
    void funnel(java.lang.Iterable,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$SinkAsStream -> com.google.common.hash.Funnels$SinkAsStream:
    com.google.common.hash.PrimitiveSink sink -> sink
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    java.lang.String toString() -> toString
com.google.common.hash.Funnels$StringCharsetFunnel -> com.google.common.hash.Funnels$StringCharsetFunnel:
    java.nio.charset.Charset charset -> charset
    void funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm -> com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:
    java.lang.String charsetCanonicalName -> charsetCanonicalName
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.hash.Funnels$UnencodedCharsFunnel -> com.google.common.hash.Funnels$UnencodedCharsFunnel:
    com.google.common.hash.Funnels$UnencodedCharsFunnel INSTANCE -> INSTANCE
    com.google.common.hash.Funnels$UnencodedCharsFunnel[] $VALUES -> $VALUES
    com.google.common.hash.Funnels$UnencodedCharsFunnel[] values() -> values
    com.google.common.hash.Funnels$UnencodedCharsFunnel valueOf(java.lang.String) -> valueOf
    void funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.HashCode -> com.google.common.hash.HashCode:
    char[] hexDigits -> hexDigits
    int bits() -> bits
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    byte[] asBytes() -> asBytes
    int writeBytesTo(byte[],int,int) -> writeBytesTo
    void writeBytesToImpl(byte[],int,int) -> writeBytesToImpl
    byte[] getBytesInternal() -> getBytesInternal
    boolean equalsSameBits(com.google.common.hash.HashCode) -> equalsSameBits
    com.google.common.hash.HashCode fromInt(int) -> fromInt
    com.google.common.hash.HashCode fromLong(long) -> fromLong
    com.google.common.hash.HashCode fromBytes(byte[]) -> fromBytes
    com.google.common.hash.HashCode fromBytesNoCopy(byte[]) -> fromBytesNoCopy
    com.google.common.hash.HashCode fromString(java.lang.String) -> fromString
    int decode(char) -> decode
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.hash.HashCode$BytesHashCode -> com.google.common.hash.HashCode$BytesHashCode:
    byte[] bytes -> bytes
    long serialVersionUID -> serialVersionUID
    int bits() -> bits
    byte[] asBytes() -> asBytes
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    void writeBytesToImpl(byte[],int,int) -> writeBytesToImpl
    byte[] getBytesInternal() -> getBytesInternal
    boolean equalsSameBits(com.google.common.hash.HashCode) -> equalsSameBits
com.google.common.hash.HashCode$IntHashCode -> com.google.common.hash.HashCode$IntHashCode:
    int hash -> hash
    long serialVersionUID -> serialVersionUID
    int bits() -> bits
    byte[] asBytes() -> asBytes
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    void writeBytesToImpl(byte[],int,int) -> writeBytesToImpl
    boolean equalsSameBits(com.google.common.hash.HashCode) -> equalsSameBits
com.google.common.hash.HashCode$LongHashCode -> com.google.common.hash.HashCode$LongHashCode:
    long hash -> hash
    long serialVersionUID -> serialVersionUID
    int bits() -> bits
    byte[] asBytes() -> asBytes
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    void writeBytesToImpl(byte[],int,int) -> writeBytesToImpl
    boolean equalsSameBits(com.google.common.hash.HashCode) -> equalsSameBits
com.google.common.hash.HashFunction -> com.google.common.hash.HashFunction:
    com.google.common.hash.Hasher newHasher() -> newHasher
    com.google.common.hash.Hasher newHasher(int) -> newHasher
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashBytes(byte[]) -> hashBytes
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel) -> hashObject
    int bits() -> bits
com.google.common.hash.Hasher -> com.google.common.hash.Hasher:
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putFloat(float) -> putFloat
    com.google.common.hash.Hasher putDouble(double) -> putDouble
    com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.HashCode hash() -> hash
com.google.common.hash.Hashing -> com.google.common.hash.Hashing:
    int GOOD_FAST_HASH_SEED -> GOOD_FAST_HASH_SEED
    com.google.common.hash.HashFunction goodFastHash(int) -> goodFastHash
    com.google.common.hash.HashFunction murmur3_32(int) -> murmur3_32
    com.google.common.hash.HashFunction murmur3_32() -> murmur3_32
    com.google.common.hash.HashFunction murmur3_128(int) -> murmur3_128
    com.google.common.hash.HashFunction murmur3_128() -> murmur3_128
    com.google.common.hash.HashFunction sipHash24() -> sipHash24
    com.google.common.hash.HashFunction sipHash24(long,long) -> sipHash24
    com.google.common.hash.HashFunction md5() -> md5
    com.google.common.hash.HashFunction sha1() -> sha1
    com.google.common.hash.HashFunction sha256() -> sha256
    com.google.common.hash.HashFunction sha512() -> sha512
    com.google.common.hash.HashFunction crc32c() -> crc32c
    com.google.common.hash.HashFunction crc32() -> crc32
    com.google.common.hash.HashFunction adler32() -> adler32
    com.google.common.hash.HashFunction checksumHashFunction(com.google.common.hash.Hashing$ChecksumType,java.lang.String) -> checksumHashFunction
    int consistentHash(com.google.common.hash.HashCode,int) -> consistentHash
    int consistentHash(long,int) -> consistentHash
    com.google.common.hash.HashCode combineOrdered(java.lang.Iterable) -> combineOrdered
    com.google.common.hash.HashCode combineUnordered(java.lang.Iterable) -> combineUnordered
    int checkPositiveAndMakeMultipleOf32(int) -> checkPositiveAndMakeMultipleOf32
    int access$000() -> access$000
    com.google.common.hash.HashFunction access$100(com.google.common.hash.Hashing$ChecksumType,java.lang.String) -> access$100
com.google.common.hash.Hashing$1 -> com.google.common.hash.Hashing$1:
com.google.common.hash.Hashing$Adler32Holder -> com.google.common.hash.Hashing$Adler32Holder:
    com.google.common.hash.HashFunction ADLER_32 -> ADLER_32
com.google.common.hash.Hashing$ChecksumType -> com.google.common.hash.Hashing$ChecksumType:
    com.google.common.hash.Hashing$ChecksumType CRC_32 -> CRC_32
    com.google.common.hash.Hashing$ChecksumType ADLER_32 -> ADLER_32
    int bits -> bits
    com.google.common.hash.Hashing$ChecksumType[] $VALUES -> $VALUES
    com.google.common.hash.Hashing$ChecksumType[] values() -> values
    com.google.common.hash.Hashing$ChecksumType valueOf(java.lang.String) -> valueOf
    java.util.zip.Checksum get() -> get
    java.lang.Object get() -> get
    int access$200(com.google.common.hash.Hashing$ChecksumType) -> access$200
com.google.common.hash.Hashing$ChecksumType$1 -> com.google.common.hash.Hashing$ChecksumType$1:
    java.util.zip.Checksum get() -> get
    java.lang.Object get() -> get
com.google.common.hash.Hashing$ChecksumType$2 -> com.google.common.hash.Hashing$ChecksumType$2:
    java.util.zip.Checksum get() -> get
    java.lang.Object get() -> get
com.google.common.hash.Hashing$ConcatenatedHashFunction -> com.google.common.hash.Hashing$ConcatenatedHashFunction:
    int bits -> bits
    com.google.common.hash.HashCode makeHash(com.google.common.hash.Hasher[]) -> makeHash
    int bits() -> bits
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.hash.Hashing$Crc32Holder -> com.google.common.hash.Hashing$Crc32Holder:
    com.google.common.hash.HashFunction CRC_32 -> CRC_32
com.google.common.hash.Hashing$Crc32cHolder -> com.google.common.hash.Hashing$Crc32cHolder:
    com.google.common.hash.HashFunction CRC_32_C -> CRC_32_C
com.google.common.hash.Hashing$LinearCongruentialGenerator -> com.google.common.hash.Hashing$LinearCongruentialGenerator:
    long state -> state
    double nextDouble() -> nextDouble
com.google.common.hash.Hashing$Md5Holder -> com.google.common.hash.Hashing$Md5Holder:
    com.google.common.hash.HashFunction MD5 -> MD5
com.google.common.hash.Hashing$Murmur3_128Holder -> com.google.common.hash.Hashing$Murmur3_128Holder:
    com.google.common.hash.HashFunction MURMUR3_128 -> MURMUR3_128
    com.google.common.hash.HashFunction GOOD_FAST_HASH_FUNCTION_128 -> GOOD_FAST_HASH_FUNCTION_128
com.google.common.hash.Hashing$Murmur3_32Holder -> com.google.common.hash.Hashing$Murmur3_32Holder:
    com.google.common.hash.HashFunction MURMUR3_32 -> MURMUR3_32
    com.google.common.hash.HashFunction GOOD_FAST_HASH_FUNCTION_32 -> GOOD_FAST_HASH_FUNCTION_32
com.google.common.hash.Hashing$Sha1Holder -> com.google.common.hash.Hashing$Sha1Holder:
    com.google.common.hash.HashFunction SHA_1 -> SHA_1
com.google.common.hash.Hashing$Sha256Holder -> com.google.common.hash.Hashing$Sha256Holder:
    com.google.common.hash.HashFunction SHA_256 -> SHA_256
com.google.common.hash.Hashing$Sha512Holder -> com.google.common.hash.Hashing$Sha512Holder:
    com.google.common.hash.HashFunction SHA_512 -> SHA_512
com.google.common.hash.Hashing$SipHash24Holder -> com.google.common.hash.Hashing$SipHash24Holder:
    com.google.common.hash.HashFunction SIP_HASH_24 -> SIP_HASH_24
com.google.common.hash.HashingInputStream -> com.google.common.hash.HashingInputStream:
    com.google.common.hash.Hasher hasher -> hasher
    int read() -> read
    int read(byte[],int,int) -> read
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    com.google.common.hash.HashCode hash() -> hash
com.google.common.hash.HashingOutputStream -> com.google.common.hash.HashingOutputStream:
    com.google.common.hash.Hasher hasher -> hasher
    void write(int) -> write
    void write(byte[],int,int) -> write
    com.google.common.hash.HashCode hash() -> hash
    void close() -> close
com.google.common.hash.MessageDigestHashFunction -> com.google.common.hash.MessageDigestHashFunction:
    java.security.MessageDigest prototype -> prototype
    int bytes -> bytes
    boolean supportsClone -> supportsClone
    java.lang.String toString -> toString
    boolean supportsClone() -> supportsClone
    int bits() -> bits
    java.lang.String toString() -> toString
    java.security.MessageDigest getMessageDigest(java.lang.String) -> getMessageDigest
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.Object writeReplace() -> writeReplace
com.google.common.hash.MessageDigestHashFunction$1 -> com.google.common.hash.MessageDigestHashFunction$1:
com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher -> com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:
    java.security.MessageDigest digest -> digest
    int bytes -> bytes
    boolean done -> done
    void update(byte) -> update
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
    void checkNotDone() -> checkNotDone
    com.google.common.hash.HashCode hash() -> hash
com.google.common.hash.MessageDigestHashFunction$SerializedForm -> com.google.common.hash.MessageDigestHashFunction$SerializedForm:
    java.lang.String algorithmName -> algorithmName
    int bytes -> bytes
    java.lang.String toString -> toString
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
com.google.common.hash.Murmur3_128HashFunction -> com.google.common.hash.Murmur3_128HashFunction:
    int seed -> seed
    long serialVersionUID -> serialVersionUID
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher -> com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:
    int CHUNK_SIZE -> CHUNK_SIZE
    long C1 -> C1
    long C2 -> C2
    long h1 -> h1
    long h2 -> h2
    int length -> length
    void process(java.nio.ByteBuffer) -> process
    void bmix64(long,long) -> bmix64
    void processRemaining(java.nio.ByteBuffer) -> processRemaining
    com.google.common.hash.HashCode makeHash() -> makeHash
    long fmix64(long) -> fmix64
    long mixK1(long) -> mixK1
    long mixK2(long) -> mixK2
com.google.common.hash.Murmur3_32HashFunction -> com.google.common.hash.Murmur3_32HashFunction:
    int C1 -> C1
    int C2 -> C2
    int seed -> seed
    long serialVersionUID -> serialVersionUID
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    int mixK1(int) -> mixK1
    int mixH1(int,int) -> mixH1
    com.google.common.hash.HashCode fmix(int,int) -> fmix
    int access$000(int) -> access$000
    int access$100(int,int) -> access$100
    com.google.common.hash.HashCode access$200(int,int) -> access$200
com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher -> com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:
    int CHUNK_SIZE -> CHUNK_SIZE
    int h1 -> h1
    int length -> length
    void process(java.nio.ByteBuffer) -> process
    void processRemaining(java.nio.ByteBuffer) -> processRemaining
    com.google.common.hash.HashCode makeHash() -> makeHash
com.google.common.hash.PrimitiveSink -> com.google.common.hash.PrimitiveSink:
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
com.google.common.hash.SipHashFunction -> com.google.common.hash.SipHashFunction:
    int c -> c
    int d -> d
    long k0 -> k0
    long k1 -> k1
    long serialVersionUID -> serialVersionUID
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.hash.SipHashFunction$SipHasher -> com.google.common.hash.SipHashFunction$SipHasher:
    int CHUNK_SIZE -> CHUNK_SIZE
    int c -> c
    int d -> d
    long v0 -> v0
    long v1 -> v1
    long v2 -> v2
    long v3 -> v3
    long b -> b
    long finalM -> finalM
    void process(java.nio.ByteBuffer) -> process
    void processRemaining(java.nio.ByteBuffer) -> processRemaining
    com.google.common.hash.HashCode makeHash() -> makeHash
    void processM(long) -> processM
    void sipRound(int) -> sipRound
com.google.common.hash.package-info -> com.google.common.hash.package-info:
com.google.common.html.HtmlEscapers -> com.google.common.html.HtmlEscapers:
    com.google.common.escape.Escaper HTML_ESCAPER -> HTML_ESCAPER
    com.google.common.escape.Escaper htmlEscaper() -> htmlEscaper
com.google.common.html.package-info -> com.google.common.html.package-info:
com.google.common.io.AppendableWriter -> com.google.common.io.AppendableWriter:
    java.lang.Appendable target -> target
    boolean closed -> closed
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
    void write(int) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    java.io.Writer append(char) -> append
    java.io.Writer append(java.lang.CharSequence) -> append
    java.io.Writer append(java.lang.CharSequence,int,int) -> append
    void checkNotClosed() -> checkNotClosed
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.google.common.io.BaseEncoding -> com.google.common.io.BaseEncoding:
    com.google.common.io.BaseEncoding BASE64 -> BASE64
    com.google.common.io.BaseEncoding BASE64_URL -> BASE64_URL
    com.google.common.io.BaseEncoding BASE32 -> BASE32
    com.google.common.io.BaseEncoding BASE32_HEX -> BASE32_HEX
    com.google.common.io.BaseEncoding BASE16 -> BASE16
    java.lang.String encode(byte[]) -> encode
    java.lang.String encode(byte[],int,int) -> encode
    java.io.OutputStream encodingStream(java.io.Writer) -> encodingStream
    com.google.common.io.ByteSink encodingSink(com.google.common.io.CharSink) -> encodingSink
    byte[] extract(byte[],int) -> extract
    byte[] decode(java.lang.CharSequence) -> decode
    byte[] decodeChecked(java.lang.CharSequence) -> decodeChecked
    java.io.InputStream decodingStream(java.io.Reader) -> decodingStream
    com.google.common.io.ByteSource decodingSource(com.google.common.io.CharSource) -> decodingSource
    int maxEncodedSize(int) -> maxEncodedSize
    com.google.common.io.GwtWorkarounds$ByteOutput encodingStream(com.google.common.io.GwtWorkarounds$CharOutput) -> encodingStream
    int maxDecodedSize(int) -> maxDecodedSize
    com.google.common.io.GwtWorkarounds$ByteInput decodingStream(com.google.common.io.GwtWorkarounds$CharInput) -> decodingStream
    com.google.common.base.CharMatcher padding() -> padding
    com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    com.google.common.io.BaseEncoding upperCase() -> upperCase
    com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    com.google.common.io.BaseEncoding base64() -> base64
    com.google.common.io.BaseEncoding base64Url() -> base64Url
    com.google.common.io.BaseEncoding base32() -> base32
    com.google.common.io.BaseEncoding base32Hex() -> base32Hex
    com.google.common.io.BaseEncoding base16() -> base16
    com.google.common.io.GwtWorkarounds$CharInput ignoringInput(com.google.common.io.GwtWorkarounds$CharInput,com.google.common.base.CharMatcher) -> ignoringInput
    com.google.common.io.GwtWorkarounds$CharOutput separatingOutput(com.google.common.io.GwtWorkarounds$CharOutput,java.lang.String,int) -> separatingOutput
com.google.common.io.BaseEncoding$1 -> com.google.common.io.BaseEncoding$1:
    com.google.common.io.CharSink val$encodedSink -> val$encodedSink
    com.google.common.io.BaseEncoding this$0 -> this$0
    java.io.OutputStream openStream() -> openStream
com.google.common.io.BaseEncoding$2 -> com.google.common.io.BaseEncoding$2:
    com.google.common.io.CharSource val$encodedSource -> val$encodedSource
    com.google.common.io.BaseEncoding this$0 -> this$0
    java.io.InputStream openStream() -> openStream
com.google.common.io.BaseEncoding$3 -> com.google.common.io.BaseEncoding$3:
    com.google.common.io.GwtWorkarounds$CharInput val$delegate -> val$delegate
    com.google.common.base.CharMatcher val$toIgnore -> val$toIgnore
    int read() -> read
    void close() -> close
com.google.common.io.BaseEncoding$4 -> com.google.common.io.BaseEncoding$4:
    int charsUntilSeparator -> charsUntilSeparator
    int val$afterEveryChars -> val$afterEveryChars
    java.lang.String val$separator -> val$separator
    com.google.common.io.GwtWorkarounds$CharOutput val$delegate -> val$delegate
    void write(char) -> write
    void flush() -> flush
    void close() -> close
com.google.common.io.BaseEncoding$Alphabet -> com.google.common.io.BaseEncoding$Alphabet:
    java.lang.String name -> name
    char[] chars -> chars
    int mask -> mask
    int bitsPerChar -> bitsPerChar
    int charsPerChunk -> charsPerChunk
    int bytesPerChunk -> bytesPerChunk
    byte[] decodabet -> decodabet
    boolean[] validPadding -> validPadding
    char encode(int) -> encode
    boolean isValidPaddingStartPosition(int) -> isValidPaddingStartPosition
    int decode(char) -> decode
    boolean hasLowerCase() -> hasLowerCase
    boolean hasUpperCase() -> hasUpperCase
    com.google.common.io.BaseEncoding$Alphabet upperCase() -> upperCase
    com.google.common.io.BaseEncoding$Alphabet lowerCase() -> lowerCase
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
com.google.common.io.BaseEncoding$DecodingException -> com.google.common.io.BaseEncoding$DecodingException:
com.google.common.io.BaseEncoding$SeparatedBaseEncoding -> com.google.common.io.BaseEncoding$SeparatedBaseEncoding:
    com.google.common.io.BaseEncoding delegate -> delegate
    java.lang.String separator -> separator
    int afterEveryChars -> afterEveryChars
    com.google.common.base.CharMatcher separatorChars -> separatorChars
    com.google.common.base.CharMatcher padding() -> padding
    int maxEncodedSize(int) -> maxEncodedSize
    com.google.common.io.GwtWorkarounds$ByteOutput encodingStream(com.google.common.io.GwtWorkarounds$CharOutput) -> encodingStream
    int maxDecodedSize(int) -> maxDecodedSize
    com.google.common.io.GwtWorkarounds$ByteInput decodingStream(com.google.common.io.GwtWorkarounds$CharInput) -> decodingStream
    com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    com.google.common.io.BaseEncoding upperCase() -> upperCase
    com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    java.lang.String toString() -> toString
com.google.common.io.BaseEncoding$StandardBaseEncoding -> com.google.common.io.BaseEncoding$StandardBaseEncoding:
    com.google.common.io.BaseEncoding$Alphabet alphabet -> alphabet
    java.lang.Character paddingChar -> paddingChar
    com.google.common.io.BaseEncoding upperCase -> upperCase
    com.google.common.io.BaseEncoding lowerCase -> lowerCase
    com.google.common.base.CharMatcher padding() -> padding
    int maxEncodedSize(int) -> maxEncodedSize
    com.google.common.io.GwtWorkarounds$ByteOutput encodingStream(com.google.common.io.GwtWorkarounds$CharOutput) -> encodingStream
    int maxDecodedSize(int) -> maxDecodedSize
    com.google.common.io.GwtWorkarounds$ByteInput decodingStream(com.google.common.io.GwtWorkarounds$CharInput) -> decodingStream
    com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    com.google.common.io.BaseEncoding upperCase() -> upperCase
    com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    java.lang.String toString() -> toString
    com.google.common.io.BaseEncoding$Alphabet access$000(com.google.common.io.BaseEncoding$StandardBaseEncoding) -> access$000
    java.lang.Character access$100(com.google.common.io.BaseEncoding$StandardBaseEncoding) -> access$100
com.google.common.io.BaseEncoding$StandardBaseEncoding$1 -> com.google.common.io.BaseEncoding$StandardBaseEncoding$1:
    int bitBuffer -> bitBuffer
    int bitBufferLength -> bitBufferLength
    int writtenChars -> writtenChars
    com.google.common.io.GwtWorkarounds$CharOutput val$out -> val$out
    com.google.common.io.BaseEncoding$StandardBaseEncoding this$0 -> this$0
    void write(byte) -> write
    void flush() -> flush
    void close() -> close
com.google.common.io.BaseEncoding$StandardBaseEncoding$2 -> com.google.common.io.BaseEncoding$StandardBaseEncoding$2:
    int bitBuffer -> bitBuffer
    int bitBufferLength -> bitBufferLength
    int readChars -> readChars
    boolean hitPadding -> hitPadding
    com.google.common.base.CharMatcher paddingMatcher -> paddingMatcher
    com.google.common.io.GwtWorkarounds$CharInput val$reader -> val$reader
    com.google.common.io.BaseEncoding$StandardBaseEncoding this$0 -> this$0
    int read() -> read
    void close() -> close
com.google.common.io.ByteArrayDataInput -> com.google.common.io.ByteArrayDataInput:
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
com.google.common.io.ByteArrayDataOutput -> com.google.common.io.ByteArrayDataOutput:
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeShort(int) -> writeShort
    void writeChar(int) -> writeChar
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeChars(java.lang.String) -> writeChars
    void writeUTF(java.lang.String) -> writeUTF
    void writeBytes(java.lang.String) -> writeBytes
    byte[] toByteArray() -> toByteArray
com.google.common.io.ByteProcessor -> com.google.common.io.ByteProcessor:
    boolean processBytes(byte[],int,int) -> processBytes
    java.lang.Object getResult() -> getResult
com.google.common.io.ByteSink -> com.google.common.io.ByteSink:
    com.google.common.io.CharSink asCharSink(java.nio.charset.Charset) -> asCharSink
    java.io.OutputStream openStream() -> openStream
    java.io.OutputStream openBufferedStream() -> openBufferedStream
    void write(byte[]) -> write
    long writeFrom(java.io.InputStream) -> writeFrom
com.google.common.io.ByteSink$1 -> com.google.common.io.ByteSink$1:
com.google.common.io.ByteSink$AsCharSink -> com.google.common.io.ByteSink$AsCharSink:
    java.nio.charset.Charset charset -> charset
    com.google.common.io.ByteSink this$0 -> this$0
    java.io.Writer openStream() -> openStream
    java.lang.String toString() -> toString
com.google.common.io.ByteSource -> com.google.common.io.ByteSource:
    int BUF_SIZE -> BUF_SIZE
    byte[] countBuffer -> countBuffer
    com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    java.io.InputStream openStream() -> openStream
    java.io.InputStream openBufferedStream() -> openBufferedStream
    com.google.common.io.ByteSource slice(long,long) -> slice
    boolean isEmpty() -> isEmpty
    long size() -> size
    long countBySkipping(java.io.InputStream) -> countBySkipping
    long countByReading(java.io.InputStream) -> countByReading
    long copyTo(java.io.OutputStream) -> copyTo
    long copyTo(com.google.common.io.ByteSink) -> copyTo
    byte[] read() -> read
    java.lang.Object read(com.google.common.io.ByteProcessor) -> read
    com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction) -> hash
    boolean contentEquals(com.google.common.io.ByteSource) -> contentEquals
    com.google.common.io.ByteSource concat(java.lang.Iterable) -> concat
    com.google.common.io.ByteSource concat(java.util.Iterator) -> concat
    com.google.common.io.ByteSource concat(com.google.common.io.ByteSource[]) -> concat
    com.google.common.io.ByteSource wrap(byte[]) -> wrap
    com.google.common.io.ByteSource empty() -> empty
com.google.common.io.ByteSource$1 -> com.google.common.io.ByteSource$1:
com.google.common.io.ByteSource$AsCharSource -> com.google.common.io.ByteSource$AsCharSource:
    java.nio.charset.Charset charset -> charset
    com.google.common.io.ByteSource this$0 -> this$0
    java.io.Reader openStream() -> openStream
    java.lang.String toString() -> toString
com.google.common.io.ByteSource$ByteArrayByteSource -> com.google.common.io.ByteSource$ByteArrayByteSource:
    byte[] bytes -> bytes
    java.io.InputStream openStream() -> openStream
    java.io.InputStream openBufferedStream() -> openBufferedStream
    boolean isEmpty() -> isEmpty
    long size() -> size
    byte[] read() -> read
    long copyTo(java.io.OutputStream) -> copyTo
    java.lang.Object read(com.google.common.io.ByteProcessor) -> read
    com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction) -> hash
    java.lang.String toString() -> toString
com.google.common.io.ByteSource$ConcatenatedByteSource -> com.google.common.io.ByteSource$ConcatenatedByteSource:
    java.lang.Iterable sources -> sources
    java.io.InputStream openStream() -> openStream
    boolean isEmpty() -> isEmpty
    long size() -> size
    java.lang.String toString() -> toString
com.google.common.io.ByteSource$EmptyByteSource -> com.google.common.io.ByteSource$EmptyByteSource:
    com.google.common.io.ByteSource$EmptyByteSource INSTANCE -> INSTANCE
    com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    byte[] read() -> read
    java.lang.String toString() -> toString
    com.google.common.io.ByteSource$EmptyByteSource access$200() -> access$200
com.google.common.io.ByteSource$SlicedByteSource -> com.google.common.io.ByteSource$SlicedByteSource:
    long offset -> offset
    long length -> length
    com.google.common.io.ByteSource this$0 -> this$0
    java.io.InputStream openStream() -> openStream
    java.io.InputStream openBufferedStream() -> openBufferedStream
    java.io.InputStream sliceStream(java.io.InputStream) -> sliceStream
    com.google.common.io.ByteSource slice(long,long) -> slice
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
com.google.common.io.ByteStreams -> com.google.common.io.ByteStreams:
    int BUF_SIZE -> BUF_SIZE
    java.io.OutputStream NULL_OUTPUT_STREAM -> NULL_OUTPUT_STREAM
    long copy(java.io.InputStream,java.io.OutputStream) -> copy
    long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel) -> copy
    byte[] toByteArray(java.io.InputStream) -> toByteArray
    byte[] toByteArray(java.io.InputStream,int) -> toByteArray
    com.google.common.io.ByteArrayDataInput newDataInput(byte[]) -> newDataInput
    com.google.common.io.ByteArrayDataInput newDataInput(byte[],int) -> newDataInput
    com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream) -> newDataInput
    com.google.common.io.ByteArrayDataOutput newDataOutput() -> newDataOutput
    com.google.common.io.ByteArrayDataOutput newDataOutput(int) -> newDataOutput
    com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream) -> newDataOutput
    java.io.OutputStream nullOutputStream() -> nullOutputStream
    java.io.InputStream limit(java.io.InputStream,long) -> limit
    void readFully(java.io.InputStream,byte[]) -> readFully
    void readFully(java.io.InputStream,byte[],int,int) -> readFully
    void skipFully(java.io.InputStream,long) -> skipFully
    java.lang.Object readBytes(java.io.InputStream,com.google.common.io.ByteProcessor) -> readBytes
    int read(java.io.InputStream,byte[],int,int) -> read
com.google.common.io.ByteStreams$1 -> com.google.common.io.ByteStreams$1:
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    java.lang.String toString() -> toString
com.google.common.io.ByteStreams$ByteArrayDataInputStream -> com.google.common.io.ByteStreams$ByteArrayDataInputStream:
    java.io.DataInput input -> input
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
com.google.common.io.ByteStreams$ByteArrayDataOutputStream -> com.google.common.io.ByteStreams$ByteArrayDataOutputStream:
    java.io.DataOutput output -> output
    java.io.ByteArrayOutputStream byteArrayOutputSteam -> byteArrayOutputSteam
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeBytes(java.lang.String) -> writeBytes
    void writeChar(int) -> writeChar
    void writeChars(java.lang.String) -> writeChars
    void writeDouble(double) -> writeDouble
    void writeFloat(float) -> writeFloat
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeShort(int) -> writeShort
    void writeUTF(java.lang.String) -> writeUTF
    byte[] toByteArray() -> toByteArray
com.google.common.io.ByteStreams$FastByteArrayOutputStream -> com.google.common.io.ByteStreams$FastByteArrayOutputStream:
    void writeTo(byte[],int) -> writeTo
com.google.common.io.ByteStreams$LimitedInputStream -> com.google.common.io.ByteStreams$LimitedInputStream:
    long left -> left
    long mark -> mark
    int available() -> available
    void mark(int) -> mark
    int read() -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
com.google.common.io.CharSequenceReader -> com.google.common.io.CharSequenceReader:
    java.lang.CharSequence seq -> seq
    int pos -> pos
    int mark -> mark
    void checkOpen() -> checkOpen
    boolean hasRemaining() -> hasRemaining
    int remaining() -> remaining
    int read(java.nio.CharBuffer) -> read
    int read() -> read
    int read(char[],int,int) -> read
    long skip(long) -> skip
    boolean ready() -> ready
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    void close() -> close
com.google.common.io.CharSink -> com.google.common.io.CharSink:
    java.io.Writer openStream() -> openStream
    java.io.Writer openBufferedStream() -> openBufferedStream
    void write(java.lang.CharSequence) -> write
    void writeLines(java.lang.Iterable) -> writeLines
    void writeLines(java.lang.Iterable,java.lang.String) -> writeLines
    long writeFrom(java.lang.Readable) -> writeFrom
com.google.common.io.CharSource -> com.google.common.io.CharSource:
    java.io.Reader openStream() -> openStream
    java.io.BufferedReader openBufferedStream() -> openBufferedStream
    long copyTo(java.lang.Appendable) -> copyTo
    long copyTo(com.google.common.io.CharSink) -> copyTo
    java.lang.String read() -> read
    java.lang.String readFirstLine() -> readFirstLine
    com.google.common.collect.ImmutableList readLines() -> readLines
    java.lang.Object readLines(com.google.common.io.LineProcessor) -> readLines
    boolean isEmpty() -> isEmpty
    com.google.common.io.CharSource concat(java.lang.Iterable) -> concat
    com.google.common.io.CharSource concat(java.util.Iterator) -> concat
    com.google.common.io.CharSource concat(com.google.common.io.CharSource[]) -> concat
    com.google.common.io.CharSource wrap(java.lang.CharSequence) -> wrap
    com.google.common.io.CharSource empty() -> empty
com.google.common.io.CharSource$CharSequenceCharSource -> com.google.common.io.CharSource$CharSequenceCharSource:
    com.google.common.base.Splitter LINE_SPLITTER -> LINE_SPLITTER
    java.lang.CharSequence seq -> seq
    java.io.Reader openStream() -> openStream
    java.lang.String read() -> read
    boolean isEmpty() -> isEmpty
    java.lang.Iterable lines() -> lines
    java.lang.String readFirstLine() -> readFirstLine
    com.google.common.collect.ImmutableList readLines() -> readLines
    java.lang.Object readLines(com.google.common.io.LineProcessor) -> readLines
    java.lang.String toString() -> toString
    java.lang.CharSequence access$100(com.google.common.io.CharSource$CharSequenceCharSource) -> access$100
    com.google.common.base.Splitter access$200() -> access$200
com.google.common.io.CharSource$CharSequenceCharSource$1 -> com.google.common.io.CharSource$CharSequenceCharSource$1:
    com.google.common.io.CharSource$CharSequenceCharSource this$0 -> this$0
    java.util.Iterator iterator() -> iterator
com.google.common.io.CharSource$CharSequenceCharSource$1$1 -> com.google.common.io.CharSource$CharSequenceCharSource$1$1:
    java.util.Iterator lines -> lines
    com.google.common.io.CharSource$CharSequenceCharSource$1 this$1 -> this$1
    java.lang.String computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.io.CharSource$ConcatenatedCharSource -> com.google.common.io.CharSource$ConcatenatedCharSource:
    java.lang.Iterable sources -> sources
    java.io.Reader openStream() -> openStream
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
com.google.common.io.CharSource$EmptyCharSource -> com.google.common.io.CharSource$EmptyCharSource:
    com.google.common.io.CharSource$EmptyCharSource INSTANCE -> INSTANCE
    java.lang.String toString() -> toString
    com.google.common.io.CharSource$EmptyCharSource access$000() -> access$000
com.google.common.io.CharStreams -> com.google.common.io.CharStreams:
    int BUF_SIZE -> BUF_SIZE
    long copy(java.lang.Readable,java.lang.Appendable) -> copy
    java.lang.String toString(java.lang.Readable) -> toString
    java.lang.StringBuilder toStringBuilder(java.lang.Readable) -> toStringBuilder
    java.util.List readLines(java.lang.Readable) -> readLines
    java.lang.Object readLines(java.lang.Readable,com.google.common.io.LineProcessor) -> readLines
    void skipFully(java.io.Reader,long) -> skipFully
    java.io.Writer nullWriter() -> nullWriter
    java.io.Writer asWriter(java.lang.Appendable) -> asWriter
    java.io.Reader asReader(java.lang.Readable) -> asReader
com.google.common.io.CharStreams$1 -> com.google.common.io.CharStreams$1:
    java.lang.Readable val$readable -> val$readable
    int read(char[],int,int) -> read
    int read(java.nio.CharBuffer) -> read
    void close() -> close
com.google.common.io.CharStreams$NullWriter -> com.google.common.io.CharStreams$NullWriter:
    com.google.common.io.CharStreams$NullWriter INSTANCE -> INSTANCE
    void write(int) -> write
    void write(char[]) -> write
    void write(char[],int,int) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    java.io.Writer append(java.lang.CharSequence) -> append
    java.io.Writer append(java.lang.CharSequence,int,int) -> append
    java.io.Writer append(char) -> append
    void flush() -> flush
    void close() -> close
    java.lang.String toString() -> toString
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    com.google.common.io.CharStreams$NullWriter access$000() -> access$000
com.google.common.io.Closeables -> com.google.common.io.Closeables:
    java.util.logging.Logger logger -> logger
    void close(java.io.Closeable,boolean) -> close
    void closeQuietly(java.io.InputStream) -> closeQuietly
    void closeQuietly(java.io.Reader) -> closeQuietly
com.google.common.io.Closer -> com.google.common.io.Closer:
    com.google.common.io.Closer$Suppressor SUPPRESSOR -> SUPPRESSOR
    com.google.common.io.Closer$Suppressor suppressor -> suppressor
    java.util.Deque stack -> stack
    java.lang.Throwable thrown -> thrown
    com.google.common.io.Closer create() -> create
    java.io.Closeable register(java.io.Closeable) -> register
    java.lang.RuntimeException rethrow(java.lang.Throwable) -> rethrow
    java.lang.RuntimeException rethrow(java.lang.Throwable,java.lang.Class) -> rethrow
    java.lang.RuntimeException rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class) -> rethrow
    void close() -> close
com.google.common.io.Closer$LoggingSuppressor -> com.google.common.io.Closer$LoggingSuppressor:
    com.google.common.io.Closer$LoggingSuppressor INSTANCE -> INSTANCE
    void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> suppress
com.google.common.io.Closer$SuppressingSuppressor -> com.google.common.io.Closer$SuppressingSuppressor:
    com.google.common.io.Closer$SuppressingSuppressor INSTANCE -> INSTANCE
    java.lang.reflect.Method addSuppressed -> addSuppressed
    boolean isAvailable() -> isAvailable
    java.lang.reflect.Method getAddSuppressed() -> getAddSuppressed
    void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> suppress
com.google.common.io.Closer$Suppressor -> com.google.common.io.Closer$Suppressor:
    void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> suppress
com.google.common.io.CountingInputStream -> com.google.common.io.CountingInputStream:
    long count -> count
    long mark -> mark
    long getCount() -> getCount
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    void mark(int) -> mark
    void reset() -> reset
com.google.common.io.CountingOutputStream -> com.google.common.io.CountingOutputStream:
    long count -> count
    long getCount() -> getCount
    void write(byte[],int,int) -> write
    void write(int) -> write
    void close() -> close
com.google.common.io.FileBackedOutputStream -> com.google.common.io.FileBackedOutputStream:
    int fileThreshold -> fileThreshold
    boolean resetOnFinalize -> resetOnFinalize
    com.google.common.io.ByteSource source -> source
    java.io.OutputStream out -> out
    com.google.common.io.FileBackedOutputStream$MemoryOutput memory -> memory
    java.io.File file -> file
    java.io.File getFile() -> getFile
    com.google.common.io.ByteSource asByteSource() -> asByteSource
    java.io.InputStream openInputStream() -> openInputStream
    void reset() -> reset
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void close() -> close
    void flush() -> flush
    void update(int) -> update
    java.io.InputStream access$100(com.google.common.io.FileBackedOutputStream) -> access$100
com.google.common.io.FileBackedOutputStream$1 -> com.google.common.io.FileBackedOutputStream$1:
    com.google.common.io.FileBackedOutputStream this$0 -> this$0
    java.io.InputStream openStream() -> openStream
    void finalize() -> finalize
com.google.common.io.FileBackedOutputStream$2 -> com.google.common.io.FileBackedOutputStream$2:
    com.google.common.io.FileBackedOutputStream this$0 -> this$0
    java.io.InputStream openStream() -> openStream
com.google.common.io.FileBackedOutputStream$MemoryOutput -> com.google.common.io.FileBackedOutputStream$MemoryOutput:
    byte[] getBuffer() -> getBuffer
    int getCount() -> getCount
com.google.common.io.FileWriteMode -> com.google.common.io.FileWriteMode:
    com.google.common.io.FileWriteMode APPEND -> APPEND
    com.google.common.io.FileWriteMode[] $VALUES -> $VALUES
    com.google.common.io.FileWriteMode[] values() -> values
    com.google.common.io.FileWriteMode valueOf(java.lang.String) -> valueOf
com.google.common.io.Files -> com.google.common.io.Files:
    int TEMP_DIR_ATTEMPTS -> TEMP_DIR_ATTEMPTS
    com.google.common.collect.TreeTraverser FILE_TREE_TRAVERSER -> FILE_TREE_TRAVERSER
    java.io.BufferedReader newReader(java.io.File,java.nio.charset.Charset) -> newReader
    java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset) -> newWriter
    com.google.common.io.ByteSource asByteSource(java.io.File) -> asByteSource
    byte[] readFile(java.io.InputStream,long) -> readFile
    com.google.common.io.ByteSink asByteSink(java.io.File,com.google.common.io.FileWriteMode[]) -> asByteSink
    com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset) -> asCharSource
    com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,com.google.common.io.FileWriteMode[]) -> asCharSink
    com.google.common.io.FileWriteMode[] modes(boolean) -> modes
    byte[] toByteArray(java.io.File) -> toByteArray
    java.lang.String toString(java.io.File,java.nio.charset.Charset) -> toString
    void write(byte[],java.io.File) -> write
    void copy(java.io.File,java.io.OutputStream) -> copy
    void copy(java.io.File,java.io.File) -> copy
    void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset) -> write
    void append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset) -> append
    void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset,boolean) -> write
    void copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable) -> copy
    boolean equal(java.io.File,java.io.File) -> equal
    java.io.File createTempDir() -> createTempDir
    void touch(java.io.File) -> touch
    void createParentDirs(java.io.File) -> createParentDirs
    void move(java.io.File,java.io.File) -> move
    java.lang.String readFirstLine(java.io.File,java.nio.charset.Charset) -> readFirstLine
    java.util.List readLines(java.io.File,java.nio.charset.Charset) -> readLines
    java.lang.Object readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor) -> readLines
    java.lang.Object readBytes(java.io.File,com.google.common.io.ByteProcessor) -> readBytes
    com.google.common.hash.HashCode hash(java.io.File,com.google.common.hash.HashFunction) -> hash
    java.nio.MappedByteBuffer map(java.io.File) -> map
    java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode) -> map
    java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode,long) -> map
    java.nio.MappedByteBuffer map(java.io.RandomAccessFile,java.nio.channels.FileChannel$MapMode,long) -> map
    java.lang.String simplifyPath(java.lang.String) -> simplifyPath
    java.lang.String getFileExtension(java.lang.String) -> getFileExtension
    java.lang.String getNameWithoutExtension(java.lang.String) -> getNameWithoutExtension
    com.google.common.collect.TreeTraverser fileTreeTraverser() -> fileTreeTraverser
    com.google.common.base.Predicate isDirectory() -> isDirectory
    com.google.common.base.Predicate isFile() -> isFile
com.google.common.io.Files$1 -> com.google.common.io.Files$1:
    java.util.List result -> result
    boolean processLine(java.lang.String) -> processLine
    java.util.List getResult() -> getResult
    java.lang.Object getResult() -> getResult
com.google.common.io.Files$2 -> com.google.common.io.Files$2:
    java.lang.Iterable children(java.io.File) -> children
    java.lang.String toString() -> toString
    java.lang.Iterable children(java.lang.Object) -> children
com.google.common.io.Files$FileByteSink -> com.google.common.io.Files$FileByteSink:
    java.io.File file -> file
    com.google.common.collect.ImmutableSet modes -> modes
    java.io.FileOutputStream openStream() -> openStream
    java.lang.String toString() -> toString
    java.io.OutputStream openStream() -> openStream
com.google.common.io.Files$FileByteSource -> com.google.common.io.Files$FileByteSource:
    java.io.File file -> file
    java.io.FileInputStream openStream() -> openStream
    long size() -> size
    byte[] read() -> read
    java.lang.String toString() -> toString
    java.io.InputStream openStream() -> openStream
com.google.common.io.Files$FilePredicate -> com.google.common.io.Files$FilePredicate:
    com.google.common.io.Files$FilePredicate IS_DIRECTORY -> IS_DIRECTORY
    com.google.common.io.Files$FilePredicate IS_FILE -> IS_FILE
    com.google.common.io.Files$FilePredicate[] $VALUES -> $VALUES
    com.google.common.io.Files$FilePredicate[] values() -> values
    com.google.common.io.Files$FilePredicate valueOf(java.lang.String) -> valueOf
com.google.common.io.Files$FilePredicate$1 -> com.google.common.io.Files$FilePredicate$1:
    boolean apply(java.io.File) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.io.Files$FilePredicate$2 -> com.google.common.io.Files$FilePredicate$2:
    boolean apply(java.io.File) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.io.Flushables -> com.google.common.io.Flushables:
    java.util.logging.Logger logger -> logger
    void flush(java.io.Flushable,boolean) -> flush
    void flushQuietly(java.io.Flushable) -> flushQuietly
com.google.common.io.GwtWorkarounds -> com.google.common.io.GwtWorkarounds:
    com.google.common.io.GwtWorkarounds$CharInput asCharInput(java.io.Reader) -> asCharInput
    com.google.common.io.GwtWorkarounds$CharInput asCharInput(java.lang.CharSequence) -> asCharInput
    java.io.InputStream asInputStream(com.google.common.io.GwtWorkarounds$ByteInput) -> asInputStream
    java.io.OutputStream asOutputStream(com.google.common.io.GwtWorkarounds$ByteOutput) -> asOutputStream
    com.google.common.io.GwtWorkarounds$CharOutput asCharOutput(java.io.Writer) -> asCharOutput
    com.google.common.io.GwtWorkarounds$CharOutput stringBuilderOutput(int) -> stringBuilderOutput
com.google.common.io.GwtWorkarounds$1 -> com.google.common.io.GwtWorkarounds$1:
    java.io.Reader val$reader -> val$reader
    int read() -> read
    void close() -> close
com.google.common.io.GwtWorkarounds$2 -> com.google.common.io.GwtWorkarounds$2:
    int index -> index
    java.lang.CharSequence val$chars -> val$chars
    int read() -> read
    void close() -> close
com.google.common.io.GwtWorkarounds$3 -> com.google.common.io.GwtWorkarounds$3:
    com.google.common.io.GwtWorkarounds$ByteInput val$input -> val$input
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
com.google.common.io.GwtWorkarounds$4 -> com.google.common.io.GwtWorkarounds$4:
    com.google.common.io.GwtWorkarounds$ByteOutput val$output -> val$output
    void write(int) -> write
    void flush() -> flush
    void close() -> close
com.google.common.io.GwtWorkarounds$5 -> com.google.common.io.GwtWorkarounds$5:
    java.io.Writer val$writer -> val$writer
    void write(char) -> write
    void flush() -> flush
    void close() -> close
com.google.common.io.GwtWorkarounds$6 -> com.google.common.io.GwtWorkarounds$6:
    java.lang.StringBuilder val$builder -> val$builder
    void write(char) -> write
    void flush() -> flush
    void close() -> close
    java.lang.String toString() -> toString
com.google.common.io.GwtWorkarounds$ByteInput -> com.google.common.io.GwtWorkarounds$ByteInput:
    int read() -> read
    void close() -> close
com.google.common.io.GwtWorkarounds$ByteOutput -> com.google.common.io.GwtWorkarounds$ByteOutput:
    void write(byte) -> write
    void flush() -> flush
    void close() -> close
com.google.common.io.GwtWorkarounds$CharInput -> com.google.common.io.GwtWorkarounds$CharInput:
    int read() -> read
    void close() -> close
com.google.common.io.GwtWorkarounds$CharOutput -> com.google.common.io.GwtWorkarounds$CharOutput:
    void write(char) -> write
    void flush() -> flush
    void close() -> close
com.google.common.io.InputSupplier -> com.google.common.io.InputSupplier:
    java.lang.Object getInput() -> getInput
com.google.common.io.LineBuffer -> com.google.common.io.LineBuffer:
    java.lang.StringBuilder line -> line
    boolean sawReturn -> sawReturn
    void add(char[],int,int) -> add
    boolean finishLine(boolean) -> finishLine
    void finish() -> finish
    void handleLine(java.lang.String,java.lang.String) -> handleLine
com.google.common.io.LineProcessor -> com.google.common.io.LineProcessor:
    boolean processLine(java.lang.String) -> processLine
    java.lang.Object getResult() -> getResult
com.google.common.io.LineReader -> com.google.common.io.LineReader:
    java.lang.Readable readable -> readable
    java.io.Reader reader -> reader
    char[] buf -> buf
    java.nio.CharBuffer cbuf -> cbuf
    java.util.Queue lines -> lines
    com.google.common.io.LineBuffer lineBuf -> lineBuf
    java.lang.String readLine() -> readLine
    java.util.Queue access$000(com.google.common.io.LineReader) -> access$000
com.google.common.io.LineReader$1 -> com.google.common.io.LineReader$1:
    com.google.common.io.LineReader this$0 -> this$0
    void handleLine(java.lang.String,java.lang.String) -> handleLine
com.google.common.io.LittleEndianDataInputStream -> com.google.common.io.LittleEndianDataInputStream:
    java.lang.String readLine() -> readLine
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    int readUnsignedByte() -> readUnsignedByte
    int readUnsignedShort() -> readUnsignedShort
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readUTF() -> readUTF
    short readShort() -> readShort
    char readChar() -> readChar
    byte readByte() -> readByte
    boolean readBoolean() -> readBoolean
    byte readAndCheckByte() -> readAndCheckByte
com.google.common.io.LittleEndianDataOutputStream -> com.google.common.io.LittleEndianDataOutputStream:
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeBytes(java.lang.String) -> writeBytes
    void writeChar(int) -> writeChar
    void writeChars(java.lang.String) -> writeChars
    void writeDouble(double) -> writeDouble
    void writeFloat(float) -> writeFloat
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeShort(int) -> writeShort
    void writeUTF(java.lang.String) -> writeUTF
    void close() -> close
com.google.common.io.MultiInputStream -> com.google.common.io.MultiInputStream:
    java.util.Iterator it -> it
    java.io.InputStream in -> in
    void close() -> close
    void advance() -> advance
    int available() -> available
    boolean markSupported() -> markSupported
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
com.google.common.io.MultiReader -> com.google.common.io.MultiReader:
    java.util.Iterator it -> it
    java.io.Reader current -> current
    void advance() -> advance
    int read(char[],int,int) -> read
    long skip(long) -> skip
    boolean ready() -> ready
    void close() -> close
com.google.common.io.OutputSupplier -> com.google.common.io.OutputSupplier:
    java.lang.Object getOutput() -> getOutput
com.google.common.io.PatternFilenameFilter -> com.google.common.io.PatternFilenameFilter:
    java.util.regex.Pattern pattern -> pattern
    boolean accept(java.io.File,java.lang.String) -> accept
com.google.common.io.Resources -> com.google.common.io.Resources:
    com.google.common.io.ByteSource asByteSource(java.net.URL) -> asByteSource
    com.google.common.io.CharSource asCharSource(java.net.URL,java.nio.charset.Charset) -> asCharSource
    byte[] toByteArray(java.net.URL) -> toByteArray
    java.lang.String toString(java.net.URL,java.nio.charset.Charset) -> toString
    java.lang.Object readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor) -> readLines
    java.util.List readLines(java.net.URL,java.nio.charset.Charset) -> readLines
    void copy(java.net.URL,java.io.OutputStream) -> copy
    java.net.URL getResource(java.lang.String) -> getResource
    java.net.URL getResource(java.lang.Class,java.lang.String) -> getResource
com.google.common.io.Resources$1 -> com.google.common.io.Resources$1:
    java.util.List result -> result
    boolean processLine(java.lang.String) -> processLine
    java.util.List getResult() -> getResult
    java.lang.Object getResult() -> getResult
com.google.common.io.Resources$UrlByteSource -> com.google.common.io.Resources$UrlByteSource:
    java.net.URL url -> url
    java.io.InputStream openStream() -> openStream
    java.lang.String toString() -> toString
com.google.common.io.package-info -> com.google.common.io.package-info:
com.google.common.math.BigIntegerMath -> com.google.common.math.BigIntegerMath:
    int SQRT2_PRECOMPUTE_THRESHOLD -> SQRT2_PRECOMPUTE_THRESHOLD
    java.math.BigInteger SQRT2_PRECOMPUTED_BITS -> SQRT2_PRECOMPUTED_BITS
    double LN_10 -> LN_10
    double LN_2 -> LN_2
    boolean isPowerOfTwo(java.math.BigInteger) -> isPowerOfTwo
    int log2(java.math.BigInteger,java.math.RoundingMode) -> log2
    int log10(java.math.BigInteger,java.math.RoundingMode) -> log10
    java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode) -> sqrt
    java.math.BigInteger sqrtFloor(java.math.BigInteger) -> sqrtFloor
    java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger) -> sqrtApproxWithDoubles
    java.math.BigInteger divide(java.math.BigInteger,java.math.BigInteger,java.math.RoundingMode) -> divide
    java.math.BigInteger factorial(int) -> factorial
    java.math.BigInteger listProduct(java.util.List) -> listProduct
    java.math.BigInteger listProduct(java.util.List,int,int) -> listProduct
    java.math.BigInteger binomial(int,int) -> binomial
    boolean fitsInLong(java.math.BigInteger) -> fitsInLong
com.google.common.math.BigIntegerMath$1 -> com.google.common.math.BigIntegerMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
com.google.common.math.DoubleMath -> com.google.common.math.DoubleMath:
    double MIN_INT_AS_DOUBLE -> MIN_INT_AS_DOUBLE
    double MAX_INT_AS_DOUBLE -> MAX_INT_AS_DOUBLE
    double MIN_LONG_AS_DOUBLE -> MIN_LONG_AS_DOUBLE
    double MAX_LONG_AS_DOUBLE_PLUS_ONE -> MAX_LONG_AS_DOUBLE_PLUS_ONE
    double LN_2 -> LN_2
    int MAX_FACTORIAL -> MAX_FACTORIAL
    double[] everySixteenthFactorial -> everySixteenthFactorial
    double roundIntermediate(double,java.math.RoundingMode) -> roundIntermediate
    int roundToInt(double,java.math.RoundingMode) -> roundToInt
    long roundToLong(double,java.math.RoundingMode) -> roundToLong
    java.math.BigInteger roundToBigInteger(double,java.math.RoundingMode) -> roundToBigInteger
    boolean isPowerOfTwo(double) -> isPowerOfTwo
    double log2(double) -> log2
    int log2(double,java.math.RoundingMode) -> log2
    boolean isMathematicalInteger(double) -> isMathematicalInteger
    double factorial(int) -> factorial
    boolean fuzzyEquals(double,double,double) -> fuzzyEquals
    int fuzzyCompare(double,double,double) -> fuzzyCompare
    double mean(double[]) -> mean
    double mean(int[]) -> mean
    double mean(long[]) -> mean
    double mean(java.lang.Iterable) -> mean
    double mean(java.util.Iterator) -> mean
com.google.common.math.DoubleMath$1 -> com.google.common.math.DoubleMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
com.google.common.math.DoubleMath$MeanAccumulator -> com.google.common.math.DoubleMath$MeanAccumulator:
    long count -> count
    double mean -> mean
    void add(double) -> add
    double mean() -> mean
com.google.common.math.DoubleUtils -> com.google.common.math.DoubleUtils:
    long SIGNIFICAND_MASK -> SIGNIFICAND_MASK
    long EXPONENT_MASK -> EXPONENT_MASK
    long SIGN_MASK -> SIGN_MASK
    int SIGNIFICAND_BITS -> SIGNIFICAND_BITS
    int EXPONENT_BIAS -> EXPONENT_BIAS
    long IMPLICIT_BIT -> IMPLICIT_BIT
    long ONE_BITS -> ONE_BITS
    double nextDown(double) -> nextDown
    long getSignificand(double) -> getSignificand
    boolean isFinite(double) -> isFinite
    boolean isNormal(double) -> isNormal
    double scaleNormalize(double) -> scaleNormalize
    double bigToDouble(java.math.BigInteger) -> bigToDouble
    double ensureNonNegative(double) -> ensureNonNegative
com.google.common.math.IntMath -> com.google.common.math.IntMath:
    int MAX_POWER_OF_SQRT2_UNSIGNED -> MAX_POWER_OF_SQRT2_UNSIGNED
    byte[] maxLog10ForLeadingZeros -> maxLog10ForLeadingZeros
    int[] powersOf10 -> powersOf10
    int[] halfPowersOf10 -> halfPowersOf10
    int FLOOR_SQRT_MAX_INT -> FLOOR_SQRT_MAX_INT
    int[] factorials -> factorials
    int[] biggestBinomials -> biggestBinomials
    boolean isPowerOfTwo(int) -> isPowerOfTwo
    int lessThanBranchFree(int,int) -> lessThanBranchFree
    int log2(int,java.math.RoundingMode) -> log2
    int log10(int,java.math.RoundingMode) -> log10
    int log10Floor(int) -> log10Floor
    int pow(int,int) -> pow
    int sqrt(int,java.math.RoundingMode) -> sqrt
    int sqrtFloor(int) -> sqrtFloor
    int divide(int,int,java.math.RoundingMode) -> divide
    int mod(int,int) -> mod
    int gcd(int,int) -> gcd
    int checkedAdd(int,int) -> checkedAdd
    int checkedSubtract(int,int) -> checkedSubtract
    int checkedMultiply(int,int) -> checkedMultiply
    int checkedPow(int,int) -> checkedPow
    int factorial(int) -> factorial
    int binomial(int,int) -> binomial
    int mean(int,int) -> mean
com.google.common.math.IntMath$1 -> com.google.common.math.IntMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
com.google.common.math.LongMath -> com.google.common.math.LongMath:
    long MAX_POWER_OF_SQRT2_UNSIGNED -> MAX_POWER_OF_SQRT2_UNSIGNED
    byte[] maxLog10ForLeadingZeros -> maxLog10ForLeadingZeros
    long[] powersOf10 -> powersOf10
    long[] halfPowersOf10 -> halfPowersOf10
    long FLOOR_SQRT_MAX_LONG -> FLOOR_SQRT_MAX_LONG
    long[] factorials -> factorials
    int[] biggestBinomials -> biggestBinomials
    int[] biggestSimpleBinomials -> biggestSimpleBinomials
    boolean isPowerOfTwo(long) -> isPowerOfTwo
    int lessThanBranchFree(long,long) -> lessThanBranchFree
    int log2(long,java.math.RoundingMode) -> log2
    int log10(long,java.math.RoundingMode) -> log10
    int log10Floor(long) -> log10Floor
    long pow(long,int) -> pow
    long sqrt(long,java.math.RoundingMode) -> sqrt
    long divide(long,long,java.math.RoundingMode) -> divide
    int mod(long,int) -> mod
    long mod(long,long) -> mod
    long gcd(long,long) -> gcd
    long checkedAdd(long,long) -> checkedAdd
    long checkedSubtract(long,long) -> checkedSubtract
    long checkedMultiply(long,long) -> checkedMultiply
    long checkedPow(long,int) -> checkedPow
    long factorial(int) -> factorial
    long binomial(int,int) -> binomial
    long multiplyFraction(long,long,long) -> multiplyFraction
    boolean fitsInInt(long) -> fitsInInt
    long mean(long,long) -> mean
com.google.common.math.LongMath$1 -> com.google.common.math.LongMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
com.google.common.math.MathPreconditions -> com.google.common.math.MathPreconditions:
    int checkPositive(java.lang.String,int) -> checkPositive
    long checkPositive(java.lang.String,long) -> checkPositive
    java.math.BigInteger checkPositive(java.lang.String,java.math.BigInteger) -> checkPositive
    int checkNonNegative(java.lang.String,int) -> checkNonNegative
    long checkNonNegative(java.lang.String,long) -> checkNonNegative
    java.math.BigInteger checkNonNegative(java.lang.String,java.math.BigInteger) -> checkNonNegative
    double checkNonNegative(java.lang.String,double) -> checkNonNegative
    void checkRoundingUnnecessary(boolean) -> checkRoundingUnnecessary
    void checkInRange(boolean) -> checkInRange
    void checkNoOverflow(boolean) -> checkNoOverflow
com.google.common.math.package-info -> com.google.common.math.package-info:
com.google.common.net.HostAndPort -> com.google.common.net.HostAndPort:
    int NO_PORT -> NO_PORT
    java.lang.String host -> host
    int port -> port
    boolean hasBracketlessColons -> hasBracketlessColons
    long serialVersionUID -> serialVersionUID
    java.lang.String getHostText() -> getHostText
    boolean hasPort() -> hasPort
    int getPort() -> getPort
    int getPortOrDefault(int) -> getPortOrDefault
    com.google.common.net.HostAndPort fromParts(java.lang.String,int) -> fromParts
    com.google.common.net.HostAndPort fromHost(java.lang.String) -> fromHost
    com.google.common.net.HostAndPort fromString(java.lang.String) -> fromString
    java.lang.String[] getHostAndPortFromBracketedHost(java.lang.String) -> getHostAndPortFromBracketedHost
    com.google.common.net.HostAndPort withDefaultPort(int) -> withDefaultPort
    com.google.common.net.HostAndPort requireBracketsForIPv6() -> requireBracketsForIPv6
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isValidPort(int) -> isValidPort
com.google.common.net.HostSpecifier -> com.google.common.net.HostSpecifier:
    java.lang.String canonicalForm -> canonicalForm
    com.google.common.net.HostSpecifier fromValid(java.lang.String) -> fromValid
    com.google.common.net.HostSpecifier from(java.lang.String) -> from
    boolean isValid(java.lang.String) -> isValid
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.net.HttpHeaders -> com.google.common.net.HttpHeaders:
    java.lang.String CACHE_CONTROL -> CACHE_CONTROL
    java.lang.String CONTENT_LENGTH -> CONTENT_LENGTH
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String DATE -> DATE
    java.lang.String PRAGMA -> PRAGMA
    java.lang.String VIA -> VIA
    java.lang.String WARNING -> WARNING
    java.lang.String ACCEPT -> ACCEPT
    java.lang.String ACCEPT_CHARSET -> ACCEPT_CHARSET
    java.lang.String ACCEPT_ENCODING -> ACCEPT_ENCODING
    java.lang.String ACCEPT_LANGUAGE -> ACCEPT_LANGUAGE
    java.lang.String ACCESS_CONTROL_REQUEST_HEADERS -> ACCESS_CONTROL_REQUEST_HEADERS
    java.lang.String ACCESS_CONTROL_REQUEST_METHOD -> ACCESS_CONTROL_REQUEST_METHOD
    java.lang.String AUTHORIZATION -> AUTHORIZATION
    java.lang.String CONNECTION -> CONNECTION
    java.lang.String COOKIE -> COOKIE
    java.lang.String EXPECT -> EXPECT
    java.lang.String FROM -> FROM
    java.lang.String FOLLOW_ONLY_WHEN_PRERENDER_SHOWN -> FOLLOW_ONLY_WHEN_PRERENDER_SHOWN
    java.lang.String HOST -> HOST
    java.lang.String IF_MATCH -> IF_MATCH
    java.lang.String IF_MODIFIED_SINCE -> IF_MODIFIED_SINCE
    java.lang.String IF_NONE_MATCH -> IF_NONE_MATCH
    java.lang.String IF_RANGE -> IF_RANGE
    java.lang.String IF_UNMODIFIED_SINCE -> IF_UNMODIFIED_SINCE
    java.lang.String LAST_EVENT_ID -> LAST_EVENT_ID
    java.lang.String MAX_FORWARDS -> MAX_FORWARDS
    java.lang.String ORIGIN -> ORIGIN
    java.lang.String PROXY_AUTHORIZATION -> PROXY_AUTHORIZATION
    java.lang.String RANGE -> RANGE
    java.lang.String REFERER -> REFERER
    java.lang.String TE -> TE
    java.lang.String UPGRADE -> UPGRADE
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String ACCEPT_RANGES -> ACCEPT_RANGES
    java.lang.String ACCESS_CONTROL_ALLOW_HEADERS -> ACCESS_CONTROL_ALLOW_HEADERS
    java.lang.String ACCESS_CONTROL_ALLOW_METHODS -> ACCESS_CONTROL_ALLOW_METHODS
    java.lang.String ACCESS_CONTROL_ALLOW_ORIGIN -> ACCESS_CONTROL_ALLOW_ORIGIN
    java.lang.String ACCESS_CONTROL_ALLOW_CREDENTIALS -> ACCESS_CONTROL_ALLOW_CREDENTIALS
    java.lang.String ACCESS_CONTROL_EXPOSE_HEADERS -> ACCESS_CONTROL_EXPOSE_HEADERS
    java.lang.String ACCESS_CONTROL_MAX_AGE -> ACCESS_CONTROL_MAX_AGE
    java.lang.String AGE -> AGE
    java.lang.String ALLOW -> ALLOW
    java.lang.String CONTENT_DISPOSITION -> CONTENT_DISPOSITION
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LANGUAGE -> CONTENT_LANGUAGE
    java.lang.String CONTENT_LOCATION -> CONTENT_LOCATION
    java.lang.String CONTENT_MD5 -> CONTENT_MD5
    java.lang.String CONTENT_RANGE -> CONTENT_RANGE
    java.lang.String CONTENT_SECURITY_POLICY -> CONTENT_SECURITY_POLICY
    java.lang.String CONTENT_SECURITY_POLICY_REPORT_ONLY -> CONTENT_SECURITY_POLICY_REPORT_ONLY
    java.lang.String ETAG -> ETAG
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String LAST_MODIFIED -> LAST_MODIFIED
    java.lang.String LINK -> LINK
    java.lang.String LOCATION -> LOCATION
    java.lang.String P3P -> P3P
    java.lang.String PROXY_AUTHENTICATE -> PROXY_AUTHENTICATE
    java.lang.String REFRESH -> REFRESH
    java.lang.String RETRY_AFTER -> RETRY_AFTER
    java.lang.String SERVER -> SERVER
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String SET_COOKIE2 -> SET_COOKIE2
    java.lang.String STRICT_TRANSPORT_SECURITY -> STRICT_TRANSPORT_SECURITY
    java.lang.String TIMING_ALLOW_ORIGIN -> TIMING_ALLOW_ORIGIN
    java.lang.String TRAILER -> TRAILER
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String VARY -> VARY
    java.lang.String WWW_AUTHENTICATE -> WWW_AUTHENTICATE
    java.lang.String DNT -> DNT
    java.lang.String X_CONTENT_TYPE_OPTIONS -> X_CONTENT_TYPE_OPTIONS
    java.lang.String X_DO_NOT_TRACK -> X_DO_NOT_TRACK
    java.lang.String X_FORWARDED_FOR -> X_FORWARDED_FOR
    java.lang.String X_FORWARDED_PROTO -> X_FORWARDED_PROTO
    java.lang.String X_FRAME_OPTIONS -> X_FRAME_OPTIONS
    java.lang.String X_POWERED_BY -> X_POWERED_BY
    java.lang.String PUBLIC_KEY_PINS -> PUBLIC_KEY_PINS
    java.lang.String PUBLIC_KEY_PINS_REPORT_ONLY -> PUBLIC_KEY_PINS_REPORT_ONLY
    java.lang.String X_REQUESTED_WITH -> X_REQUESTED_WITH
    java.lang.String X_USER_IP -> X_USER_IP
    java.lang.String X_XSS_PROTECTION -> X_XSS_PROTECTION
com.google.common.net.InetAddresses -> com.google.common.net.InetAddresses:
    int IPV4_PART_COUNT -> IPV4_PART_COUNT
    int IPV6_PART_COUNT -> IPV6_PART_COUNT
    java.net.Inet4Address LOOPBACK4 -> LOOPBACK4
    java.net.Inet4Address ANY4 -> ANY4
    java.net.Inet4Address getInet4Address(byte[]) -> getInet4Address
    java.net.InetAddress forString(java.lang.String) -> forString
    boolean isInetAddress(java.lang.String) -> isInetAddress
    byte[] ipStringToBytes(java.lang.String) -> ipStringToBytes
    byte[] textToNumericFormatV4(java.lang.String) -> textToNumericFormatV4
    byte[] textToNumericFormatV6(java.lang.String) -> textToNumericFormatV6
    java.lang.String convertDottedQuadToHex(java.lang.String) -> convertDottedQuadToHex
    byte parseOctet(java.lang.String) -> parseOctet
    short parseHextet(java.lang.String) -> parseHextet
    java.net.InetAddress bytesToInetAddress(byte[]) -> bytesToInetAddress
    java.lang.String toAddrString(java.net.InetAddress) -> toAddrString
    void compressLongestRunOfZeroes(int[]) -> compressLongestRunOfZeroes
    java.lang.String hextetsToIPv6String(int[]) -> hextetsToIPv6String
    java.lang.String toUriString(java.net.InetAddress) -> toUriString
    java.net.InetAddress forUriString(java.lang.String) -> forUriString
    boolean isUriInetAddress(java.lang.String) -> isUriInetAddress
    boolean isCompatIPv4Address(java.net.Inet6Address) -> isCompatIPv4Address
    java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address) -> getCompatIPv4Address
    boolean is6to4Address(java.net.Inet6Address) -> is6to4Address
    java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address) -> get6to4IPv4Address
    boolean isTeredoAddress(java.net.Inet6Address) -> isTeredoAddress
    com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address) -> getTeredoInfo
    boolean isIsatapAddress(java.net.Inet6Address) -> isIsatapAddress
    java.net.Inet4Address getIsatapIPv4Address(java.net.Inet6Address) -> getIsatapIPv4Address
    boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address) -> hasEmbeddedIPv4ClientAddress
    java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address) -> getEmbeddedIPv4ClientAddress
    boolean isMappedIPv4Address(java.lang.String) -> isMappedIPv4Address
    java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress) -> getCoercedIPv4Address
    int coerceToInteger(java.net.InetAddress) -> coerceToInteger
    java.net.Inet4Address fromInteger(int) -> fromInteger
    java.net.InetAddress fromLittleEndianByteArray(byte[]) -> fromLittleEndianByteArray
    java.net.InetAddress decrement(java.net.InetAddress) -> decrement
    java.net.InetAddress increment(java.net.InetAddress) -> increment
    boolean isMaximum(java.net.InetAddress) -> isMaximum
    java.net.Inet4Address access$000() -> access$000
com.google.common.net.InetAddresses$TeredoInfo -> com.google.common.net.InetAddresses$TeredoInfo:
    java.net.Inet4Address server -> server
    java.net.Inet4Address client -> client
    int port -> port
    int flags -> flags
    java.net.Inet4Address getServer() -> getServer
    java.net.Inet4Address getClient() -> getClient
    int getPort() -> getPort
    int getFlags() -> getFlags
com.google.common.net.InternetDomainName -> com.google.common.net.InternetDomainName:
    com.google.common.base.CharMatcher DOTS_MATCHER -> DOTS_MATCHER
    com.google.common.base.Splitter DOT_SPLITTER -> DOT_SPLITTER
    com.google.common.base.Joiner DOT_JOINER -> DOT_JOINER
    int NO_PUBLIC_SUFFIX_FOUND -> NO_PUBLIC_SUFFIX_FOUND
    java.lang.String DOT_REGEX -> DOT_REGEX
    int MAX_PARTS -> MAX_PARTS
    int MAX_LENGTH -> MAX_LENGTH
    int MAX_DOMAIN_PART_LENGTH -> MAX_DOMAIN_PART_LENGTH
    java.lang.String name -> name
    com.google.common.collect.ImmutableList parts -> parts
    int publicSuffixIndex -> publicSuffixIndex
    com.google.common.base.CharMatcher DASH_MATCHER -> DASH_MATCHER
    com.google.common.base.CharMatcher PART_CHAR_MATCHER -> PART_CHAR_MATCHER
    int findPublicSuffix() -> findPublicSuffix
    com.google.common.net.InternetDomainName from(java.lang.String) -> from
    boolean validateSyntax(java.util.List) -> validateSyntax
    boolean validatePart(java.lang.String,boolean) -> validatePart
    com.google.common.collect.ImmutableList parts() -> parts
    boolean isPublicSuffix() -> isPublicSuffix
    boolean hasPublicSuffix() -> hasPublicSuffix
    com.google.common.net.InternetDomainName publicSuffix() -> publicSuffix
    boolean isUnderPublicSuffix() -> isUnderPublicSuffix
    boolean isTopPrivateDomain() -> isTopPrivateDomain
    com.google.common.net.InternetDomainName topPrivateDomain() -> topPrivateDomain
    boolean hasParent() -> hasParent
    com.google.common.net.InternetDomainName parent() -> parent
    com.google.common.net.InternetDomainName ancestor(int) -> ancestor
    com.google.common.net.InternetDomainName child(java.lang.String) -> child
    boolean isValid(java.lang.String) -> isValid
    boolean matchesWildcardPublicSuffix(java.lang.String) -> matchesWildcardPublicSuffix
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.net.MediaType -> com.google.common.net.MediaType:
    java.lang.String CHARSET_ATTRIBUTE -> CHARSET_ATTRIBUTE
    com.google.common.collect.ImmutableListMultimap UTF_8_CONSTANT_PARAMETERS -> UTF_8_CONSTANT_PARAMETERS
    com.google.common.base.CharMatcher TOKEN_MATCHER -> TOKEN_MATCHER
    com.google.common.base.CharMatcher QUOTED_TEXT_MATCHER -> QUOTED_TEXT_MATCHER
    com.google.common.base.CharMatcher LINEAR_WHITE_SPACE -> LINEAR_WHITE_SPACE
    java.lang.String APPLICATION_TYPE -> APPLICATION_TYPE
    java.lang.String AUDIO_TYPE -> AUDIO_TYPE
    java.lang.String IMAGE_TYPE -> IMAGE_TYPE
    java.lang.String TEXT_TYPE -> TEXT_TYPE
    java.lang.String VIDEO_TYPE -> VIDEO_TYPE
    java.lang.String WILDCARD -> WILDCARD
    java.util.Map KNOWN_TYPES -> KNOWN_TYPES
    com.google.common.net.MediaType ANY_TYPE -> ANY_TYPE
    com.google.common.net.MediaType ANY_TEXT_TYPE -> ANY_TEXT_TYPE
    com.google.common.net.MediaType ANY_IMAGE_TYPE -> ANY_IMAGE_TYPE
    com.google.common.net.MediaType ANY_AUDIO_TYPE -> ANY_AUDIO_TYPE
    com.google.common.net.MediaType ANY_VIDEO_TYPE -> ANY_VIDEO_TYPE
    com.google.common.net.MediaType ANY_APPLICATION_TYPE -> ANY_APPLICATION_TYPE
    com.google.common.net.MediaType CACHE_MANIFEST_UTF_8 -> CACHE_MANIFEST_UTF_8
    com.google.common.net.MediaType CSS_UTF_8 -> CSS_UTF_8
    com.google.common.net.MediaType CSV_UTF_8 -> CSV_UTF_8
    com.google.common.net.MediaType HTML_UTF_8 -> HTML_UTF_8
    com.google.common.net.MediaType I_CALENDAR_UTF_8 -> I_CALENDAR_UTF_8
    com.google.common.net.MediaType PLAIN_TEXT_UTF_8 -> PLAIN_TEXT_UTF_8
    com.google.common.net.MediaType TEXT_JAVASCRIPT_UTF_8 -> TEXT_JAVASCRIPT_UTF_8
    com.google.common.net.MediaType TSV_UTF_8 -> TSV_UTF_8
    com.google.common.net.MediaType VCARD_UTF_8 -> VCARD_UTF_8
    com.google.common.net.MediaType WML_UTF_8 -> WML_UTF_8
    com.google.common.net.MediaType XML_UTF_8 -> XML_UTF_8
    com.google.common.net.MediaType BMP -> BMP
    com.google.common.net.MediaType CRW -> CRW
    com.google.common.net.MediaType GIF -> GIF
    com.google.common.net.MediaType ICO -> ICO
    com.google.common.net.MediaType JPEG -> JPEG
    com.google.common.net.MediaType PNG -> PNG
    com.google.common.net.MediaType PSD -> PSD
    com.google.common.net.MediaType SVG_UTF_8 -> SVG_UTF_8
    com.google.common.net.MediaType TIFF -> TIFF
    com.google.common.net.MediaType WEBP -> WEBP
    com.google.common.net.MediaType MP4_AUDIO -> MP4_AUDIO
    com.google.common.net.MediaType MPEG_AUDIO -> MPEG_AUDIO
    com.google.common.net.MediaType OGG_AUDIO -> OGG_AUDIO
    com.google.common.net.MediaType WEBM_AUDIO -> WEBM_AUDIO
    com.google.common.net.MediaType MP4_VIDEO -> MP4_VIDEO
    com.google.common.net.MediaType MPEG_VIDEO -> MPEG_VIDEO
    com.google.common.net.MediaType OGG_VIDEO -> OGG_VIDEO
    com.google.common.net.MediaType QUICKTIME -> QUICKTIME
    com.google.common.net.MediaType WEBM_VIDEO -> WEBM_VIDEO
    com.google.common.net.MediaType WMV -> WMV
    com.google.common.net.MediaType APPLICATION_XML_UTF_8 -> APPLICATION_XML_UTF_8
    com.google.common.net.MediaType ATOM_UTF_8 -> ATOM_UTF_8
    com.google.common.net.MediaType BZIP2 -> BZIP2
    com.google.common.net.MediaType EOT -> EOT
    com.google.common.net.MediaType EPUB -> EPUB
    com.google.common.net.MediaType FORM_DATA -> FORM_DATA
    com.google.common.net.MediaType KEY_ARCHIVE -> KEY_ARCHIVE
    com.google.common.net.MediaType APPLICATION_BINARY -> APPLICATION_BINARY
    com.google.common.net.MediaType GZIP -> GZIP
    com.google.common.net.MediaType JAVASCRIPT_UTF_8 -> JAVASCRIPT_UTF_8
    com.google.common.net.MediaType JSON_UTF_8 -> JSON_UTF_8
    com.google.common.net.MediaType KML -> KML
    com.google.common.net.MediaType KMZ -> KMZ
    com.google.common.net.MediaType MBOX -> MBOX
    com.google.common.net.MediaType APPLE_MOBILE_CONFIG -> APPLE_MOBILE_CONFIG
    com.google.common.net.MediaType MICROSOFT_EXCEL -> MICROSOFT_EXCEL
    com.google.common.net.MediaType MICROSOFT_POWERPOINT -> MICROSOFT_POWERPOINT
    com.google.common.net.MediaType MICROSOFT_WORD -> MICROSOFT_WORD
    com.google.common.net.MediaType OCTET_STREAM -> OCTET_STREAM
    com.google.common.net.MediaType OGG_CONTAINER -> OGG_CONTAINER
    com.google.common.net.MediaType OOXML_DOCUMENT -> OOXML_DOCUMENT
    com.google.common.net.MediaType OOXML_PRESENTATION -> OOXML_PRESENTATION
    com.google.common.net.MediaType OOXML_SHEET -> OOXML_SHEET
    com.google.common.net.MediaType OPENDOCUMENT_GRAPHICS -> OPENDOCUMENT_GRAPHICS
    com.google.common.net.MediaType OPENDOCUMENT_PRESENTATION -> OPENDOCUMENT_PRESENTATION
    com.google.common.net.MediaType OPENDOCUMENT_SPREADSHEET -> OPENDOCUMENT_SPREADSHEET
    com.google.common.net.MediaType OPENDOCUMENT_TEXT -> OPENDOCUMENT_TEXT
    com.google.common.net.MediaType PDF -> PDF
    com.google.common.net.MediaType POSTSCRIPT -> POSTSCRIPT
    com.google.common.net.MediaType PROTOBUF -> PROTOBUF
    com.google.common.net.MediaType RDF_XML_UTF_8 -> RDF_XML_UTF_8
    com.google.common.net.MediaType RTF_UTF_8 -> RTF_UTF_8
    com.google.common.net.MediaType SFNT -> SFNT
    com.google.common.net.MediaType SHOCKWAVE_FLASH -> SHOCKWAVE_FLASH
    com.google.common.net.MediaType SKETCHUP -> SKETCHUP
    com.google.common.net.MediaType TAR -> TAR
    com.google.common.net.MediaType WOFF -> WOFF
    com.google.common.net.MediaType XHTML_UTF_8 -> XHTML_UTF_8
    com.google.common.net.MediaType XRD_UTF_8 -> XRD_UTF_8
    com.google.common.net.MediaType ZIP -> ZIP
    java.lang.String type -> type
    java.lang.String subtype -> subtype
    com.google.common.collect.ImmutableListMultimap parameters -> parameters
    com.google.common.base.Joiner$MapJoiner PARAMETER_JOINER -> PARAMETER_JOINER
    com.google.common.net.MediaType createConstant(java.lang.String,java.lang.String) -> createConstant
    com.google.common.net.MediaType createConstantUtf8(java.lang.String,java.lang.String) -> createConstantUtf8
    com.google.common.net.MediaType addKnownType(com.google.common.net.MediaType) -> addKnownType
    java.lang.String type() -> type
    java.lang.String subtype() -> subtype
    com.google.common.collect.ImmutableListMultimap parameters() -> parameters
    java.util.Map parametersAsMap() -> parametersAsMap
    com.google.common.base.Optional charset() -> charset
    com.google.common.net.MediaType withoutParameters() -> withoutParameters
    com.google.common.net.MediaType withParameters(com.google.common.collect.Multimap) -> withParameters
    com.google.common.net.MediaType withParameter(java.lang.String,java.lang.String) -> withParameter
    com.google.common.net.MediaType withCharset(java.nio.charset.Charset) -> withCharset
    boolean hasWildcard() -> hasWildcard
    boolean is(com.google.common.net.MediaType) -> is
    com.google.common.net.MediaType create(java.lang.String,java.lang.String) -> create
    com.google.common.net.MediaType createApplicationType(java.lang.String) -> createApplicationType
    com.google.common.net.MediaType createAudioType(java.lang.String) -> createAudioType
    com.google.common.net.MediaType createImageType(java.lang.String) -> createImageType
    com.google.common.net.MediaType createTextType(java.lang.String) -> createTextType
    com.google.common.net.MediaType createVideoType(java.lang.String) -> createVideoType
    com.google.common.net.MediaType create(java.lang.String,java.lang.String,com.google.common.collect.Multimap) -> create
    java.lang.String normalizeToken(java.lang.String) -> normalizeToken
    java.lang.String normalizeParameterValue(java.lang.String,java.lang.String) -> normalizeParameterValue
    com.google.common.net.MediaType parse(java.lang.String) -> parse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String escapeAndQuote(java.lang.String) -> escapeAndQuote
    com.google.common.base.CharMatcher access$000() -> access$000
    java.lang.String access$100(java.lang.String) -> access$100
com.google.common.net.MediaType$1 -> com.google.common.net.MediaType$1:
    com.google.common.net.MediaType this$0 -> this$0
    com.google.common.collect.ImmutableMultiset apply(java.util.Collection) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.net.MediaType$2 -> com.google.common.net.MediaType$2:
    com.google.common.net.MediaType this$0 -> this$0
    java.lang.String apply(java.lang.String) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.net.MediaType$Tokenizer -> com.google.common.net.MediaType$Tokenizer:
    java.lang.String input -> input
    int position -> position
    java.lang.String consumeTokenIfPresent(com.google.common.base.CharMatcher) -> consumeTokenIfPresent
    java.lang.String consumeToken(com.google.common.base.CharMatcher) -> consumeToken
    char consumeCharacter(com.google.common.base.CharMatcher) -> consumeCharacter
    char consumeCharacter(char) -> consumeCharacter
    char previewChar() -> previewChar
    boolean hasMore() -> hasMore
com.google.common.net.PercentEscaper -> com.google.common.net.PercentEscaper:
    char[] PLUS_SIGN -> PLUS_SIGN
    char[] UPPER_HEX_DIGITS -> UPPER_HEX_DIGITS
    boolean plusForSpace -> plusForSpace
    boolean[] safeOctets -> safeOctets
    boolean[] createSafeOctets(java.lang.String) -> createSafeOctets
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(int) -> escape
com.google.common.net.UrlEscapers -> com.google.common.net.UrlEscapers:
    java.lang.String URL_FORM_PARAMETER_OTHER_SAFE_CHARS -> URL_FORM_PARAMETER_OTHER_SAFE_CHARS
    java.lang.String URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS -> URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS
    com.google.common.escape.Escaper URL_FORM_PARAMETER_ESCAPER -> URL_FORM_PARAMETER_ESCAPER
    com.google.common.escape.Escaper URL_PATH_SEGMENT_ESCAPER -> URL_PATH_SEGMENT_ESCAPER
    com.google.common.escape.Escaper URL_FRAGMENT_ESCAPER -> URL_FRAGMENT_ESCAPER
    com.google.common.escape.Escaper urlFormParameterEscaper() -> urlFormParameterEscaper
    com.google.common.escape.Escaper urlPathSegmentEscaper() -> urlPathSegmentEscaper
    com.google.common.escape.Escaper urlFragmentEscaper() -> urlFragmentEscaper
com.google.common.net.package-info -> com.google.common.net.package-info:
com.google.common.primitives.Booleans -> com.google.common.primitives.Booleans:
    int hashCode(boolean) -> hashCode
    int compare(boolean,boolean) -> compare
    boolean contains(boolean[],boolean) -> contains
    int indexOf(boolean[],boolean) -> indexOf
    int indexOf(boolean[],boolean,int,int) -> indexOf
    int indexOf(boolean[],boolean[]) -> indexOf
    int lastIndexOf(boolean[],boolean) -> lastIndexOf
    int lastIndexOf(boolean[],boolean,int,int) -> lastIndexOf
    boolean[] concat(boolean[][]) -> concat
    boolean[] ensureCapacity(boolean[],int,int) -> ensureCapacity
    boolean[] copyOf(boolean[],int) -> copyOf
    java.lang.String join(java.lang.String,boolean[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    boolean[] toArray(java.util.Collection) -> toArray
    java.util.List asList(boolean[]) -> asList
    int countTrue(boolean[]) -> countTrue
    int access$000(boolean[],boolean,int,int) -> access$000
    int access$100(boolean[],boolean,int,int) -> access$100
com.google.common.primitives.Booleans$BooleanArrayAsList -> com.google.common.primitives.Booleans$BooleanArrayAsList:
    boolean[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Boolean get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Boolean set(int,java.lang.Boolean) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean[] toBooleanArray() -> toBooleanArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Booleans$LexicographicalComparator -> com.google.common.primitives.Booleans$LexicographicalComparator:
    com.google.common.primitives.Booleans$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Booleans$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Booleans$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Booleans$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(boolean[],boolean[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.Bytes -> com.google.common.primitives.Bytes:
    int hashCode(byte) -> hashCode
    boolean contains(byte[],byte) -> contains
    int indexOf(byte[],byte) -> indexOf
    int indexOf(byte[],byte,int,int) -> indexOf
    int indexOf(byte[],byte[]) -> indexOf
    int lastIndexOf(byte[],byte) -> lastIndexOf
    int lastIndexOf(byte[],byte,int,int) -> lastIndexOf
    byte[] concat(byte[][]) -> concat
    byte[] ensureCapacity(byte[],int,int) -> ensureCapacity
    byte[] copyOf(byte[],int) -> copyOf
    byte[] toArray(java.util.Collection) -> toArray
    java.util.List asList(byte[]) -> asList
    int access$000(byte[],byte,int,int) -> access$000
    int access$100(byte[],byte,int,int) -> access$100
com.google.common.primitives.Bytes$ByteArrayAsList -> com.google.common.primitives.Bytes$ByteArrayAsList:
    byte[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Byte get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Byte set(int,java.lang.Byte) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte[] toByteArray() -> toByteArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Chars -> com.google.common.primitives.Chars:
    int BYTES -> BYTES
    int hashCode(char) -> hashCode
    char checkedCast(long) -> checkedCast
    char saturatedCast(long) -> saturatedCast
    int compare(char,char) -> compare
    boolean contains(char[],char) -> contains
    int indexOf(char[],char) -> indexOf
    int indexOf(char[],char,int,int) -> indexOf
    int indexOf(char[],char[]) -> indexOf
    int lastIndexOf(char[],char) -> lastIndexOf
    int lastIndexOf(char[],char,int,int) -> lastIndexOf
    char min(char[]) -> min
    char max(char[]) -> max
    char[] concat(char[][]) -> concat
    byte[] toByteArray(char) -> toByteArray
    char fromByteArray(byte[]) -> fromByteArray
    char fromBytes(byte,byte) -> fromBytes
    char[] ensureCapacity(char[],int,int) -> ensureCapacity
    char[] copyOf(char[],int) -> copyOf
    java.lang.String join(java.lang.String,char[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    char[] toArray(java.util.Collection) -> toArray
    java.util.List asList(char[]) -> asList
    int access$000(char[],char,int,int) -> access$000
    int access$100(char[],char,int,int) -> access$100
com.google.common.primitives.Chars$CharArrayAsList -> com.google.common.primitives.Chars$CharArrayAsList:
    char[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Character get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Character set(int,java.lang.Character) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char[] toCharArray() -> toCharArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Chars$LexicographicalComparator -> com.google.common.primitives.Chars$LexicographicalComparator:
    com.google.common.primitives.Chars$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Chars$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Chars$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Chars$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(char[],char[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.Doubles -> com.google.common.primitives.Doubles:
    int BYTES -> BYTES
    java.util.regex.Pattern FLOATING_POINT_PATTERN -> FLOATING_POINT_PATTERN
    int hashCode(double) -> hashCode
    int compare(double,double) -> compare
    boolean isFinite(double) -> isFinite
    boolean contains(double[],double) -> contains
    int indexOf(double[],double) -> indexOf
    int indexOf(double[],double,int,int) -> indexOf
    int indexOf(double[],double[]) -> indexOf
    int lastIndexOf(double[],double) -> lastIndexOf
    int lastIndexOf(double[],double,int,int) -> lastIndexOf
    double min(double[]) -> min
    double max(double[]) -> max
    double[] concat(double[][]) -> concat
    com.google.common.base.Converter stringConverter() -> stringConverter
    double[] ensureCapacity(double[],int,int) -> ensureCapacity
    double[] copyOf(double[],int) -> copyOf
    java.lang.String join(java.lang.String,double[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    double[] toArray(java.util.Collection) -> toArray
    java.util.List asList(double[]) -> asList
    java.util.regex.Pattern fpPattern() -> fpPattern
    java.lang.Double tryParse(java.lang.String) -> tryParse
    int access$000(double[],double,int,int) -> access$000
    int access$100(double[],double,int,int) -> access$100
com.google.common.primitives.Doubles$DoubleArrayAsList -> com.google.common.primitives.Doubles$DoubleArrayAsList:
    double[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Double get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Double set(int,java.lang.Double) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double[] toDoubleArray() -> toDoubleArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Doubles$DoubleConverter -> com.google.common.primitives.Doubles$DoubleConverter:
    com.google.common.primitives.Doubles$DoubleConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Double doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Double) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.primitives.Doubles$LexicographicalComparator -> com.google.common.primitives.Doubles$LexicographicalComparator:
    com.google.common.primitives.Doubles$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Doubles$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Doubles$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Doubles$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(double[],double[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.Floats -> com.google.common.primitives.Floats:
    int BYTES -> BYTES
    int hashCode(float) -> hashCode
    int compare(float,float) -> compare
    boolean isFinite(float) -> isFinite
    boolean contains(float[],float) -> contains
    int indexOf(float[],float) -> indexOf
    int indexOf(float[],float,int,int) -> indexOf
    int indexOf(float[],float[]) -> indexOf
    int lastIndexOf(float[],float) -> lastIndexOf
    int lastIndexOf(float[],float,int,int) -> lastIndexOf
    float min(float[]) -> min
    float max(float[]) -> max
    float[] concat(float[][]) -> concat
    com.google.common.base.Converter stringConverter() -> stringConverter
    float[] ensureCapacity(float[],int,int) -> ensureCapacity
    float[] copyOf(float[],int) -> copyOf
    java.lang.String join(java.lang.String,float[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    float[] toArray(java.util.Collection) -> toArray
    java.util.List asList(float[]) -> asList
    java.lang.Float tryParse(java.lang.String) -> tryParse
    int access$000(float[],float,int,int) -> access$000
    int access$100(float[],float,int,int) -> access$100
com.google.common.primitives.Floats$FloatArrayAsList -> com.google.common.primitives.Floats$FloatArrayAsList:
    float[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Float get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Float set(int,java.lang.Float) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float[] toFloatArray() -> toFloatArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Floats$FloatConverter -> com.google.common.primitives.Floats$FloatConverter:
    com.google.common.primitives.Floats$FloatConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Float doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Float) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.primitives.Floats$LexicographicalComparator -> com.google.common.primitives.Floats$LexicographicalComparator:
    com.google.common.primitives.Floats$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Floats$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Floats$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Floats$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(float[],float[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.Ints -> com.google.common.primitives.Ints:
    int BYTES -> BYTES
    int MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    byte[] asciiDigits -> asciiDigits
    int hashCode(int) -> hashCode
    int checkedCast(long) -> checkedCast
    int saturatedCast(long) -> saturatedCast
    int compare(int,int) -> compare
    boolean contains(int[],int) -> contains
    int indexOf(int[],int) -> indexOf
    int indexOf(int[],int,int,int) -> indexOf
    int indexOf(int[],int[]) -> indexOf
    int lastIndexOf(int[],int) -> lastIndexOf
    int lastIndexOf(int[],int,int,int) -> lastIndexOf
    int min(int[]) -> min
    int max(int[]) -> max
    int[] concat(int[][]) -> concat
    byte[] toByteArray(int) -> toByteArray
    int fromByteArray(byte[]) -> fromByteArray
    int fromBytes(byte,byte,byte,byte) -> fromBytes
    com.google.common.base.Converter stringConverter() -> stringConverter
    int[] ensureCapacity(int[],int,int) -> ensureCapacity
    int[] copyOf(int[],int) -> copyOf
    java.lang.String join(java.lang.String,int[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    int[] toArray(java.util.Collection) -> toArray
    java.util.List asList(int[]) -> asList
    int digit(char) -> digit
    java.lang.Integer tryParse(java.lang.String) -> tryParse
    java.lang.Integer tryParse(java.lang.String,int) -> tryParse
    int access$000(int[],int,int,int) -> access$000
    int access$100(int[],int,int,int) -> access$100
com.google.common.primitives.Ints$IntArrayAsList -> com.google.common.primitives.Ints$IntArrayAsList:
    int[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Integer get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Integer set(int,java.lang.Integer) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int[] toIntArray() -> toIntArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Ints$IntConverter -> com.google.common.primitives.Ints$IntConverter:
    com.google.common.primitives.Ints$IntConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Integer doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Integer) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.primitives.Ints$LexicographicalComparator -> com.google.common.primitives.Ints$LexicographicalComparator:
    com.google.common.primitives.Ints$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Ints$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Ints$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Ints$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(int[],int[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.Longs -> com.google.common.primitives.Longs:
    int BYTES -> BYTES
    long MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    int hashCode(long) -> hashCode
    int compare(long,long) -> compare
    boolean contains(long[],long) -> contains
    int indexOf(long[],long) -> indexOf
    int indexOf(long[],long,int,int) -> indexOf
    int indexOf(long[],long[]) -> indexOf
    int lastIndexOf(long[],long) -> lastIndexOf
    int lastIndexOf(long[],long,int,int) -> lastIndexOf
    long min(long[]) -> min
    long max(long[]) -> max
    long[] concat(long[][]) -> concat
    byte[] toByteArray(long) -> toByteArray
    long fromByteArray(byte[]) -> fromByteArray
    long fromBytes(byte,byte,byte,byte,byte,byte,byte,byte) -> fromBytes
    java.lang.Long tryParse(java.lang.String) -> tryParse
    com.google.common.base.Converter stringConverter() -> stringConverter
    long[] ensureCapacity(long[],int,int) -> ensureCapacity
    long[] copyOf(long[],int) -> copyOf
    java.lang.String join(java.lang.String,long[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    long[] toArray(java.util.Collection) -> toArray
    java.util.List asList(long[]) -> asList
    int access$000(long[],long,int,int) -> access$000
    int access$100(long[],long,int,int) -> access$100
com.google.common.primitives.Longs$LexicographicalComparator -> com.google.common.primitives.Longs$LexicographicalComparator:
    com.google.common.primitives.Longs$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Longs$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Longs$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Longs$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(long[],long[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.Longs$LongArrayAsList -> com.google.common.primitives.Longs$LongArrayAsList:
    long[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Long get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Long set(int,java.lang.Long) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long[] toLongArray() -> toLongArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Longs$LongConverter -> com.google.common.primitives.Longs$LongConverter:
    com.google.common.primitives.Longs$LongConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Long doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Long) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.primitives.ParseRequest -> com.google.common.primitives.ParseRequest:
    java.lang.String rawValue -> rawValue
    int radix -> radix
    com.google.common.primitives.ParseRequest fromString(java.lang.String) -> fromString
com.google.common.primitives.Primitives -> com.google.common.primitives.Primitives:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> PRIMITIVE_TO_WRAPPER_TYPE
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> WRAPPER_TO_PRIMITIVE_TYPE
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> add
    java.util.Set allPrimitiveTypes() -> allPrimitiveTypes
    java.util.Set allWrapperTypes() -> allWrapperTypes
    boolean isWrapperType(java.lang.Class) -> isWrapperType
    java.lang.Class wrap(java.lang.Class) -> wrap
    java.lang.Class unwrap(java.lang.Class) -> unwrap
com.google.common.primitives.Shorts -> com.google.common.primitives.Shorts:
    int BYTES -> BYTES
    short MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    int hashCode(short) -> hashCode
    short checkedCast(long) -> checkedCast
    short saturatedCast(long) -> saturatedCast
    int compare(short,short) -> compare
    boolean contains(short[],short) -> contains
    int indexOf(short[],short) -> indexOf
    int indexOf(short[],short,int,int) -> indexOf
    int indexOf(short[],short[]) -> indexOf
    int lastIndexOf(short[],short) -> lastIndexOf
    int lastIndexOf(short[],short,int,int) -> lastIndexOf
    short min(short[]) -> min
    short max(short[]) -> max
    short[] concat(short[][]) -> concat
    byte[] toByteArray(short) -> toByteArray
    short fromByteArray(byte[]) -> fromByteArray
    short fromBytes(byte,byte) -> fromBytes
    com.google.common.base.Converter stringConverter() -> stringConverter
    short[] ensureCapacity(short[],int,int) -> ensureCapacity
    short[] copyOf(short[],int) -> copyOf
    java.lang.String join(java.lang.String,short[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    short[] toArray(java.util.Collection) -> toArray
    java.util.List asList(short[]) -> asList
    int access$000(short[],short,int,int) -> access$000
    int access$100(short[],short,int,int) -> access$100
com.google.common.primitives.Shorts$LexicographicalComparator -> com.google.common.primitives.Shorts$LexicographicalComparator:
    com.google.common.primitives.Shorts$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Shorts$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Shorts$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Shorts$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(short[],short[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.Shorts$ShortArrayAsList -> com.google.common.primitives.Shorts$ShortArrayAsList:
    short[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Short get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Short set(int,java.lang.Short) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short[] toShortArray() -> toShortArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Shorts$ShortConverter -> com.google.common.primitives.Shorts$ShortConverter:
    com.google.common.primitives.Shorts$ShortConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    java.lang.Short doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Short) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.primitives.SignedBytes -> com.google.common.primitives.SignedBytes:
    byte MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    byte checkedCast(long) -> checkedCast
    byte saturatedCast(long) -> saturatedCast
    int compare(byte,byte) -> compare
    byte min(byte[]) -> min
    byte max(byte[]) -> max
    java.lang.String join(java.lang.String,byte[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
com.google.common.primitives.SignedBytes$LexicographicalComparator -> com.google.common.primitives.SignedBytes$LexicographicalComparator:
    com.google.common.primitives.SignedBytes$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.SignedBytes$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.SignedBytes$LexicographicalComparator[] values() -> values
    com.google.common.primitives.SignedBytes$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(byte[],byte[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.UnsignedBytes -> com.google.common.primitives.UnsignedBytes:
    byte MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    byte MAX_VALUE -> MAX_VALUE
    int UNSIGNED_MASK -> UNSIGNED_MASK
    int toInt(byte) -> toInt
    byte checkedCast(long) -> checkedCast
    byte saturatedCast(long) -> saturatedCast
    int compare(byte,byte) -> compare
    byte min(byte[]) -> min
    byte max(byte[]) -> max
    java.lang.String toString(byte) -> toString
    java.lang.String toString(byte,int) -> toString
    byte parseUnsignedByte(java.lang.String) -> parseUnsignedByte
    byte parseUnsignedByte(java.lang.String,int) -> parseUnsignedByte
    java.lang.String join(java.lang.String,byte[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    java.util.Comparator lexicographicalComparatorJavaImpl() -> lexicographicalComparatorJavaImpl
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder -> com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder:
    java.lang.String UNSAFE_COMPARATOR_NAME -> UNSAFE_COMPARATOR_NAME
    java.util.Comparator BEST_COMPARATOR -> BEST_COMPARATOR
    java.util.Comparator getBestComparator() -> getBestComparator
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator -> com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator:
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator INSTANCE -> INSTANCE
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] $VALUES -> $VALUES
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] values() -> values
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator valueOf(java.lang.String) -> valueOf
    int compare(byte[],byte[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator -> com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator INSTANCE -> INSTANCE
    boolean BIG_ENDIAN -> BIG_ENDIAN
    sun.misc.Unsafe theUnsafe -> theUnsafe
    int BYTE_ARRAY_BASE_OFFSET -> BYTE_ARRAY_BASE_OFFSET
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[] $VALUES -> $VALUES
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[] values() -> values
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator valueOf(java.lang.String) -> valueOf
    sun.misc.Unsafe getUnsafe() -> getUnsafe
    int compare(byte[],byte[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1 -> com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1:
    sun.misc.Unsafe run() -> run
    java.lang.Object run() -> run
com.google.common.primitives.UnsignedInteger -> com.google.common.primitives.UnsignedInteger:
    com.google.common.primitives.UnsignedInteger ZERO -> ZERO
    com.google.common.primitives.UnsignedInteger ONE -> ONE
    com.google.common.primitives.UnsignedInteger MAX_VALUE -> MAX_VALUE
    int value -> value
    com.google.common.primitives.UnsignedInteger fromIntBits(int) -> fromIntBits
    com.google.common.primitives.UnsignedInteger valueOf(long) -> valueOf
    com.google.common.primitives.UnsignedInteger valueOf(java.math.BigInteger) -> valueOf
    com.google.common.primitives.UnsignedInteger valueOf(java.lang.String) -> valueOf
    com.google.common.primitives.UnsignedInteger valueOf(java.lang.String,int) -> valueOf
    com.google.common.primitives.UnsignedInteger plus(com.google.common.primitives.UnsignedInteger) -> plus
    com.google.common.primitives.UnsignedInteger minus(com.google.common.primitives.UnsignedInteger) -> minus
    com.google.common.primitives.UnsignedInteger times(com.google.common.primitives.UnsignedInteger) -> times
    com.google.common.primitives.UnsignedInteger dividedBy(com.google.common.primitives.UnsignedInteger) -> dividedBy
    com.google.common.primitives.UnsignedInteger mod(com.google.common.primitives.UnsignedInteger) -> mod
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.math.BigInteger bigIntegerValue() -> bigIntegerValue
    int compareTo(com.google.common.primitives.UnsignedInteger) -> compareTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.common.primitives.UnsignedInts -> com.google.common.primitives.UnsignedInts:
    long INT_MASK -> INT_MASK
    int flip(int) -> flip
    int compare(int,int) -> compare
    long toLong(int) -> toLong
    int min(int[]) -> min
    int max(int[]) -> max
    java.lang.String join(java.lang.String,int[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    int divide(int,int) -> divide
    int remainder(int,int) -> remainder
    int decode(java.lang.String) -> decode
    int parseUnsignedInt(java.lang.String) -> parseUnsignedInt
    int parseUnsignedInt(java.lang.String,int) -> parseUnsignedInt
    java.lang.String toString(int) -> toString
    java.lang.String toString(int,int) -> toString
com.google.common.primitives.UnsignedInts$LexicographicalComparator -> com.google.common.primitives.UnsignedInts$LexicographicalComparator:
    com.google.common.primitives.UnsignedInts$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.UnsignedInts$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.UnsignedInts$LexicographicalComparator[] values() -> values
    com.google.common.primitives.UnsignedInts$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(int[],int[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.UnsignedLong -> com.google.common.primitives.UnsignedLong:
    long UNSIGNED_MASK -> UNSIGNED_MASK
    com.google.common.primitives.UnsignedLong ZERO -> ZERO
    com.google.common.primitives.UnsignedLong ONE -> ONE
    com.google.common.primitives.UnsignedLong MAX_VALUE -> MAX_VALUE
    long value -> value
    com.google.common.primitives.UnsignedLong fromLongBits(long) -> fromLongBits
    com.google.common.primitives.UnsignedLong valueOf(long) -> valueOf
    com.google.common.primitives.UnsignedLong valueOf(java.math.BigInteger) -> valueOf
    com.google.common.primitives.UnsignedLong valueOf(java.lang.String) -> valueOf
    com.google.common.primitives.UnsignedLong valueOf(java.lang.String,int) -> valueOf
    com.google.common.primitives.UnsignedLong plus(com.google.common.primitives.UnsignedLong) -> plus
    com.google.common.primitives.UnsignedLong minus(com.google.common.primitives.UnsignedLong) -> minus
    com.google.common.primitives.UnsignedLong times(com.google.common.primitives.UnsignedLong) -> times
    com.google.common.primitives.UnsignedLong dividedBy(com.google.common.primitives.UnsignedLong) -> dividedBy
    com.google.common.primitives.UnsignedLong mod(com.google.common.primitives.UnsignedLong) -> mod
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.math.BigInteger bigIntegerValue() -> bigIntegerValue
    int compareTo(com.google.common.primitives.UnsignedLong) -> compareTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.common.primitives.UnsignedLongs -> com.google.common.primitives.UnsignedLongs:
    long MAX_VALUE -> MAX_VALUE
    long[] maxValueDivs -> maxValueDivs
    int[] maxValueMods -> maxValueMods
    int[] maxSafeDigits -> maxSafeDigits
    long flip(long) -> flip
    int compare(long,long) -> compare
    long min(long[]) -> min
    long max(long[]) -> max
    java.lang.String join(java.lang.String,long[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    long divide(long,long) -> divide
    long remainder(long,long) -> remainder
    long parseUnsignedLong(java.lang.String) -> parseUnsignedLong
    long decode(java.lang.String) -> decode
    long parseUnsignedLong(java.lang.String,int) -> parseUnsignedLong
    boolean overflowInParse(long,int,int) -> overflowInParse
    java.lang.String toString(long) -> toString
    java.lang.String toString(long,int) -> toString
com.google.common.primitives.UnsignedLongs$LexicographicalComparator -> com.google.common.primitives.UnsignedLongs$LexicographicalComparator:
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] values() -> values
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    int compare(long[],long[]) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.primitives.package-info -> com.google.common.primitives.package-info:
com.google.common.reflect.AbstractInvocationHandler -> com.google.common.reflect.AbstractInvocationHandler:
    java.lang.Object[] NO_ARGS -> NO_ARGS
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    java.lang.Object handleInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> handleInvocation
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isProxyOfSameInterfaces(java.lang.Object,java.lang.Class) -> isProxyOfSameInterfaces
com.google.common.reflect.ClassPath -> com.google.common.reflect.ClassPath:
    java.util.logging.Logger logger -> logger
    com.google.common.base.Predicate IS_TOP_LEVEL -> IS_TOP_LEVEL
    com.google.common.base.Splitter CLASS_PATH_ATTRIBUTE_SEPARATOR -> CLASS_PATH_ATTRIBUTE_SEPARATOR
    java.lang.String CLASS_FILE_NAME_EXTENSION -> CLASS_FILE_NAME_EXTENSION
    com.google.common.collect.ImmutableSet resources -> resources
    com.google.common.reflect.ClassPath from(java.lang.ClassLoader) -> from
    com.google.common.collect.ImmutableSet getResources() -> getResources
    com.google.common.collect.ImmutableSet getAllClasses() -> getAllClasses
    com.google.common.collect.ImmutableSet getTopLevelClasses() -> getTopLevelClasses
    com.google.common.collect.ImmutableSet getTopLevelClasses(java.lang.String) -> getTopLevelClasses
    com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String) -> getTopLevelClassesRecursive
    com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader) -> getClassPathEntries
    java.lang.String getClassName(java.lang.String) -> getClassName
    java.util.logging.Logger access$100() -> access$100
    com.google.common.base.Splitter access$200() -> access$200
com.google.common.reflect.ClassPath$1 -> com.google.common.reflect.ClassPath$1:
    boolean apply(com.google.common.reflect.ClassPath$ClassInfo) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.reflect.ClassPath$ClassInfo -> com.google.common.reflect.ClassPath$ClassInfo:
    java.lang.String className -> className
    java.lang.String getPackageName() -> getPackageName
    java.lang.String getSimpleName() -> getSimpleName
    java.lang.String getName() -> getName
    java.lang.Class load() -> load
    java.lang.String toString() -> toString
    java.lang.String access$000(com.google.common.reflect.ClassPath$ClassInfo) -> access$000
com.google.common.reflect.ClassPath$ResourceInfo -> com.google.common.reflect.ClassPath$ResourceInfo:
    java.lang.String resourceName -> resourceName
    java.lang.ClassLoader loader -> loader
    com.google.common.reflect.ClassPath$ResourceInfo of(java.lang.String,java.lang.ClassLoader) -> of
    java.net.URL url() -> url
    java.lang.String getResourceName() -> getResourceName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.reflect.ClassPath$Scanner -> com.google.common.reflect.ClassPath$Scanner:
    com.google.common.collect.ImmutableSortedSet$Builder resources -> resources
    java.util.Set scannedUris -> scannedUris
    com.google.common.collect.ImmutableSortedSet getResources() -> getResources
    void scan(java.net.URI,java.lang.ClassLoader) -> scan
    void scanFrom(java.io.File,java.lang.ClassLoader) -> scanFrom
    void scanDirectory(java.io.File,java.lang.ClassLoader) -> scanDirectory
    void scanDirectory(java.io.File,java.lang.ClassLoader,java.lang.String,com.google.common.collect.ImmutableSet) -> scanDirectory
    void scanJar(java.io.File,java.lang.ClassLoader) -> scanJar
    com.google.common.collect.ImmutableSet getClassPathFromManifest(java.io.File,java.util.jar.Manifest) -> getClassPathFromManifest
    java.net.URI getClassPathEntry(java.io.File,java.lang.String) -> getClassPathEntry
com.google.common.reflect.Element -> com.google.common.reflect.Element:
    java.lang.reflect.AccessibleObject accessibleObject -> accessibleObject
    java.lang.reflect.Member member -> member
    com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    boolean isAnnotationPresent(java.lang.Class) -> isAnnotationPresent
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.annotation.Annotation[] getAnnotations() -> getAnnotations
    java.lang.annotation.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    void setAccessible(boolean) -> setAccessible
    boolean isAccessible() -> isAccessible
    java.lang.Class getDeclaringClass() -> getDeclaringClass
    java.lang.String getName() -> getName
    int getModifiers() -> getModifiers
    boolean isSynthetic() -> isSynthetic
    boolean isPublic() -> isPublic
    boolean isProtected() -> isProtected
    boolean isPackagePrivate() -> isPackagePrivate
    boolean isPrivate() -> isPrivate
    boolean isStatic() -> isStatic
    boolean isFinal() -> isFinal
    boolean isAbstract() -> isAbstract
    boolean isNative() -> isNative
    boolean isSynchronized() -> isSynchronized
    boolean isVolatile() -> isVolatile
    boolean isTransient() -> isTransient
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.reflect.ImmutableTypeToInstanceMap -> com.google.common.reflect.ImmutableTypeToInstanceMap:
    com.google.common.collect.ImmutableMap delegate -> delegate
    com.google.common.reflect.ImmutableTypeToInstanceMap of() -> of
    com.google.common.reflect.ImmutableTypeToInstanceMap$Builder builder() -> builder
    java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.util.Map delegate() -> delegate
    java.lang.Object trustedGet(com.google.common.reflect.TypeToken) -> trustedGet
    java.lang.Object delegate() -> delegate
com.google.common.reflect.ImmutableTypeToInstanceMap$1 -> com.google.common.reflect.ImmutableTypeToInstanceMap$1:
com.google.common.reflect.ImmutableTypeToInstanceMap$Builder -> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:
    com.google.common.collect.ImmutableMap$Builder mapBuilder -> mapBuilder
    com.google.common.reflect.ImmutableTypeToInstanceMap$Builder put(java.lang.Class,java.lang.Object) -> put
    com.google.common.reflect.ImmutableTypeToInstanceMap$Builder put(com.google.common.reflect.TypeToken,java.lang.Object) -> put
    com.google.common.reflect.ImmutableTypeToInstanceMap build() -> build
com.google.common.reflect.Invokable -> com.google.common.reflect.Invokable:
    com.google.common.reflect.Invokable from(java.lang.reflect.Method) -> from
    com.google.common.reflect.Invokable from(java.lang.reflect.Constructor) -> from
    boolean isOverridable() -> isOverridable
    boolean isVarArgs() -> isVarArgs
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> invoke
    com.google.common.reflect.TypeToken getReturnType() -> getReturnType
    com.google.common.collect.ImmutableList getParameters() -> getParameters
    com.google.common.collect.ImmutableList getExceptionTypes() -> getExceptionTypes
    com.google.common.reflect.Invokable returning(java.lang.Class) -> returning
    com.google.common.reflect.Invokable returning(com.google.common.reflect.TypeToken) -> returning
    java.lang.Class getDeclaringClass() -> getDeclaringClass
    com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> invokeInternal
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> getParameterAnnotations
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Invokable$ConstructorInvokable -> com.google.common.reflect.Invokable$ConstructorInvokable:
    java.lang.reflect.Constructor constructor -> constructor
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> invokeInternal
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> getParameterAnnotations
    java.lang.reflect.TypeVariable[] getTypeParameters() -> getTypeParameters
    boolean isOverridable() -> isOverridable
    boolean isVarArgs() -> isVarArgs
    boolean mayNeedHiddenThis() -> mayNeedHiddenThis
com.google.common.reflect.Invokable$MethodInvokable -> com.google.common.reflect.Invokable$MethodInvokable:
    java.lang.reflect.Method method -> method
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> invokeInternal
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> getParameterAnnotations
    java.lang.reflect.TypeVariable[] getTypeParameters() -> getTypeParameters
    boolean isOverridable() -> isOverridable
    boolean isVarArgs() -> isVarArgs
com.google.common.reflect.MutableTypeToInstanceMap -> com.google.common.reflect.MutableTypeToInstanceMap:
    java.util.Map backingMap -> backingMap
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
    java.lang.Object put(com.google.common.reflect.TypeToken,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.util.Map delegate() -> delegate
    java.lang.Object trustedPut(com.google.common.reflect.TypeToken,java.lang.Object) -> trustedPut
    java.lang.Object trustedGet(com.google.common.reflect.TypeToken) -> trustedGet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object delegate() -> delegate
com.google.common.reflect.MutableTypeToInstanceMap$1 -> com.google.common.reflect.MutableTypeToInstanceMap$1:
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry -> com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:
    java.util.Map$Entry delegate -> delegate
    java.util.Set transformEntries(java.util.Set) -> transformEntries
    java.util.Iterator transformEntries(java.util.Iterator) -> transformEntries
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
    java.util.Iterator access$000(java.util.Iterator) -> access$000
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1 -> com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1:
    java.util.Set val$entries -> val$entries
    java.util.Set delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2 -> com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2:
    java.util.Map$Entry apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.reflect.Parameter -> com.google.common.reflect.Parameter:
    com.google.common.reflect.Invokable declaration -> declaration
    int position -> position
    com.google.common.reflect.TypeToken type -> type
    com.google.common.collect.ImmutableList annotations -> annotations
    com.google.common.reflect.TypeToken getType() -> getType
    com.google.common.reflect.Invokable getDeclaringInvokable() -> getDeclaringInvokable
    boolean isAnnotationPresent(java.lang.Class) -> isAnnotationPresent
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.annotation.Annotation[] getAnnotations() -> getAnnotations
    java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class) -> getAnnotationsByType
    java.lang.annotation.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class) -> getDeclaredAnnotation
    java.lang.annotation.Annotation[] getDeclaredAnnotationsByType(java.lang.Class) -> getDeclaredAnnotationsByType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.reflect.Reflection -> com.google.common.reflect.Reflection:
    java.lang.String getPackageName(java.lang.Class) -> getPackageName
    java.lang.String getPackageName(java.lang.String) -> getPackageName
    void initialize(java.lang.Class[]) -> initialize
    java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler) -> newProxy
com.google.common.reflect.TypeCapture -> com.google.common.reflect.TypeCapture:
    java.lang.reflect.Type capture() -> capture
com.google.common.reflect.TypeParameter -> com.google.common.reflect.TypeParameter:
    java.lang.reflect.TypeVariable typeVariable -> typeVariable
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.reflect.TypeResolver -> com.google.common.reflect.TypeResolver:
    com.google.common.reflect.TypeResolver$TypeTable typeTable -> typeTable
    com.google.common.reflect.TypeResolver accordingTo(java.lang.reflect.Type) -> accordingTo
    com.google.common.reflect.TypeResolver where(java.lang.reflect.Type,java.lang.reflect.Type) -> where
    com.google.common.reflect.TypeResolver where(java.util.Map) -> where
    void populateTypeMappings(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type) -> populateTypeMappings
    java.lang.reflect.Type resolveType(java.lang.reflect.Type) -> resolveType
    java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[]) -> resolveTypes
    java.lang.reflect.WildcardType resolveWildcardType(java.lang.reflect.WildcardType) -> resolveWildcardType
    java.lang.reflect.Type resolveGenericArrayType(java.lang.reflect.GenericArrayType) -> resolveGenericArrayType
    java.lang.reflect.ParameterizedType resolveParameterizedType(java.lang.reflect.ParameterizedType) -> resolveParameterizedType
    java.lang.Object expectArgument(java.lang.Class,java.lang.Object) -> expectArgument
    java.lang.Object access$000(java.lang.Class,java.lang.Object) -> access$000
    void access$100(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type) -> access$100
    java.lang.reflect.Type[] access$300(com.google.common.reflect.TypeResolver,java.lang.reflect.Type[]) -> access$300
com.google.common.reflect.TypeResolver$1 -> com.google.common.reflect.TypeResolver$1:
    java.util.Map val$mappings -> val$mappings
    java.lang.reflect.Type val$to -> val$to
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
    void visitClass(java.lang.Class) -> visitClass
com.google.common.reflect.TypeResolver$TypeMappingIntrospector -> com.google.common.reflect.TypeResolver$TypeMappingIntrospector:
    com.google.common.reflect.TypeResolver$WildcardCapturer wildcardCapturer -> wildcardCapturer
    java.util.Map mappings -> mappings
    com.google.common.collect.ImmutableMap getTypeMappings(java.lang.reflect.Type) -> getTypeMappings
    void visitClass(java.lang.Class) -> visitClass
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type) -> map
com.google.common.reflect.TypeResolver$TypeTable -> com.google.common.reflect.TypeResolver$TypeTable:
    com.google.common.collect.ImmutableMap map -> map
    com.google.common.reflect.TypeResolver$TypeTable where(java.util.Map) -> where
    java.lang.reflect.Type resolve(java.lang.reflect.TypeVariable) -> resolve
    java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable) -> resolveInternal
com.google.common.reflect.TypeResolver$TypeTable$1 -> com.google.common.reflect.TypeResolver$TypeTable$1:
    java.lang.reflect.TypeVariable val$var -> val$var
    com.google.common.reflect.TypeResolver$TypeTable val$unguarded -> val$unguarded
    com.google.common.reflect.TypeResolver$TypeTable this$0 -> this$0
    java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable) -> resolveInternal
com.google.common.reflect.TypeResolver$TypeVariableKey -> com.google.common.reflect.TypeResolver$TypeVariableKey:
    java.lang.reflect.TypeVariable var -> var
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object forLookup(java.lang.reflect.Type) -> forLookup
    boolean equalsType(java.lang.reflect.Type) -> equalsType
    boolean equalsTypeVariable(java.lang.reflect.TypeVariable) -> equalsTypeVariable
com.google.common.reflect.TypeResolver$WildcardCapturer -> com.google.common.reflect.TypeResolver$WildcardCapturer:
    java.util.concurrent.atomic.AtomicInteger id -> id
    java.lang.reflect.Type capture(java.lang.reflect.Type) -> capture
    java.lang.reflect.Type captureNullable(java.lang.reflect.Type) -> captureNullable
    java.lang.reflect.Type[] capture(java.lang.reflect.Type[]) -> capture
com.google.common.reflect.TypeToInstanceMap -> com.google.common.reflect.TypeToInstanceMap:
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
com.google.common.reflect.TypeToken -> com.google.common.reflect.TypeToken:
    java.lang.reflect.Type runtimeType -> runtimeType
    com.google.common.reflect.TypeResolver typeResolver -> typeResolver
    com.google.common.reflect.TypeToken of(java.lang.Class) -> of
    com.google.common.reflect.TypeToken of(java.lang.reflect.Type) -> of
    java.lang.Class getRawType() -> getRawType
    com.google.common.collect.ImmutableSet getImmediateRawTypes() -> getImmediateRawTypes
    java.lang.reflect.Type getType() -> getType
    com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken) -> where
    com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter,java.lang.Class) -> where
    com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type) -> resolveType
    java.lang.reflect.Type[] resolveInPlace(java.lang.reflect.Type[]) -> resolveInPlace
    com.google.common.reflect.TypeToken resolveSupertype(java.lang.reflect.Type) -> resolveSupertype
    com.google.common.reflect.TypeToken getGenericSuperclass() -> getGenericSuperclass
    com.google.common.reflect.TypeToken boundAsSuperclass(java.lang.reflect.Type) -> boundAsSuperclass
    com.google.common.collect.ImmutableList getGenericInterfaces() -> getGenericInterfaces
    com.google.common.collect.ImmutableList boundsAsInterfaces(java.lang.reflect.Type[]) -> boundsAsInterfaces
    com.google.common.reflect.TypeToken$TypeSet getTypes() -> getTypes
    com.google.common.reflect.TypeToken getSupertype(java.lang.Class) -> getSupertype
    com.google.common.reflect.TypeToken getSubtype(java.lang.Class) -> getSubtype
    boolean isAssignableFrom(com.google.common.reflect.TypeToken) -> isAssignableFrom
    boolean isAssignableFrom(java.lang.reflect.Type) -> isAssignableFrom
    boolean isArray() -> isArray
    boolean isPrimitive() -> isPrimitive
    com.google.common.reflect.TypeToken wrap() -> wrap
    boolean isWrapper() -> isWrapper
    com.google.common.reflect.TypeToken unwrap() -> unwrap
    com.google.common.reflect.TypeToken getComponentType() -> getComponentType
    com.google.common.reflect.Invokable method(java.lang.reflect.Method) -> method
    com.google.common.reflect.Invokable constructor(java.lang.reflect.Constructor) -> constructor
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.reflect.TypeToken rejectTypeVariables() -> rejectTypeVariables
    boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type) -> isAssignable
    boolean isAssignableFromAny(java.lang.reflect.Type[],java.lang.reflect.Type) -> isAssignableFromAny
    boolean isAssignableToClass(java.lang.reflect.Type,java.lang.Class) -> isAssignableToClass
    boolean isAssignableToWildcardType(java.lang.reflect.Type,java.lang.reflect.WildcardType) -> isAssignableToWildcardType
    boolean isAssignableBySubtypeBound(java.lang.reflect.Type,java.lang.reflect.WildcardType) -> isAssignableBySubtypeBound
    boolean isAssignableToParameterizedType(java.lang.reflect.Type,java.lang.reflect.ParameterizedType) -> isAssignableToParameterizedType
    boolean isAssignableToGenericArrayType(java.lang.reflect.Type,java.lang.reflect.GenericArrayType) -> isAssignableToGenericArrayType
    boolean isAssignableFromGenericArrayType(java.lang.reflect.GenericArrayType,java.lang.reflect.Type) -> isAssignableFromGenericArrayType
    boolean matchTypeArgument(java.lang.reflect.Type,java.lang.reflect.Type) -> matchTypeArgument
    java.lang.reflect.Type supertypeBound(java.lang.reflect.Type) -> supertypeBound
    java.lang.reflect.Type supertypeBound(java.lang.reflect.WildcardType) -> supertypeBound
    java.lang.reflect.Type subtypeBound(java.lang.reflect.Type) -> subtypeBound
    java.lang.reflect.Type subtypeBound(java.lang.reflect.WildcardType) -> subtypeBound
    java.lang.Class getRawType(java.lang.reflect.Type) -> getRawType
    com.google.common.collect.ImmutableSet getRawTypes(java.lang.reflect.Type) -> getRawTypes
    com.google.common.reflect.TypeToken toGenericType(java.lang.Class) -> toGenericType
    com.google.common.reflect.TypeToken getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[]) -> getSupertypeFromUpperBounds
    com.google.common.reflect.TypeToken getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[]) -> getSubtypeFromLowerBounds
    com.google.common.reflect.TypeToken getArraySupertype(java.lang.Class) -> getArraySupertype
    com.google.common.reflect.TypeToken getArraySubtype(java.lang.Class) -> getArraySubtype
    java.lang.reflect.Type resolveTypeArgsForSubclass(java.lang.Class) -> resolveTypeArgsForSubclass
    java.lang.reflect.Type newArrayClassOrGenericArrayType(java.lang.reflect.Type) -> newArrayClassOrGenericArrayType
    java.lang.reflect.Type[] access$000(com.google.common.reflect.TypeToken,java.lang.reflect.Type[]) -> access$000
    com.google.common.collect.ImmutableSet access$200(com.google.common.reflect.TypeToken) -> access$200
    java.lang.reflect.Type access$400(com.google.common.reflect.TypeToken) -> access$400
com.google.common.reflect.TypeToken$1 -> com.google.common.reflect.TypeToken$1:
    com.google.common.reflect.TypeToken this$0 -> this$0
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    java.lang.String toString() -> toString
com.google.common.reflect.TypeToken$2 -> com.google.common.reflect.TypeToken$2:
    com.google.common.reflect.TypeToken this$0 -> this$0
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    java.lang.String toString() -> toString
com.google.common.reflect.TypeToken$3 -> com.google.common.reflect.TypeToken$3:
    com.google.common.reflect.TypeToken this$0 -> this$0
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
com.google.common.reflect.TypeToken$4 -> com.google.common.reflect.TypeToken$4:
    com.google.common.collect.ImmutableSet$Builder val$builder -> val$builder
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitClass(java.lang.Class) -> visitClass
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
com.google.common.reflect.TypeToken$ClassSet -> com.google.common.reflect.TypeToken$ClassSet:
    com.google.common.collect.ImmutableSet classes -> classes
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> this$0
    java.util.Set delegate() -> delegate
    com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    java.util.Set rawTypes() -> rawTypes
    com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    java.lang.Object readResolve() -> readResolve
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.reflect.TypeToken$InterfaceSet -> com.google.common.reflect.TypeToken$InterfaceSet:
    com.google.common.reflect.TypeToken$TypeSet allTypes -> allTypes
    com.google.common.collect.ImmutableSet interfaces -> interfaces
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> this$0
    java.util.Set delegate() -> delegate
    com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    java.util.Set rawTypes() -> rawTypes
    com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    java.lang.Object readResolve() -> readResolve
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.reflect.TypeToken$InterfaceSet$1 -> com.google.common.reflect.TypeToken$InterfaceSet$1:
    com.google.common.reflect.TypeToken$InterfaceSet this$1 -> this$1
    boolean apply(java.lang.Class) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$SimpleTypeToken -> com.google.common.reflect.TypeToken$SimpleTypeToken:
    long serialVersionUID -> serialVersionUID
com.google.common.reflect.TypeToken$TypeCollector -> com.google.common.reflect.TypeToken$TypeCollector:
    com.google.common.reflect.TypeToken$TypeCollector FOR_GENERIC_TYPE -> FOR_GENERIC_TYPE
    com.google.common.reflect.TypeToken$TypeCollector FOR_RAW_TYPE -> FOR_RAW_TYPE
    com.google.common.reflect.TypeToken$TypeCollector classesOnly() -> classesOnly
    com.google.common.collect.ImmutableList collectTypes(java.lang.Object) -> collectTypes
    com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable) -> collectTypes
    int collectTypes(java.lang.Object,java.util.Map) -> collectTypes
    com.google.common.collect.ImmutableList sortKeysByValue(java.util.Map,java.util.Comparator) -> sortKeysByValue
    java.lang.Class getRawType(java.lang.Object) -> getRawType
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    java.lang.Object getSuperclass(java.lang.Object) -> getSuperclass
com.google.common.reflect.TypeToken$TypeCollector$1 -> com.google.common.reflect.TypeToken$TypeCollector$1:
    java.lang.Class getRawType(com.google.common.reflect.TypeToken) -> getRawType
    java.lang.Iterable getInterfaces(com.google.common.reflect.TypeToken) -> getInterfaces
    com.google.common.reflect.TypeToken getSuperclass(com.google.common.reflect.TypeToken) -> getSuperclass
    java.lang.Object getSuperclass(java.lang.Object) -> getSuperclass
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    java.lang.Class getRawType(java.lang.Object) -> getRawType
com.google.common.reflect.TypeToken$TypeCollector$2 -> com.google.common.reflect.TypeToken$TypeCollector$2:
    java.lang.Class getRawType(java.lang.Class) -> getRawType
    java.lang.Iterable getInterfaces(java.lang.Class) -> getInterfaces
    java.lang.Class getSuperclass(java.lang.Class) -> getSuperclass
    java.lang.Object getSuperclass(java.lang.Object) -> getSuperclass
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    java.lang.Class getRawType(java.lang.Object) -> getRawType
com.google.common.reflect.TypeToken$TypeCollector$3 -> com.google.common.reflect.TypeToken$TypeCollector$3:
    com.google.common.reflect.TypeToken$TypeCollector this$0 -> this$0
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable) -> collectTypes
com.google.common.reflect.TypeToken$TypeCollector$4 -> com.google.common.reflect.TypeToken$TypeCollector$4:
    java.util.Comparator val$valueComparator -> val$valueComparator
    java.util.Map val$map -> val$map
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector -> com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:
    com.google.common.reflect.TypeToken$TypeCollector delegate -> delegate
    java.lang.Class getRawType(java.lang.Object) -> getRawType
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    java.lang.Object getSuperclass(java.lang.Object) -> getSuperclass
com.google.common.reflect.TypeToken$TypeFilter -> com.google.common.reflect.TypeToken$TypeFilter:
    com.google.common.reflect.TypeToken$TypeFilter IGNORE_TYPE_VARIABLE_OR_WILDCARD -> IGNORE_TYPE_VARIABLE_OR_WILDCARD
    com.google.common.reflect.TypeToken$TypeFilter INTERFACE_ONLY -> INTERFACE_ONLY
    com.google.common.reflect.TypeToken$TypeFilter[] $VALUES -> $VALUES
    com.google.common.reflect.TypeToken$TypeFilter[] values() -> values
    com.google.common.reflect.TypeToken$TypeFilter valueOf(java.lang.String) -> valueOf
com.google.common.reflect.TypeToken$TypeFilter$1 -> com.google.common.reflect.TypeToken$TypeFilter$1:
    boolean apply(com.google.common.reflect.TypeToken) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$TypeFilter$2 -> com.google.common.reflect.TypeToken$TypeFilter$2:
    boolean apply(com.google.common.reflect.TypeToken) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$TypeSet -> com.google.common.reflect.TypeToken$TypeSet:
    com.google.common.collect.ImmutableSet types -> types
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> this$0
    com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    java.util.Set delegate() -> delegate
    java.util.Set rawTypes() -> rawTypes
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.reflect.TypeVisitor -> com.google.common.reflect.TypeVisitor:
    java.util.Set visited -> visited
    void visit(java.lang.reflect.Type[]) -> visit
    void visitClass(java.lang.Class) -> visitClass
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
com.google.common.reflect.Types -> com.google.common.reflect.Types:
    com.google.common.base.Function TYPE_NAME -> TYPE_NAME
    com.google.common.base.Joiner COMMA_JOINER -> COMMA_JOINER
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[]) -> newParameterizedTypeWithOwner
    java.lang.reflect.ParameterizedType newParameterizedType(java.lang.Class,java.lang.reflect.Type[]) -> newParameterizedType
    java.lang.reflect.TypeVariable newArtificialTypeVariable(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]) -> newArtificialTypeVariable
    java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> subtypeOf
    java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> supertypeOf
    java.lang.String toString(java.lang.reflect.Type) -> toString
    java.lang.reflect.Type getComponentType(java.lang.reflect.Type) -> getComponentType
    java.lang.reflect.Type subtypeOfComponentType(java.lang.reflect.Type[]) -> subtypeOfComponentType
    java.lang.reflect.Type[] toArray(java.util.Collection) -> toArray
    java.lang.Iterable filterUpperBounds(java.lang.Iterable) -> filterUpperBounds
    void disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String) -> disallowPrimitiveType
    java.lang.Class getArrayClass(java.lang.Class) -> getArrayClass
    java.lang.reflect.Type access$100(java.lang.reflect.Type[]) -> access$100
    void access$200(java.lang.reflect.Type[],java.lang.String) -> access$200
    java.lang.reflect.Type[] access$300(java.util.Collection) -> access$300
    com.google.common.base.Function access$400() -> access$400
    com.google.common.base.Joiner access$500() -> access$500
    java.lang.Iterable access$600(java.lang.Iterable) -> access$600
com.google.common.reflect.Types$1 -> com.google.common.reflect.Types$1:
    java.lang.String apply(java.lang.reflect.Type) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.reflect.Types$2 -> com.google.common.reflect.Types$2:
    java.util.concurrent.atomic.AtomicReference val$result -> val$result
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
    void visitClass(java.lang.Class) -> visitClass
com.google.common.reflect.Types$ClassOwnership -> com.google.common.reflect.Types$ClassOwnership:
    com.google.common.reflect.Types$ClassOwnership OWNED_BY_ENCLOSING_CLASS -> OWNED_BY_ENCLOSING_CLASS
    com.google.common.reflect.Types$ClassOwnership LOCAL_CLASS_HAS_NO_OWNER -> LOCAL_CLASS_HAS_NO_OWNER
    com.google.common.reflect.Types$ClassOwnership JVM_BEHAVIOR -> JVM_BEHAVIOR
    com.google.common.reflect.Types$ClassOwnership[] $VALUES -> $VALUES
    com.google.common.reflect.Types$ClassOwnership[] values() -> values
    com.google.common.reflect.Types$ClassOwnership valueOf(java.lang.String) -> valueOf
    java.lang.Class getOwnerType(java.lang.Class) -> getOwnerType
    com.google.common.reflect.Types$ClassOwnership detectJvmBehavior() -> detectJvmBehavior
com.google.common.reflect.Types$ClassOwnership$1 -> com.google.common.reflect.Types$ClassOwnership$1:
    java.lang.Class getOwnerType(java.lang.Class) -> getOwnerType
com.google.common.reflect.Types$ClassOwnership$1LocalClass -> com.google.common.reflect.Types$ClassOwnership$1LocalClass:
com.google.common.reflect.Types$ClassOwnership$2 -> com.google.common.reflect.Types$ClassOwnership$2:
    java.lang.Class getOwnerType(java.lang.Class) -> getOwnerType
com.google.common.reflect.Types$ClassOwnership$3 -> com.google.common.reflect.Types$ClassOwnership$3:
com.google.common.reflect.Types$GenericArrayTypeImpl -> com.google.common.reflect.Types$GenericArrayTypeImpl:
    java.lang.reflect.Type componentType -> componentType
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$JavaVersion -> com.google.common.reflect.Types$JavaVersion:
    com.google.common.reflect.Types$JavaVersion JAVA6 -> JAVA6
    com.google.common.reflect.Types$JavaVersion JAVA7 -> JAVA7
    com.google.common.reflect.Types$JavaVersion JAVA8 -> JAVA8
    com.google.common.reflect.Types$JavaVersion CURRENT -> CURRENT
    com.google.common.reflect.Types$JavaVersion[] $VALUES -> $VALUES
    com.google.common.reflect.Types$JavaVersion[] values() -> values
    com.google.common.reflect.Types$JavaVersion valueOf(java.lang.String) -> valueOf
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
    java.lang.String typeName(java.lang.reflect.Type) -> typeName
    com.google.common.collect.ImmutableList usedInGenericType(java.lang.reflect.Type[]) -> usedInGenericType
com.google.common.reflect.Types$JavaVersion$1 -> com.google.common.reflect.Types$JavaVersion$1:
    java.lang.reflect.GenericArrayType newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
com.google.common.reflect.Types$JavaVersion$2 -> com.google.common.reflect.Types$JavaVersion$2:
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
com.google.common.reflect.Types$JavaVersion$3 -> com.google.common.reflect.Types$JavaVersion$3:
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
    java.lang.String typeName(java.lang.reflect.Type) -> typeName
com.google.common.reflect.Types$JavaVersion$4 -> com.google.common.reflect.Types$JavaVersion$4:
com.google.common.reflect.Types$NativeTypeVariableEquals -> com.google.common.reflect.Types$NativeTypeVariableEquals:
    boolean NATIVE_TYPE_VARIABLE_ONLY -> NATIVE_TYPE_VARIABLE_ONLY
com.google.common.reflect.Types$ParameterizedTypeImpl -> com.google.common.reflect.Types$ParameterizedTypeImpl:
    java.lang.reflect.Type ownerType -> ownerType
    com.google.common.collect.ImmutableList argumentsList -> argumentsList
    java.lang.Class rawType -> rawType
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$TypeVariableImpl -> com.google.common.reflect.Types$TypeVariableImpl:
    java.lang.reflect.GenericDeclaration genericDeclaration -> genericDeclaration
    java.lang.String name -> name
    com.google.common.collect.ImmutableList bounds -> bounds
    java.lang.reflect.Type[] getBounds() -> getBounds
    java.lang.reflect.GenericDeclaration getGenericDeclaration() -> getGenericDeclaration
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$WildcardTypeImpl -> com.google.common.reflect.Types$WildcardTypeImpl:
    com.google.common.collect.ImmutableList lowerBounds -> lowerBounds
    com.google.common.collect.ImmutableList upperBounds -> upperBounds
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.reflect.package-info -> com.google.common.reflect.package-info:
com.google.common.util.concurrent.AbstractCheckedFuture -> com.google.common.util.concurrent.AbstractCheckedFuture:
    java.lang.Exception mapException(java.lang.Exception) -> mapException
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
com.google.common.util.concurrent.AbstractExecutionThreadService -> com.google.common.util.concurrent.AbstractExecutionThreadService:
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.Service delegate -> delegate
    void startUp() -> startUp
    void run() -> run
    void shutDown() -> shutDown
    void triggerShutdown() -> triggerShutdown
    java.util.concurrent.Executor executor() -> executor
    java.lang.String toString() -> toString
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    java.lang.Throwable failureCause() -> failureCause
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.lang.String serviceName() -> serviceName
    java.util.logging.Logger access$000() -> access$000
com.google.common.util.concurrent.AbstractExecutionThreadService$1 -> com.google.common.util.concurrent.AbstractExecutionThreadService$1:
    com.google.common.util.concurrent.AbstractExecutionThreadService this$0 -> this$0
    void doStart() -> doStart
    void doStop() -> doStop
com.google.common.util.concurrent.AbstractExecutionThreadService$1$1 -> com.google.common.util.concurrent.AbstractExecutionThreadService$1$1:
    com.google.common.util.concurrent.AbstractExecutionThreadService$1 this$1 -> this$1
    java.lang.String get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.AbstractExecutionThreadService$1$2 -> com.google.common.util.concurrent.AbstractExecutionThreadService$1$2:
    com.google.common.util.concurrent.AbstractExecutionThreadService$1 this$1 -> this$1
    void run() -> run
com.google.common.util.concurrent.AbstractExecutionThreadService$2 -> com.google.common.util.concurrent.AbstractExecutionThreadService$2:
    com.google.common.util.concurrent.AbstractExecutionThreadService this$0 -> this$0
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.AbstractFuture -> com.google.common.util.concurrent.AbstractFuture:
    com.google.common.util.concurrent.AbstractFuture$Sync sync -> sync
    com.google.common.util.concurrent.ExecutionList executionList -> executionList
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    java.lang.Object get() -> get
    boolean isDone() -> isDone
    boolean isCancelled() -> isCancelled
    boolean cancel(boolean) -> cancel
    void interruptTask() -> interruptTask
    boolean wasInterrupted() -> wasInterrupted
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    boolean set(java.lang.Object) -> set
    boolean setException(java.lang.Throwable) -> setException
    java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable) -> cancellationExceptionWithCause
com.google.common.util.concurrent.AbstractFuture$Sync -> com.google.common.util.concurrent.AbstractFuture$Sync:
    long serialVersionUID -> serialVersionUID
    int RUNNING -> RUNNING
    int COMPLETING -> COMPLETING
    int COMPLETED -> COMPLETED
    int CANCELLED -> CANCELLED
    int INTERRUPTED -> INTERRUPTED
    java.lang.Object value -> value
    java.lang.Throwable exception -> exception
    int tryAcquireShared(int) -> tryAcquireShared
    boolean tryReleaseShared(int) -> tryReleaseShared
    java.lang.Object get(long) -> get
    java.lang.Object get() -> get
    java.lang.Object getValue() -> getValue
    boolean isDone() -> isDone
    boolean isCancelled() -> isCancelled
    boolean wasInterrupted() -> wasInterrupted
    boolean set(java.lang.Object) -> set
    boolean setException(java.lang.Throwable) -> setException
    boolean cancel(boolean) -> cancel
    boolean complete(java.lang.Object,java.lang.Throwable,int) -> complete
com.google.common.util.concurrent.AbstractIdleService -> com.google.common.util.concurrent.AbstractIdleService:
    com.google.common.base.Supplier threadNameSupplier -> threadNameSupplier
    com.google.common.util.concurrent.Service delegate -> delegate
    void startUp() -> startUp
    void shutDown() -> shutDown
    java.util.concurrent.Executor executor() -> executor
    java.lang.String toString() -> toString
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    java.lang.Throwable failureCause() -> failureCause
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.lang.String serviceName() -> serviceName
    com.google.common.base.Supplier access$000(com.google.common.util.concurrent.AbstractIdleService) -> access$000
com.google.common.util.concurrent.AbstractIdleService$1 -> com.google.common.util.concurrent.AbstractIdleService$1:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> this$0
    java.lang.String get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.AbstractIdleService$2 -> com.google.common.util.concurrent.AbstractIdleService$2:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> this$0
    void doStart() -> doStart
    void doStop() -> doStop
com.google.common.util.concurrent.AbstractIdleService$2$1 -> com.google.common.util.concurrent.AbstractIdleService$2$1:
    com.google.common.util.concurrent.AbstractIdleService$2 this$1 -> this$1
    void run() -> run
com.google.common.util.concurrent.AbstractIdleService$2$2 -> com.google.common.util.concurrent.AbstractIdleService$2$2:
    com.google.common.util.concurrent.AbstractIdleService$2 this$1 -> this$1
    void run() -> run
com.google.common.util.concurrent.AbstractIdleService$3 -> com.google.common.util.concurrent.AbstractIdleService$3:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> this$0
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.AbstractListeningExecutorService -> com.google.common.util.concurrent.AbstractListeningExecutorService:
    com.google.common.util.concurrent.ListenableFutureTask newTaskFor(java.lang.Runnable,java.lang.Object) -> newTaskFor
    com.google.common.util.concurrent.ListenableFutureTask newTaskFor(java.util.concurrent.Callable) -> newTaskFor
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable) -> newTaskFor
    java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object) -> newTaskFor
com.google.common.util.concurrent.AbstractScheduledService -> com.google.common.util.concurrent.AbstractScheduledService:
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.AbstractService delegate -> delegate
    void runOneIteration() -> runOneIteration
    void startUp() -> startUp
    void shutDown() -> shutDown
    com.google.common.util.concurrent.AbstractScheduledService$Scheduler scheduler() -> scheduler
    java.util.concurrent.ScheduledExecutorService executor() -> executor
    java.lang.String serviceName() -> serviceName
    java.lang.String toString() -> toString
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    java.lang.Throwable failureCause() -> failureCause
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.util.logging.Logger access$200() -> access$200
    com.google.common.util.concurrent.AbstractService access$400(com.google.common.util.concurrent.AbstractScheduledService) -> access$400
com.google.common.util.concurrent.AbstractScheduledService$1 -> com.google.common.util.concurrent.AbstractScheduledService$1:
    java.util.concurrent.Future runningTask -> runningTask
    java.util.concurrent.ScheduledExecutorService executorService -> executorService
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.lang.Runnable task -> task
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> this$0
    void doStart() -> doStart
    void doStop() -> doStop
    java.util.concurrent.locks.ReentrantLock access$100(com.google.common.util.concurrent.AbstractScheduledService$1) -> access$100
    java.util.concurrent.Future access$302(com.google.common.util.concurrent.AbstractScheduledService$1,java.util.concurrent.Future) -> access$302
    java.util.concurrent.ScheduledExecutorService access$500(com.google.common.util.concurrent.AbstractScheduledService$1) -> access$500
    java.lang.Runnable access$600(com.google.common.util.concurrent.AbstractScheduledService$1) -> access$600
com.google.common.util.concurrent.AbstractScheduledService$1$1 -> com.google.common.util.concurrent.AbstractScheduledService$1$1:
    com.google.common.util.concurrent.AbstractScheduledService$1 this$1 -> this$1
    void run() -> run
com.google.common.util.concurrent.AbstractScheduledService$1$2 -> com.google.common.util.concurrent.AbstractScheduledService$1$2:
    com.google.common.util.concurrent.AbstractScheduledService$1 this$1 -> this$1
    java.lang.String get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.AbstractScheduledService$1$3 -> com.google.common.util.concurrent.AbstractScheduledService$1$3:
    com.google.common.util.concurrent.AbstractScheduledService$1 this$1 -> this$1
    void run() -> run
com.google.common.util.concurrent.AbstractScheduledService$1$4 -> com.google.common.util.concurrent.AbstractScheduledService$1$4:
    com.google.common.util.concurrent.AbstractScheduledService$1 this$1 -> this$1
    void run() -> run
com.google.common.util.concurrent.AbstractScheduledService$2 -> com.google.common.util.concurrent.AbstractScheduledService$2:
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> this$0
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.google.common.util.concurrent.AbstractScheduledService$3 -> com.google.common.util.concurrent.AbstractScheduledService$3:
    java.util.concurrent.ScheduledExecutorService val$executor -> val$executor
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> this$0
    void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:
    java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> schedule
    com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule getNextSchedule() -> getNextSchedule
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:
    java.lang.Runnable wrappedRunnable -> wrappedRunnable
    java.util.concurrent.ScheduledExecutorService executor -> executor
    com.google.common.util.concurrent.AbstractService service -> service
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.util.concurrent.Future currentFuture -> currentFuture
    com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler this$0 -> this$0
    java.lang.Void call() -> call
    void reschedule() -> reschedule
    boolean cancel(boolean) -> cancel
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.lang.Object call() -> call
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:
    long delay -> delay
    java.util.concurrent.TimeUnit unit -> unit
    long access$700(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule) -> access$700
    java.util.concurrent.TimeUnit access$800(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule) -> access$800
com.google.common.util.concurrent.AbstractScheduledService$Scheduler -> com.google.common.util.concurrent.AbstractScheduledService$Scheduler:
    com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit) -> newFixedDelaySchedule
    com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit) -> newFixedRateSchedule
    java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> schedule
com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1 -> com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1:
    long val$initialDelay -> val$initialDelay
    long val$delay -> val$delay
    java.util.concurrent.TimeUnit val$unit -> val$unit
    java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> schedule
com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2 -> com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2:
    long val$initialDelay -> val$initialDelay
    long val$period -> val$period
    java.util.concurrent.TimeUnit val$unit -> val$unit
    java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> schedule
com.google.common.util.concurrent.AbstractService -> com.google.common.util.concurrent.AbstractService:
    com.google.common.util.concurrent.ListenerCallQueue$Callback STARTING_CALLBACK -> STARTING_CALLBACK
    com.google.common.util.concurrent.ListenerCallQueue$Callback RUNNING_CALLBACK -> RUNNING_CALLBACK
    com.google.common.util.concurrent.ListenerCallQueue$Callback STOPPING_FROM_STARTING_CALLBACK -> STOPPING_FROM_STARTING_CALLBACK
    com.google.common.util.concurrent.ListenerCallQueue$Callback STOPPING_FROM_RUNNING_CALLBACK -> STOPPING_FROM_RUNNING_CALLBACK
    com.google.common.util.concurrent.ListenerCallQueue$Callback TERMINATED_FROM_NEW_CALLBACK -> TERMINATED_FROM_NEW_CALLBACK
    com.google.common.util.concurrent.ListenerCallQueue$Callback TERMINATED_FROM_RUNNING_CALLBACK -> TERMINATED_FROM_RUNNING_CALLBACK
    com.google.common.util.concurrent.ListenerCallQueue$Callback TERMINATED_FROM_STOPPING_CALLBACK -> TERMINATED_FROM_STOPPING_CALLBACK
    com.google.common.util.concurrent.Monitor monitor -> monitor
    com.google.common.util.concurrent.Monitor$Guard isStartable -> isStartable
    com.google.common.util.concurrent.Monitor$Guard isStoppable -> isStoppable
    com.google.common.util.concurrent.Monitor$Guard hasReachedRunning -> hasReachedRunning
    com.google.common.util.concurrent.Monitor$Guard isStopped -> isStopped
    java.util.List listeners -> listeners
    com.google.common.util.concurrent.AbstractService$StateSnapshot snapshot -> snapshot
    com.google.common.util.concurrent.ListenerCallQueue$Callback terminatedCallback(com.google.common.util.concurrent.Service$State) -> terminatedCallback
    com.google.common.util.concurrent.ListenerCallQueue$Callback stoppingCallback(com.google.common.util.concurrent.Service$State) -> stoppingCallback
    void doStart() -> doStart
    void doStop() -> doStop
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    void checkCurrentState(com.google.common.util.concurrent.Service$State) -> checkCurrentState
    void notifyStarted() -> notifyStarted
    void notifyStopped() -> notifyStopped
    void notifyFailed(java.lang.Throwable) -> notifyFailed
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    java.lang.Throwable failureCause() -> failureCause
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    java.lang.String toString() -> toString
    void executeListeners() -> executeListeners
    void starting() -> starting
    void running() -> running
    void stopping(com.google.common.util.concurrent.Service$State) -> stopping
    void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.AbstractService$1 -> com.google.common.util.concurrent.AbstractService$1:
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$10 -> com.google.common.util.concurrent.AbstractService$10:
    int[] $SwitchMap$com$google$common$util$concurrent$Service$State -> $SwitchMap$com$google$common$util$concurrent$Service$State
com.google.common.util.concurrent.AbstractService$2 -> com.google.common.util.concurrent.AbstractService$2:
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$3 -> com.google.common.util.concurrent.AbstractService$3:
    com.google.common.util.concurrent.Service$State val$from -> val$from
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$4 -> com.google.common.util.concurrent.AbstractService$4:
    com.google.common.util.concurrent.Service$State val$from -> val$from
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$5 -> com.google.common.util.concurrent.AbstractService$5:
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$6 -> com.google.common.util.concurrent.AbstractService$6:
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$7 -> com.google.common.util.concurrent.AbstractService$7:
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$8 -> com.google.common.util.concurrent.AbstractService$8:
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$9 -> com.google.common.util.concurrent.AbstractService$9:
    com.google.common.util.concurrent.Service$State val$from -> val$from
    java.lang.Throwable val$cause -> val$cause
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$StateSnapshot -> com.google.common.util.concurrent.AbstractService$StateSnapshot:
    com.google.common.util.concurrent.Service$State state -> state
    boolean shutdownWhenStartupFinishes -> shutdownWhenStartupFinishes
    java.lang.Throwable failure -> failure
    com.google.common.util.concurrent.Service$State externalState() -> externalState
    java.lang.Throwable failureCause() -> failureCause
com.google.common.util.concurrent.AsyncFunction -> com.google.common.util.concurrent.AsyncFunction:
    com.google.common.util.concurrent.ListenableFuture apply(java.lang.Object) -> apply
com.google.common.util.concurrent.AsyncSettableFuture -> com.google.common.util.concurrent.AsyncSettableFuture:
    com.google.common.util.concurrent.AsyncSettableFuture$NestedFuture nested -> nested
    com.google.common.util.concurrent.ListenableFuture dereferenced -> dereferenced
    com.google.common.util.concurrent.AsyncSettableFuture create() -> create
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    boolean setFuture(com.google.common.util.concurrent.ListenableFuture) -> setFuture
    boolean setValue(java.lang.Object) -> setValue
    boolean setException(java.lang.Throwable) -> setException
    boolean isSet() -> isSet
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.AsyncSettableFuture$1 -> com.google.common.util.concurrent.AsyncSettableFuture$1:
com.google.common.util.concurrent.AsyncSettableFuture$NestedFuture -> com.google.common.util.concurrent.AsyncSettableFuture$NestedFuture:
    boolean setFuture(com.google.common.util.concurrent.ListenableFuture) -> setFuture
com.google.common.util.concurrent.AtomicDouble -> com.google.common.util.concurrent.AtomicDouble:
    long serialVersionUID -> serialVersionUID
    long value -> value
    java.util.concurrent.atomic.AtomicLongFieldUpdater updater -> updater
    double get() -> get
    void set(double) -> set
    void lazySet(double) -> lazySet
    double getAndSet(double) -> getAndSet
    boolean compareAndSet(double,double) -> compareAndSet
    boolean weakCompareAndSet(double,double) -> weakCompareAndSet
    double getAndAdd(double) -> getAndAdd
    double addAndGet(double) -> addAndGet
    java.lang.String toString() -> toString
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.util.concurrent.AtomicDoubleArray -> com.google.common.util.concurrent.AtomicDoubleArray:
    long serialVersionUID -> serialVersionUID
    java.util.concurrent.atomic.AtomicLongArray longs -> longs
    int length() -> length
    double get(int) -> get
    void set(int,double) -> set
    void lazySet(int,double) -> lazySet
    double getAndSet(int,double) -> getAndSet
    boolean compareAndSet(int,double,double) -> compareAndSet
    boolean weakCompareAndSet(int,double,double) -> weakCompareAndSet
    double getAndAdd(int,double) -> getAndAdd
    double addAndGet(int,double) -> addAndGet
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.util.concurrent.AtomicLongMap -> com.google.common.util.concurrent.AtomicLongMap:
    java.util.concurrent.ConcurrentHashMap map -> map
    java.util.Map asMap -> asMap
    com.google.common.util.concurrent.AtomicLongMap create() -> create
    com.google.common.util.concurrent.AtomicLongMap create(java.util.Map) -> create
    long get(java.lang.Object) -> get
    long incrementAndGet(java.lang.Object) -> incrementAndGet
    long decrementAndGet(java.lang.Object) -> decrementAndGet
    long addAndGet(java.lang.Object,long) -> addAndGet
    long getAndIncrement(java.lang.Object) -> getAndIncrement
    long getAndDecrement(java.lang.Object) -> getAndDecrement
    long getAndAdd(java.lang.Object,long) -> getAndAdd
    long put(java.lang.Object,long) -> put
    void putAll(java.util.Map) -> putAll
    long remove(java.lang.Object) -> remove
    void removeAllZeros() -> removeAllZeros
    long sum() -> sum
    java.util.Map asMap() -> asMap
    java.util.Map createAsMap() -> createAsMap
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.lang.String toString() -> toString
    long putIfAbsent(java.lang.Object,long) -> putIfAbsent
    boolean replace(java.lang.Object,long,long) -> replace
    boolean remove(java.lang.Object,long) -> remove
com.google.common.util.concurrent.AtomicLongMap$1 -> com.google.common.util.concurrent.AtomicLongMap$1:
    com.google.common.util.concurrent.AtomicLongMap this$0 -> this$0
    java.lang.Long apply(java.util.concurrent.atomic.AtomicLong) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.util.concurrent.Atomics -> com.google.common.util.concurrent.Atomics:
    java.util.concurrent.atomic.AtomicReference newReference() -> newReference
    java.util.concurrent.atomic.AtomicReference newReference(java.lang.Object) -> newReference
    java.util.concurrent.atomic.AtomicReferenceArray newReferenceArray(int) -> newReferenceArray
    java.util.concurrent.atomic.AtomicReferenceArray newReferenceArray(java.lang.Object[]) -> newReferenceArray
com.google.common.util.concurrent.Callables -> com.google.common.util.concurrent.Callables:
    java.util.concurrent.Callable returning(java.lang.Object) -> returning
    java.util.concurrent.Callable threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier) -> threadRenaming
    java.lang.Runnable threadRenaming(java.lang.Runnable,com.google.common.base.Supplier) -> threadRenaming
    boolean trySetName(java.lang.String,java.lang.Thread) -> trySetName
    boolean access$000(java.lang.String,java.lang.Thread) -> access$000
com.google.common.util.concurrent.Callables$1 -> com.google.common.util.concurrent.Callables$1:
    java.lang.Object val$value -> val$value
    java.lang.Object call() -> call
com.google.common.util.concurrent.Callables$2 -> com.google.common.util.concurrent.Callables$2:
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    java.util.concurrent.Callable val$callable -> val$callable
    java.lang.Object call() -> call
com.google.common.util.concurrent.Callables$3 -> com.google.common.util.concurrent.Callables$3:
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    java.lang.Runnable val$task -> val$task
    void run() -> run
com.google.common.util.concurrent.CheckedFuture -> com.google.common.util.concurrent.CheckedFuture:
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
com.google.common.util.concurrent.CycleDetectingLockFactory -> com.google.common.util.concurrent.CycleDetectingLockFactory:
    java.util.concurrent.ConcurrentMap lockGraphNodesPerType -> lockGraphNodesPerType
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policy policy -> policy
    java.lang.ThreadLocal acquiredLocks -> acquiredLocks
    com.google.common.util.concurrent.CycleDetectingLockFactory newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy) -> newInstance
    java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String) -> newReentrantLock
    java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String,boolean) -> newReentrantLock
    java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String) -> newReentrantReadWriteLock
    java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String,boolean) -> newReentrantReadWriteLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy) -> newInstanceWithExplicitOrdering
    java.util.Map getOrCreateNodes(java.lang.Class) -> getOrCreateNodes
    java.util.Map createNodes(java.lang.Class) -> createNodes
    java.lang.String getLockName(java.lang.Enum) -> getLockName
    void aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> aboutToAcquire
    void lockStateChanged(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> lockStateChanged
    java.util.logging.Logger access$100() -> access$100
    void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> access$600
    void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> access$700
com.google.common.util.concurrent.CycleDetectingLockFactory$1 -> com.google.common.util.concurrent.CycleDetectingLockFactory$1:
    java.util.ArrayList initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> getLockGraphNode
    boolean isAcquiredByCurrentThread() -> isAcquiredByCurrentThread
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode -> lockGraphNode
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> this$0
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> getLockGraphNode
    boolean isAcquiredByCurrentThread() -> isAcquiredByCurrentThread
    void lock() -> lock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    void unlock() -> unlock
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock -> readWriteLock
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> this$0
    void lock() -> lock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    void unlock() -> unlock
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock readLock -> readLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock writeLock -> writeLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode -> lockGraphNode
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> this$0
    java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock() -> readLock
    java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock() -> writeLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> getLockGraphNode
    boolean isAcquiredByCurrentThread() -> isAcquiredByCurrentThread
    java.util.concurrent.locks.Lock writeLock() -> writeLock
    java.util.concurrent.locks.Lock readLock() -> readLock
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock -> readWriteLock
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> this$0
    void lock() -> lock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    void unlock() -> unlock
com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace -> com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace:
    java.lang.StackTraceElement[] EMPTY_STACK_TRACE -> EMPTY_STACK_TRACE
    java.util.Set EXCLUDED_CLASS_NAMES -> EXCLUDED_CLASS_NAMES
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode -> com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:
    java.util.Map allowedPriorLocks -> allowedPriorLocks
    java.util.Map disallowedPriorLocks -> disallowedPriorLocks
    java.lang.String lockName -> lockName
    java.lang.String getLockName() -> getLockName
    void checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List) -> checkAcquiredLocks
    void checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) -> checkAcquiredLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set) -> findPathTo
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies:
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies THROW -> THROW
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies WARN -> WARN
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies DISABLED -> DISABLED
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] $VALUES -> $VALUES
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] values() -> values
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies valueOf(java.lang.String) -> valueOf
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1 -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1:
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2 -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2:
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3 -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3:
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policy -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policy:
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException -> com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace -> conflictingStackTrace
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace getConflictingStackTrace() -> getConflictingStackTrace
    java.lang.String getMessage() -> getMessage
com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering -> com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering:
    java.util.Map lockGraphNodes -> lockGraphNodes
    java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum) -> newReentrantLock
    java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum,boolean) -> newReentrantLock
    java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum) -> newReentrantReadWriteLock
    java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum,boolean) -> newReentrantReadWriteLock
com.google.common.util.concurrent.ExecutionError -> com.google.common.util.concurrent.ExecutionError:
    long serialVersionUID -> serialVersionUID
com.google.common.util.concurrent.ExecutionList -> com.google.common.util.concurrent.ExecutionList:
    java.util.logging.Logger log -> log
    com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables -> runnables
    boolean executed -> executed
    void add(java.lang.Runnable,java.util.concurrent.Executor) -> add
    void execute() -> execute
    void executeListener(java.lang.Runnable,java.util.concurrent.Executor) -> executeListener
com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair -> com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair:
    java.lang.Runnable runnable -> runnable
    java.util.concurrent.Executor executor -> executor
    com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair next -> next
com.google.common.util.concurrent.FakeTimeLimiter -> com.google.common.util.concurrent.FakeTimeLimiter:
    java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean) -> callWithTimeout
com.google.common.util.concurrent.ForwardingBlockingQueue -> com.google.common.util.concurrent.ForwardingBlockingQueue:
    java.util.concurrent.BlockingQueue delegate() -> delegate
    int drainTo(java.util.Collection,int) -> drainTo
    int drainTo(java.util.Collection) -> drainTo
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    void put(java.lang.Object) -> put
    int remainingCapacity() -> remainingCapacity
    java.lang.Object take() -> take
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingCheckedFuture -> com.google.common.util.concurrent.ForwardingCheckedFuture:
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
    com.google.common.util.concurrent.CheckedFuture delegate() -> delegate
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture -> com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture:
    com.google.common.util.concurrent.CheckedFuture delegate -> delegate
    com.google.common.util.concurrent.CheckedFuture delegate() -> delegate
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingExecutorService -> com.google.common.util.concurrent.ForwardingExecutorService:
    java.util.concurrent.ExecutorService delegate() -> delegate
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    java.util.List invokeAll(java.util.Collection) -> invokeAll
    java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
    java.lang.Object invokeAny(java.util.Collection) -> invokeAny
    java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAny
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    void execute(java.lang.Runnable) -> execute
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingFuture -> com.google.common.util.concurrent.ForwardingFuture:
    java.util.concurrent.Future delegate() -> delegate
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture -> com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:
    java.util.concurrent.Future delegate -> delegate
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListenableFuture -> com.google.common.util.concurrent.ForwardingListenableFuture:
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture -> com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:
    com.google.common.util.concurrent.ListenableFuture delegate -> delegate
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListeningExecutorService -> com.google.common.util.concurrent.ForwardingListeningExecutorService:
    com.google.common.util.concurrent.ListeningExecutorService delegate() -> delegate
    com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.ExecutorService delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.FutureCallback -> com.google.common.util.concurrent.FutureCallback:
    void onSuccess(java.lang.Object) -> onSuccess
    void onFailure(java.lang.Throwable) -> onFailure
com.google.common.util.concurrent.FutureFallback -> com.google.common.util.concurrent.FutureFallback:
    com.google.common.util.concurrent.ListenableFuture create(java.lang.Throwable) -> create
com.google.common.util.concurrent.Futures -> com.google.common.util.concurrent.Futures:
    com.google.common.util.concurrent.AsyncFunction DEREFERENCER -> DEREFERENCER
    com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST -> WITH_STRING_PARAM_FIRST
    com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function) -> makeChecked
    com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object) -> immediateFuture
    com.google.common.util.concurrent.CheckedFuture immediateCheckedFuture(java.lang.Object) -> immediateCheckedFuture
    com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable) -> immediateFailedFuture
    com.google.common.util.concurrent.ListenableFuture immediateCancelledFuture() -> immediateCancelledFuture
    com.google.common.util.concurrent.CheckedFuture immediateFailedCheckedFuture(java.lang.Exception) -> immediateFailedCheckedFuture
    com.google.common.util.concurrent.ListenableFuture withFallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureFallback) -> withFallback
    com.google.common.util.concurrent.ListenableFuture withFallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureFallback,java.util.concurrent.Executor) -> withFallback
    com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction) -> transform
    com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> transform
    java.lang.Runnable rejectionPropagatingRunnable(com.google.common.util.concurrent.AbstractFuture,java.lang.Runnable,java.util.concurrent.Executor) -> rejectionPropagatingRunnable
    com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function) -> transform
    com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor) -> transform
    com.google.common.util.concurrent.AsyncFunction asAsyncFunction(com.google.common.base.Function) -> asAsyncFunction
    java.util.concurrent.Future lazyTransform(java.util.concurrent.Future,com.google.common.base.Function) -> lazyTransform
    com.google.common.util.concurrent.ListenableFuture dereference(com.google.common.util.concurrent.ListenableFuture) -> dereference
    com.google.common.util.concurrent.ListenableFuture allAsList(com.google.common.util.concurrent.ListenableFuture[]) -> allAsList
    com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable) -> allAsList
    com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture) -> nonCancellationPropagating
    com.google.common.util.concurrent.ListenableFuture successfulAsList(com.google.common.util.concurrent.ListenableFuture[]) -> successfulAsList
    com.google.common.util.concurrent.ListenableFuture successfulAsList(java.lang.Iterable) -> successfulAsList
    com.google.common.collect.ImmutableList inCompletionOrder(java.lang.Iterable) -> inCompletionOrder
    void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback) -> addCallback
    void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor) -> addCallback
    java.lang.Object get(java.util.concurrent.Future,java.lang.Class) -> get
    java.lang.Object get(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit,java.lang.Class) -> get
    void wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class) -> wrapAndThrowExceptionOrError
    java.lang.Object getUnchecked(java.util.concurrent.Future) -> getUnchecked
    void wrapAndThrowUnchecked(java.lang.Throwable) -> wrapAndThrowUnchecked
    java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable) -> newWithCause
    java.util.List preferringStrings(java.util.List) -> preferringStrings
    java.lang.Object newFromConstructor(java.lang.reflect.Constructor,java.lang.Throwable) -> newFromConstructor
    com.google.common.util.concurrent.ListenableFuture listFuture(com.google.common.collect.ImmutableList,boolean,java.util.concurrent.Executor) -> listFuture
com.google.common.util.concurrent.Futures$1 -> com.google.common.util.concurrent.Futures$1:
    java.util.concurrent.Executor val$delegateExecutor -> val$delegateExecutor
    java.lang.Runnable val$delegateTask -> val$delegateTask
    com.google.common.util.concurrent.AbstractFuture val$outputFuture -> val$outputFuture
    void run() -> run
com.google.common.util.concurrent.Futures$1$1 -> com.google.common.util.concurrent.Futures$1$1:
    java.util.concurrent.atomic.AtomicBoolean val$thrownFromDelegate -> val$thrownFromDelegate
    com.google.common.util.concurrent.Futures$1 this$0 -> this$0
    void run() -> run
com.google.common.util.concurrent.Futures$2 -> com.google.common.util.concurrent.Futures$2:
    com.google.common.base.Function val$function -> val$function
    com.google.common.util.concurrent.ListenableFuture apply(java.lang.Object) -> apply
com.google.common.util.concurrent.Futures$3 -> com.google.common.util.concurrent.Futures$3:
    java.util.concurrent.Future val$input -> val$input
    com.google.common.base.Function val$function -> val$function
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    java.lang.Object applyTransformation(java.lang.Object) -> applyTransformation
com.google.common.util.concurrent.Futures$4 -> com.google.common.util.concurrent.Futures$4:
    com.google.common.util.concurrent.ListenableFuture apply(com.google.common.util.concurrent.ListenableFuture) -> apply
    com.google.common.util.concurrent.ListenableFuture apply(java.lang.Object) -> apply
com.google.common.util.concurrent.Futures$5 -> com.google.common.util.concurrent.Futures$5:
    java.util.concurrent.ConcurrentLinkedQueue val$delegates -> val$delegates
    com.google.common.util.concurrent.ListenableFuture val$future -> val$future
    void run() -> run
com.google.common.util.concurrent.Futures$6 -> com.google.common.util.concurrent.Futures$6:
    com.google.common.util.concurrent.ListenableFuture val$future -> val$future
    com.google.common.util.concurrent.FutureCallback val$callback -> val$callback
    void run() -> run
com.google.common.util.concurrent.Futures$7 -> com.google.common.util.concurrent.Futures$7:
    java.lang.Boolean apply(java.lang.reflect.Constructor) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.util.concurrent.Futures$8 -> com.google.common.util.concurrent.Futures$8:
    java.util.List combine(java.util.List) -> combine
    java.lang.Object combine(java.util.List) -> combine
com.google.common.util.concurrent.Futures$ChainingListenableFuture -> com.google.common.util.concurrent.Futures$ChainingListenableFuture:
    com.google.common.util.concurrent.AsyncFunction function -> function
    com.google.common.util.concurrent.ListenableFuture inputFuture -> inputFuture
    com.google.common.util.concurrent.ListenableFuture outputFuture -> outputFuture
    boolean cancel(boolean) -> cancel
    void cancel(java.util.concurrent.Future,boolean) -> cancel
    void run() -> run
    com.google.common.util.concurrent.ListenableFuture access$302(com.google.common.util.concurrent.Futures$ChainingListenableFuture,com.google.common.util.concurrent.ListenableFuture) -> access$302
com.google.common.util.concurrent.Futures$ChainingListenableFuture$1 -> com.google.common.util.concurrent.Futures$ChainingListenableFuture$1:
    com.google.common.util.concurrent.ListenableFuture val$outputFuture -> val$outputFuture
    com.google.common.util.concurrent.Futures$ChainingListenableFuture this$0 -> this$0
    void run() -> run
com.google.common.util.concurrent.Futures$CombinedFuture -> com.google.common.util.concurrent.Futures$CombinedFuture:
    java.util.logging.Logger logger -> logger
    com.google.common.collect.ImmutableCollection futures -> futures
    boolean allMustSucceed -> allMustSucceed
    java.util.concurrent.atomic.AtomicInteger remaining -> remaining
    com.google.common.util.concurrent.Futures$FutureCombiner combiner -> combiner
    java.util.List values -> values
    java.lang.Object seenExceptionsLock -> seenExceptionsLock
    java.util.Set seenExceptions -> seenExceptions
    void init(java.util.concurrent.Executor) -> init
    void setExceptionAndMaybeLog(java.lang.Throwable) -> setExceptionAndMaybeLog
    void setOneValue(int,java.util.concurrent.Future) -> setOneValue
    void access$400(com.google.common.util.concurrent.Futures$CombinedFuture,int,java.util.concurrent.Future) -> access$400
com.google.common.util.concurrent.Futures$CombinedFuture$1 -> com.google.common.util.concurrent.Futures$CombinedFuture$1:
    com.google.common.util.concurrent.Futures$CombinedFuture this$0 -> this$0
    void run() -> run
com.google.common.util.concurrent.Futures$CombinedFuture$2 -> com.google.common.util.concurrent.Futures$CombinedFuture$2:
    int val$index -> val$index
    com.google.common.util.concurrent.ListenableFuture val$listenable -> val$listenable
    com.google.common.util.concurrent.Futures$CombinedFuture this$0 -> this$0
    void run() -> run
com.google.common.util.concurrent.Futures$CombinerFuture -> com.google.common.util.concurrent.Futures$CombinerFuture:
    com.google.common.collect.ImmutableList futures -> futures
    boolean cancel(boolean) -> cancel
    void done() -> done
    void setException(java.lang.Throwable) -> setException
com.google.common.util.concurrent.Futures$FallbackFuture -> com.google.common.util.concurrent.Futures$FallbackFuture:
    com.google.common.util.concurrent.ListenableFuture running -> running
    boolean cancel(boolean) -> cancel
    com.google.common.util.concurrent.ListenableFuture access$102(com.google.common.util.concurrent.Futures$FallbackFuture,com.google.common.util.concurrent.ListenableFuture) -> access$102
    com.google.common.util.concurrent.ListenableFuture access$100(com.google.common.util.concurrent.Futures$FallbackFuture) -> access$100
com.google.common.util.concurrent.Futures$FallbackFuture$1 -> com.google.common.util.concurrent.Futures$FallbackFuture$1:
    com.google.common.util.concurrent.FutureFallback val$fallback -> val$fallback
    com.google.common.util.concurrent.Futures$FallbackFuture this$0 -> this$0
    void onSuccess(java.lang.Object) -> onSuccess
    void onFailure(java.lang.Throwable) -> onFailure
com.google.common.util.concurrent.Futures$FallbackFuture$1$1 -> com.google.common.util.concurrent.Futures$FallbackFuture$1$1:
    com.google.common.util.concurrent.Futures$FallbackFuture$1 this$1 -> this$1
    void onSuccess(java.lang.Object) -> onSuccess
    void onFailure(java.lang.Throwable) -> onFailure
com.google.common.util.concurrent.Futures$FutureCombiner -> com.google.common.util.concurrent.Futures$FutureCombiner:
    java.lang.Object combine(java.util.List) -> combine
com.google.common.util.concurrent.Futures$ImmediateCancelledFuture -> com.google.common.util.concurrent.Futures$ImmediateCancelledFuture:
    java.util.concurrent.CancellationException thrown -> thrown
    boolean isCancelled() -> isCancelled
    java.lang.Object get() -> get
com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture -> com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture:
    java.lang.Exception thrown -> thrown
    java.lang.Object get() -> get
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
com.google.common.util.concurrent.Futures$ImmediateFailedFuture -> com.google.common.util.concurrent.Futures$ImmediateFailedFuture:
    java.lang.Throwable thrown -> thrown
    java.lang.Object get() -> get
com.google.common.util.concurrent.Futures$ImmediateFuture -> com.google.common.util.concurrent.Futures$ImmediateFuture:
    java.util.logging.Logger log -> log
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    boolean cancel(boolean) -> cancel
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture -> com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture:
    java.lang.Object value -> value
    java.lang.Object get() -> get
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture -> com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture:
    java.lang.Object value -> value
    java.lang.Object get() -> get
com.google.common.util.concurrent.Futures$MappingCheckedFuture -> com.google.common.util.concurrent.Futures$MappingCheckedFuture:
    com.google.common.base.Function mapper -> mapper
    java.lang.Exception mapException(java.lang.Exception) -> mapException
com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture -> com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:
com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1 -> com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1:
    com.google.common.util.concurrent.ListenableFuture val$delegate -> val$delegate
    com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture this$0 -> this$0
    void onSuccess(java.lang.Object) -> onSuccess
    void onFailure(java.lang.Throwable) -> onFailure
com.google.common.util.concurrent.Futures$WrappedCombiner -> com.google.common.util.concurrent.Futures$WrappedCombiner:
    java.util.concurrent.Callable delegate -> delegate
    com.google.common.util.concurrent.Futures$CombinerFuture outputFuture -> outputFuture
    java.lang.Object call() -> call
com.google.common.util.concurrent.JdkFutureAdapters -> com.google.common.util.concurrent.JdkFutureAdapters:
    com.google.common.util.concurrent.ListenableFuture listenInPoolThread(java.util.concurrent.Future) -> listenInPoolThread
    com.google.common.util.concurrent.ListenableFuture listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor) -> listenInPoolThread
com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter -> com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:
    java.util.concurrent.ThreadFactory threadFactory -> threadFactory
    java.util.concurrent.Executor defaultAdapterExecutor -> defaultAdapterExecutor
    java.util.concurrent.Executor adapterExecutor -> adapterExecutor
    com.google.common.util.concurrent.ExecutionList executionList -> executionList
    java.util.concurrent.atomic.AtomicBoolean hasListeners -> hasListeners
    java.util.concurrent.Future delegate -> delegate
    java.util.concurrent.Future delegate() -> delegate
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    java.lang.Object delegate() -> delegate
    java.util.concurrent.Future access$000(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> access$000
    com.google.common.util.concurrent.ExecutionList access$100(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> access$100
com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1 -> com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1:
    com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter this$0 -> this$0
    void run() -> run
com.google.common.util.concurrent.ListenableFuture -> com.google.common.util.concurrent.ListenableFuture:
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
com.google.common.util.concurrent.ListenableFutureTask -> com.google.common.util.concurrent.ListenableFutureTask:
    com.google.common.util.concurrent.ExecutionList executionList -> executionList
    com.google.common.util.concurrent.ListenableFutureTask create(java.util.concurrent.Callable) -> create
    com.google.common.util.concurrent.ListenableFutureTask create(java.lang.Runnable,java.lang.Object) -> create
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    void done() -> done
com.google.common.util.concurrent.ListenableScheduledFuture -> com.google.common.util.concurrent.ListenableScheduledFuture:
com.google.common.util.concurrent.ListenerCallQueue -> com.google.common.util.concurrent.ListenerCallQueue:
    java.util.logging.Logger logger -> logger
    java.lang.Object listener -> listener
    java.util.concurrent.Executor executor -> executor
    java.util.Queue waitQueue -> waitQueue
    boolean isThreadScheduled -> isThreadScheduled
    void add(com.google.common.util.concurrent.ListenerCallQueue$Callback) -> add
    void execute() -> execute
    void run() -> run
com.google.common.util.concurrent.ListenerCallQueue$Callback -> com.google.common.util.concurrent.ListenerCallQueue$Callback:
    java.lang.String methodCall -> methodCall
    void call(java.lang.Object) -> call
    void enqueueOn(java.lang.Iterable) -> enqueueOn
    java.lang.String access$000(com.google.common.util.concurrent.ListenerCallQueue$Callback) -> access$000
com.google.common.util.concurrent.ListeningExecutorService -> com.google.common.util.concurrent.ListeningExecutorService:
    com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.List invokeAll(java.util.Collection) -> invokeAll
    java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
com.google.common.util.concurrent.ListeningScheduledExecutorService -> com.google.common.util.concurrent.ListeningScheduledExecutorService:
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
com.google.common.util.concurrent.Monitor -> com.google.common.util.concurrent.Monitor:
    boolean fair -> fair
    java.util.concurrent.locks.ReentrantLock lock -> lock
    com.google.common.util.concurrent.Monitor$Guard activeGuards -> activeGuards
    void enter() -> enter
    void enterInterruptibly() -> enterInterruptibly
    boolean enter(long,java.util.concurrent.TimeUnit) -> enter
    boolean enterInterruptibly(long,java.util.concurrent.TimeUnit) -> enterInterruptibly
    boolean tryEnter() -> tryEnter
    void enterWhen(com.google.common.util.concurrent.Monitor$Guard) -> enterWhen
    void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> enterWhenUninterruptibly
    boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterWhen
    boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterWhenUninterruptibly
    boolean enterIf(com.google.common.util.concurrent.Monitor$Guard) -> enterIf
    boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> enterIfInterruptibly
    boolean enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterIf
    boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterIfInterruptibly
    boolean tryEnterIf(com.google.common.util.concurrent.Monitor$Guard) -> tryEnterIf
    void waitFor(com.google.common.util.concurrent.Monitor$Guard) -> waitFor
    void waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> waitForUninterruptibly
    boolean waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> waitFor
    boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> waitForUninterruptibly
    void leave() -> leave
    boolean isFair() -> isFair
    boolean isOccupied() -> isOccupied
    boolean isOccupiedByCurrentThread() -> isOccupiedByCurrentThread
    int getOccupiedDepth() -> getOccupiedDepth
    int getQueueLength() -> getQueueLength
    boolean hasQueuedThreads() -> hasQueuedThreads
    boolean hasQueuedThread(java.lang.Thread) -> hasQueuedThread
    boolean hasWaiters(com.google.common.util.concurrent.Monitor$Guard) -> hasWaiters
    int getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard) -> getWaitQueueLength
    void signalNextWaiter() -> signalNextWaiter
    boolean isSatisfied(com.google.common.util.concurrent.Monitor$Guard) -> isSatisfied
    void signalAllWaiters() -> signalAllWaiters
    void beginWaitingFor(com.google.common.util.concurrent.Monitor$Guard) -> beginWaitingFor
    void endWaitingFor(com.google.common.util.concurrent.Monitor$Guard) -> endWaitingFor
    void await(com.google.common.util.concurrent.Monitor$Guard,boolean) -> await
    void awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean) -> awaitUninterruptibly
    boolean awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean) -> awaitNanos
    java.util.concurrent.locks.ReentrantLock access$000(com.google.common.util.concurrent.Monitor) -> access$000
com.google.common.util.concurrent.Monitor$Guard -> com.google.common.util.concurrent.Monitor$Guard:
    com.google.common.util.concurrent.Monitor monitor -> monitor
    java.util.concurrent.locks.Condition condition -> condition
    int waiterCount -> waiterCount
    com.google.common.util.concurrent.Monitor$Guard next -> next
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.MoreExecutors -> com.google.common.util.concurrent.MoreExecutors:
    java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingExecutorService
    java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingScheduledExecutorService
    void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> addDelayedShutdownHook
    java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor) -> getExitingExecutorService
    java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor) -> getExitingScheduledExecutorService
    void useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor) -> useDaemonThreadFactory
    com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor() -> sameThreadExecutor
    com.google.common.util.concurrent.ListeningExecutorService newDirectExecutorService() -> newDirectExecutorService
    java.util.concurrent.Executor directExecutor() -> directExecutor
    com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService) -> listeningDecorator
    com.google.common.util.concurrent.ListeningScheduledExecutorService listeningDecorator(java.util.concurrent.ScheduledExecutorService) -> listeningDecorator
    java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long) -> invokeAnyImpl
    com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue) -> submitAndAddQueueListener
    java.util.concurrent.ThreadFactory platformThreadFactory() -> platformThreadFactory
    boolean isAppEngine() -> isAppEngine
    java.lang.Thread newThread(java.lang.String,java.lang.Runnable) -> newThread
    java.util.concurrent.Executor renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier) -> renamingDecorator
    java.util.concurrent.ExecutorService renamingDecorator(java.util.concurrent.ExecutorService,com.google.common.base.Supplier) -> renamingDecorator
    java.util.concurrent.ScheduledExecutorService renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier) -> renamingDecorator
    boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> shutdownAndAwaitTermination
    void access$000(java.util.concurrent.ThreadPoolExecutor) -> access$000
com.google.common.util.concurrent.MoreExecutors$1 -> com.google.common.util.concurrent.MoreExecutors$1:
    java.util.concurrent.BlockingQueue val$queue -> val$queue
    com.google.common.util.concurrent.ListenableFuture val$future -> val$future
    void run() -> run
com.google.common.util.concurrent.MoreExecutors$2 -> com.google.common.util.concurrent.MoreExecutors$2:
    java.util.concurrent.Executor val$executor -> val$executor
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$3 -> com.google.common.util.concurrent.MoreExecutors$3:
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable) -> wrapTask
    java.lang.Runnable wrapTask(java.lang.Runnable) -> wrapTask
com.google.common.util.concurrent.MoreExecutors$4 -> com.google.common.util.concurrent.MoreExecutors$4:
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable) -> wrapTask
    java.lang.Runnable wrapTask(java.lang.Runnable) -> wrapTask
com.google.common.util.concurrent.MoreExecutors$Application -> com.google.common.util.concurrent.MoreExecutors$Application:
    java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingExecutorService
    java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingScheduledExecutorService
    void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> addDelayedShutdownHook
    java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor) -> getExitingExecutorService
    java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor) -> getExitingScheduledExecutorService
    void addShutdownHook(java.lang.Thread) -> addShutdownHook
com.google.common.util.concurrent.MoreExecutors$Application$1 -> com.google.common.util.concurrent.MoreExecutors$Application$1:
    java.util.concurrent.ExecutorService val$service -> val$service
    long val$terminationTimeout -> val$terminationTimeout
    java.util.concurrent.TimeUnit val$timeUnit -> val$timeUnit
    com.google.common.util.concurrent.MoreExecutors$Application this$0 -> this$0
    void run() -> run
com.google.common.util.concurrent.MoreExecutors$DirectExecutor -> com.google.common.util.concurrent.MoreExecutors$DirectExecutor:
    com.google.common.util.concurrent.MoreExecutors$DirectExecutor INSTANCE -> INSTANCE
    com.google.common.util.concurrent.MoreExecutors$DirectExecutor[] $VALUES -> $VALUES
    com.google.common.util.concurrent.MoreExecutors$DirectExecutor[] values() -> values
    com.google.common.util.concurrent.MoreExecutors$DirectExecutor valueOf(java.lang.String) -> valueOf
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$DirectExecutorService -> com.google.common.util.concurrent.MoreExecutors$DirectExecutorService:
    java.util.concurrent.locks.Lock lock -> lock
    java.util.concurrent.locks.Condition termination -> termination
    int runningTasks -> runningTasks
    boolean shutdown -> shutdown
    void execute(java.lang.Runnable) -> execute
    boolean isShutdown() -> isShutdown
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    boolean isTerminated() -> isTerminated
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    void startTask() -> startTask
    void endTask() -> endTask
com.google.common.util.concurrent.MoreExecutors$ListeningDecorator -> com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:
    java.util.concurrent.ExecutorService delegate -> delegate
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator -> com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:
    java.util.concurrent.ScheduledExecutorService delegate -> delegate
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask -> com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:
    java.util.concurrent.ScheduledFuture scheduledDelegate -> scheduledDelegate
    boolean cancel(boolean) -> cancel
    long getDelay(java.util.concurrent.TimeUnit) -> getDelay
    int compareTo(java.util.concurrent.Delayed) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask -> com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:
    java.lang.Runnable delegate -> delegate
    void run() -> run
com.google.common.util.concurrent.RateLimiter -> com.google.common.util.concurrent.RateLimiter:
    com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch -> stopwatch
    java.lang.Object mutexDoNotUseDirectly -> mutexDoNotUseDirectly
    com.google.common.util.concurrent.RateLimiter create(double) -> create
    com.google.common.util.concurrent.RateLimiter create(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double) -> create
    com.google.common.util.concurrent.RateLimiter create(double,long,java.util.concurrent.TimeUnit) -> create
    com.google.common.util.concurrent.RateLimiter create(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double,long,java.util.concurrent.TimeUnit) -> create
    java.lang.Object mutex() -> mutex
    void setRate(double) -> setRate
    void doSetRate(double,long) -> doSetRate
    double getRate() -> getRate
    double doGetRate() -> doGetRate
    double acquire() -> acquire
    double acquire(int) -> acquire
    long reserve(int) -> reserve
    boolean tryAcquire(long,java.util.concurrent.TimeUnit) -> tryAcquire
    boolean tryAcquire(int) -> tryAcquire
    boolean tryAcquire() -> tryAcquire
    boolean tryAcquire(int,long,java.util.concurrent.TimeUnit) -> tryAcquire
    boolean canAcquire(long,long) -> canAcquire
    long reserveAndGetWaitLength(int,long) -> reserveAndGetWaitLength
    long queryEarliestAvailable(long) -> queryEarliestAvailable
    long reserveEarliestAvailable(int,long) -> reserveEarliestAvailable
    java.lang.String toString() -> toString
    int checkPermits(int) -> checkPermits
com.google.common.util.concurrent.RateLimiter$SleepingStopwatch -> com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:
    long readMicros() -> readMicros
    void sleepMicrosUninterruptibly(long) -> sleepMicrosUninterruptibly
    com.google.common.util.concurrent.RateLimiter$SleepingStopwatch createFromSystemTimer() -> createFromSystemTimer
com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1 -> com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:
    com.google.common.base.Stopwatch stopwatch -> stopwatch
    long readMicros() -> readMicros
    void sleepMicrosUninterruptibly(long) -> sleepMicrosUninterruptibly
com.google.common.util.concurrent.Runnables -> com.google.common.util.concurrent.Runnables:
    java.lang.Runnable EMPTY_RUNNABLE -> EMPTY_RUNNABLE
    java.lang.Runnable doNothing() -> doNothing
com.google.common.util.concurrent.Runnables$1 -> com.google.common.util.concurrent.Runnables$1:
    void run() -> run
com.google.common.util.concurrent.SerializingExecutor -> com.google.common.util.concurrent.SerializingExecutor:
    java.util.logging.Logger log -> log
    java.util.concurrent.Executor executor -> executor
    java.util.Queue waitQueue -> waitQueue
    boolean isThreadScheduled -> isThreadScheduled
    com.google.common.util.concurrent.SerializingExecutor$TaskRunner taskRunner -> taskRunner
    java.lang.Object internalLock -> internalLock
    void execute(java.lang.Runnable) -> execute
    boolean access$100(com.google.common.util.concurrent.SerializingExecutor) -> access$100
    java.lang.Object access$200(com.google.common.util.concurrent.SerializingExecutor) -> access$200
    java.util.Queue access$300(com.google.common.util.concurrent.SerializingExecutor) -> access$300
    boolean access$102(com.google.common.util.concurrent.SerializingExecutor,boolean) -> access$102
    java.util.logging.Logger access$400() -> access$400
com.google.common.util.concurrent.SerializingExecutor$1 -> com.google.common.util.concurrent.SerializingExecutor$1:
    com.google.common.util.concurrent.SerializingExecutor this$0 -> this$0
    java.lang.String toString() -> toString
com.google.common.util.concurrent.SerializingExecutor$TaskRunner -> com.google.common.util.concurrent.SerializingExecutor$TaskRunner:
    com.google.common.util.concurrent.SerializingExecutor this$0 -> this$0
    void run() -> run
com.google.common.util.concurrent.Service -> com.google.common.util.concurrent.Service:
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.lang.Throwable failureCause() -> failureCause
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
com.google.common.util.concurrent.Service$1 -> com.google.common.util.concurrent.Service$1:
com.google.common.util.concurrent.Service$Listener -> com.google.common.util.concurrent.Service$Listener:
    void starting() -> starting
    void running() -> running
    void stopping(com.google.common.util.concurrent.Service$State) -> stopping
    void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.Service$State -> com.google.common.util.concurrent.Service$State:
    com.google.common.util.concurrent.Service$State NEW -> NEW
    com.google.common.util.concurrent.Service$State STARTING -> STARTING
    com.google.common.util.concurrent.Service$State RUNNING -> RUNNING
    com.google.common.util.concurrent.Service$State STOPPING -> STOPPING
    com.google.common.util.concurrent.Service$State TERMINATED -> TERMINATED
    com.google.common.util.concurrent.Service$State FAILED -> FAILED
    com.google.common.util.concurrent.Service$State[] $VALUES -> $VALUES
    com.google.common.util.concurrent.Service$State[] values() -> values
    com.google.common.util.concurrent.Service$State valueOf(java.lang.String) -> valueOf
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$1 -> com.google.common.util.concurrent.Service$State$1:
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$2 -> com.google.common.util.concurrent.Service$State$2:
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$3 -> com.google.common.util.concurrent.Service$State$3:
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$4 -> com.google.common.util.concurrent.Service$State$4:
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$5 -> com.google.common.util.concurrent.Service$State$5:
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$6 -> com.google.common.util.concurrent.Service$State$6:
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.ServiceManager -> com.google.common.util.concurrent.ServiceManager:
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.ListenerCallQueue$Callback HEALTHY_CALLBACK -> HEALTHY_CALLBACK
    com.google.common.util.concurrent.ListenerCallQueue$Callback STOPPED_CALLBACK -> STOPPED_CALLBACK
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState state -> state
    com.google.common.collect.ImmutableList services -> services
    void addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor) -> addListener
    void addListener(com.google.common.util.concurrent.ServiceManager$Listener) -> addListener
    com.google.common.util.concurrent.ServiceManager startAsync() -> startAsync
    void awaitHealthy() -> awaitHealthy
    void awaitHealthy(long,java.util.concurrent.TimeUnit) -> awaitHealthy
    com.google.common.util.concurrent.ServiceManager stopAsync() -> stopAsync
    void awaitStopped() -> awaitStopped
    void awaitStopped(long,java.util.concurrent.TimeUnit) -> awaitStopped
    boolean isHealthy() -> isHealthy
    com.google.common.collect.ImmutableMultimap servicesByState() -> servicesByState
    com.google.common.collect.ImmutableMap startupTimes() -> startupTimes
    java.lang.String toString() -> toString
    java.util.logging.Logger access$200() -> access$200
    com.google.common.util.concurrent.ListenerCallQueue$Callback access$300() -> access$300
    com.google.common.util.concurrent.ListenerCallQueue$Callback access$400() -> access$400
com.google.common.util.concurrent.ServiceManager$1 -> com.google.common.util.concurrent.ServiceManager$1:
    void call(com.google.common.util.concurrent.ServiceManager$Listener) -> call
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.ServiceManager$2 -> com.google.common.util.concurrent.ServiceManager$2:
    void call(com.google.common.util.concurrent.ServiceManager$Listener) -> call
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning -> com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning:
com.google.common.util.concurrent.ServiceManager$Listener -> com.google.common.util.concurrent.ServiceManager$Listener:
    void healthy() -> healthy
    void stopped() -> stopped
    void failure(com.google.common.util.concurrent.Service) -> failure
com.google.common.util.concurrent.ServiceManager$NoOpService -> com.google.common.util.concurrent.ServiceManager$NoOpService:
    void doStart() -> doStart
    void doStop() -> doStop
com.google.common.util.concurrent.ServiceManager$ServiceListener -> com.google.common.util.concurrent.ServiceManager$ServiceListener:
    com.google.common.util.concurrent.Service service -> service
    java.lang.ref.WeakReference state -> state
    void starting() -> starting
    void running() -> running
    void stopping(com.google.common.util.concurrent.Service$State) -> stopping
    void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.ServiceManager$ServiceManagerState -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState:
    com.google.common.util.concurrent.Monitor monitor -> monitor
    com.google.common.collect.SetMultimap servicesByState -> servicesByState
    com.google.common.collect.Multiset states -> states
    java.util.Map startupTimers -> startupTimers
    boolean ready -> ready
    boolean transitioned -> transitioned
    int numberOfServices -> numberOfServices
    com.google.common.util.concurrent.Monitor$Guard awaitHealthGuard -> awaitHealthGuard
    com.google.common.util.concurrent.Monitor$Guard stoppedGuard -> stoppedGuard
    java.util.List listeners -> listeners
    void tryStartTiming(com.google.common.util.concurrent.Service) -> tryStartTiming
    void markReady() -> markReady
    void addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor) -> addListener
    void awaitHealthy() -> awaitHealthy
    void awaitHealthy(long,java.util.concurrent.TimeUnit) -> awaitHealthy
    void awaitStopped() -> awaitStopped
    void awaitStopped(long,java.util.concurrent.TimeUnit) -> awaitStopped
    com.google.common.collect.ImmutableMultimap servicesByState() -> servicesByState
    com.google.common.collect.ImmutableMap startupTimes() -> startupTimes
    void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State) -> transitionService
    void fireStoppedListeners() -> fireStoppedListeners
    void fireHealthyListeners() -> fireHealthyListeners
    void fireFailedListeners(com.google.common.util.concurrent.Service) -> fireFailedListeners
    void executeListeners() -> executeListeners
    void checkHealthy() -> checkHealthy
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1 -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    java.util.Set get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2 -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$3 -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$3:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$4 -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$4:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    java.lang.Long apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$5 -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$5:
    com.google.common.util.concurrent.Service val$service -> val$service
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    void call(com.google.common.util.concurrent.ServiceManager$Listener) -> call
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.SettableFuture -> com.google.common.util.concurrent.SettableFuture:
    com.google.common.util.concurrent.SettableFuture create() -> create
    boolean set(java.lang.Object) -> set
    boolean setException(java.lang.Throwable) -> setException
com.google.common.util.concurrent.SimpleTimeLimiter -> com.google.common.util.concurrent.SimpleTimeLimiter:
    java.util.concurrent.ExecutorService executor -> executor
    java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean) -> callWithTimeout
    java.lang.Exception throwCause(java.lang.Exception,boolean) -> throwCause
    java.util.Set findInterruptibleMethods(java.lang.Class) -> findInterruptibleMethods
    boolean declaresInterruptedEx(java.lang.reflect.Method) -> declaresInterruptedEx
    java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler) -> newProxy
    java.lang.Exception access$000(java.lang.Exception,boolean) -> access$000
com.google.common.util.concurrent.SimpleTimeLimiter$1 -> com.google.common.util.concurrent.SimpleTimeLimiter$1:
    java.lang.Object val$target -> val$target
    long val$timeoutDuration -> val$timeoutDuration
    java.util.concurrent.TimeUnit val$timeoutUnit -> val$timeoutUnit
    java.util.Set val$interruptibleMethods -> val$interruptibleMethods
    com.google.common.util.concurrent.SimpleTimeLimiter this$0 -> this$0
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
com.google.common.util.concurrent.SimpleTimeLimiter$1$1 -> com.google.common.util.concurrent.SimpleTimeLimiter$1$1:
    java.lang.reflect.Method val$method -> val$method
    java.lang.Object[] val$args -> val$args
    com.google.common.util.concurrent.SimpleTimeLimiter$1 this$1 -> this$1
    java.lang.Object call() -> call
com.google.common.util.concurrent.SmoothRateLimiter -> com.google.common.util.concurrent.SmoothRateLimiter:
    double storedPermits -> storedPermits
    double maxPermits -> maxPermits
    double stableIntervalMicros -> stableIntervalMicros
    long nextFreeTicketMicros -> nextFreeTicketMicros
    void doSetRate(double,long) -> doSetRate
    void doSetRate(double,double) -> doSetRate
    double doGetRate() -> doGetRate
    long queryEarliestAvailable(long) -> queryEarliestAvailable
    long reserveEarliestAvailable(int,long) -> reserveEarliestAvailable
    long storedPermitsToWaitTime(double,double) -> storedPermitsToWaitTime
    void resync(long) -> resync
com.google.common.util.concurrent.SmoothRateLimiter$1 -> com.google.common.util.concurrent.SmoothRateLimiter$1:
com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty -> com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:
    double maxBurstSeconds -> maxBurstSeconds
    void doSetRate(double,double) -> doSetRate
    long storedPermitsToWaitTime(double,double) -> storedPermitsToWaitTime
com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp -> com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:
    long warmupPeriodMicros -> warmupPeriodMicros
    double slope -> slope
    double halfPermits -> halfPermits
    void doSetRate(double,double) -> doSetRate
    long storedPermitsToWaitTime(double,double) -> storedPermitsToWaitTime
    double permitsToTime(double) -> permitsToTime
com.google.common.util.concurrent.Striped -> com.google.common.util.concurrent.Striped:
    int LARGE_LAZY_CUTOFF -> LARGE_LAZY_CUTOFF
    com.google.common.base.Supplier READ_WRITE_LOCK_SUPPLIER -> READ_WRITE_LOCK_SUPPLIER
    int ALL_SET -> ALL_SET
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getAt(int) -> getAt
    int indexFor(java.lang.Object) -> indexFor
    int size() -> size
    java.lang.Iterable bulkGet(java.lang.Iterable) -> bulkGet
    com.google.common.util.concurrent.Striped lock(int) -> lock
    com.google.common.util.concurrent.Striped lazyWeakLock(int) -> lazyWeakLock
    com.google.common.util.concurrent.Striped lazy(int,com.google.common.base.Supplier) -> lazy
    com.google.common.util.concurrent.Striped semaphore(int,int) -> semaphore
    com.google.common.util.concurrent.Striped lazyWeakSemaphore(int,int) -> lazyWeakSemaphore
    com.google.common.util.concurrent.Striped readWriteLock(int) -> readWriteLock
    com.google.common.util.concurrent.Striped lazyWeakReadWriteLock(int) -> lazyWeakReadWriteLock
    int ceilToPowerOfTwo(int) -> ceilToPowerOfTwo
    int smear(int) -> smear
    int access$200(int) -> access$200
    int access$300(int) -> access$300
com.google.common.util.concurrent.Striped$1 -> com.google.common.util.concurrent.Striped$1:
    java.util.concurrent.locks.Lock get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$2 -> com.google.common.util.concurrent.Striped$2:
    java.util.concurrent.locks.Lock get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$3 -> com.google.common.util.concurrent.Striped$3:
    int val$permits -> val$permits
    java.util.concurrent.Semaphore get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$4 -> com.google.common.util.concurrent.Striped$4:
    int val$permits -> val$permits
    java.util.concurrent.Semaphore get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$5 -> com.google.common.util.concurrent.Striped$5:
    java.util.concurrent.locks.ReadWriteLock get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$CompactStriped -> com.google.common.util.concurrent.Striped$CompactStriped:
    java.lang.Object[] array -> array
    java.lang.Object getAt(int) -> getAt
    int size() -> size
com.google.common.util.concurrent.Striped$LargeLazyStriped -> com.google.common.util.concurrent.Striped$LargeLazyStriped:
    java.util.concurrent.ConcurrentMap locks -> locks
    com.google.common.base.Supplier supplier -> supplier
    int size -> size
    java.lang.Object getAt(int) -> getAt
    int size() -> size
com.google.common.util.concurrent.Striped$PaddedLock -> com.google.common.util.concurrent.Striped$PaddedLock:
    long q1 -> q1
    long q2 -> q2
    long q3 -> q3
com.google.common.util.concurrent.Striped$PaddedSemaphore -> com.google.common.util.concurrent.Striped$PaddedSemaphore:
    long q1 -> q1
    long q2 -> q2
    long q3 -> q3
com.google.common.util.concurrent.Striped$PowerOfTwoStriped -> com.google.common.util.concurrent.Striped$PowerOfTwoStriped:
    int mask -> mask
    int indexFor(java.lang.Object) -> indexFor
    java.lang.Object get(java.lang.Object) -> get
com.google.common.util.concurrent.Striped$SmallLazyStriped -> com.google.common.util.concurrent.Striped$SmallLazyStriped:
    java.util.concurrent.atomic.AtomicReferenceArray locks -> locks
    com.google.common.base.Supplier supplier -> supplier
    int size -> size
    java.lang.ref.ReferenceQueue queue -> queue
    java.lang.Object getAt(int) -> getAt
    void drainQueue() -> drainQueue
    int size() -> size
com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference -> com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference:
    int index -> index
com.google.common.util.concurrent.ThreadFactoryBuilder -> com.google.common.util.concurrent.ThreadFactoryBuilder:
    java.lang.String nameFormat -> nameFormat
    java.lang.Boolean daemon -> daemon
    java.lang.Integer priority -> priority
    java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler -> uncaughtExceptionHandler
    java.util.concurrent.ThreadFactory backingThreadFactory -> backingThreadFactory
    com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String) -> setNameFormat
    com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean) -> setDaemon
    com.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int) -> setPriority
    com.google.common.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler) -> setUncaughtExceptionHandler
    com.google.common.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory) -> setThreadFactory
    java.util.concurrent.ThreadFactory build() -> build
    java.util.concurrent.ThreadFactory build(com.google.common.util.concurrent.ThreadFactoryBuilder) -> build
com.google.common.util.concurrent.ThreadFactoryBuilder$1 -> com.google.common.util.concurrent.ThreadFactoryBuilder$1:
    java.util.concurrent.ThreadFactory val$backingThreadFactory -> val$backingThreadFactory
    java.lang.String val$nameFormat -> val$nameFormat
    java.util.concurrent.atomic.AtomicLong val$count -> val$count
    java.lang.Boolean val$daemon -> val$daemon
    java.lang.Integer val$priority -> val$priority
    java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler -> val$uncaughtExceptionHandler
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.google.common.util.concurrent.TimeLimiter -> com.google.common.util.concurrent.TimeLimiter:
    java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean) -> callWithTimeout
com.google.common.util.concurrent.UncaughtExceptionHandlers -> com.google.common.util.concurrent.UncaughtExceptionHandlers:
    java.lang.Thread$UncaughtExceptionHandler systemExit() -> systemExit
com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter -> com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter:
    java.util.logging.Logger logger -> logger
    java.lang.Runtime runtime -> runtime
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.google.common.util.concurrent.UncheckedExecutionException -> com.google.common.util.concurrent.UncheckedExecutionException:
    long serialVersionUID -> serialVersionUID
com.google.common.util.concurrent.UncheckedTimeoutException -> com.google.common.util.concurrent.UncheckedTimeoutException:
    long serialVersionUID -> serialVersionUID
com.google.common.util.concurrent.Uninterruptibles -> com.google.common.util.concurrent.Uninterruptibles:
    void awaitUninterruptibly(java.util.concurrent.CountDownLatch) -> awaitUninterruptibly
    boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch,long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    void joinUninterruptibly(java.lang.Thread) -> joinUninterruptibly
    java.lang.Object getUninterruptibly(java.util.concurrent.Future) -> getUninterruptibly
    java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit) -> getUninterruptibly
    void joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit) -> joinUninterruptibly
    java.lang.Object takeUninterruptibly(java.util.concurrent.BlockingQueue) -> takeUninterruptibly
    void putUninterruptibly(java.util.concurrent.BlockingQueue,java.lang.Object) -> putUninterruptibly
    void sleepUninterruptibly(long,java.util.concurrent.TimeUnit) -> sleepUninterruptibly
    boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit) -> tryAcquireUninterruptibly
    boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,long,java.util.concurrent.TimeUnit) -> tryAcquireUninterruptibly
com.google.common.util.concurrent.WrappingExecutorService -> com.google.common.util.concurrent.WrappingExecutorService:
    java.util.concurrent.ExecutorService delegate -> delegate
    java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable) -> wrapTask
    java.lang.Runnable wrapTask(java.lang.Runnable) -> wrapTask
    com.google.common.collect.ImmutableList wrapTasks(java.util.Collection) -> wrapTasks
    void execute(java.lang.Runnable) -> execute
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.List invokeAll(java.util.Collection) -> invokeAll
    java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
    java.lang.Object invokeAny(java.util.Collection) -> invokeAny
    java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAny
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
com.google.common.util.concurrent.WrappingExecutorService$1 -> com.google.common.util.concurrent.WrappingExecutorService$1:
    java.util.concurrent.Callable val$wrapped -> val$wrapped
    com.google.common.util.concurrent.WrappingExecutorService this$0 -> this$0
    void run() -> run
com.google.common.util.concurrent.WrappingScheduledExecutorService -> com.google.common.util.concurrent.WrappingScheduledExecutorService:
    java.util.concurrent.ScheduledExecutorService delegate -> delegate
    java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
com.google.common.util.concurrent.package-info -> com.google.common.util.concurrent.package-info:
com.google.common.xml.XmlEscapers -> com.google.common.xml.XmlEscapers:
    char MIN_ASCII_CONTROL_CHAR -> MIN_ASCII_CONTROL_CHAR
    char MAX_ASCII_CONTROL_CHAR -> MAX_ASCII_CONTROL_CHAR
    com.google.common.escape.Escaper XML_ESCAPER -> XML_ESCAPER
    com.google.common.escape.Escaper XML_CONTENT_ESCAPER -> XML_CONTENT_ESCAPER
    com.google.common.escape.Escaper XML_ATTRIBUTE_ESCAPER -> XML_ATTRIBUTE_ESCAPER
    com.google.common.escape.Escaper xmlContentEscaper() -> xmlContentEscaper
    com.google.common.escape.Escaper xmlAttributeEscaper() -> xmlAttributeEscaper
com.google.common.xml.package-info -> com.google.common.xml.package-info:
com.google.thirdparty.publicsuffix.PublicSuffixPatterns -> com.google.thirdparty.publicsuffix.PublicSuffixPatterns:
    com.google.common.collect.ImmutableMap EXACT -> EXACT
    com.google.common.collect.ImmutableMap UNDER -> UNDER
    com.google.common.collect.ImmutableMap EXCLUDED -> EXCLUDED
com.google.thirdparty.publicsuffix.PublicSuffixType -> com.google.thirdparty.publicsuffix.PublicSuffixType:
    com.google.thirdparty.publicsuffix.PublicSuffixType PRIVATE -> PRIVATE
    com.google.thirdparty.publicsuffix.PublicSuffixType ICANN -> ICANN
    char innerNodeCode -> innerNodeCode
    char leafNodeCode -> leafNodeCode
    com.google.thirdparty.publicsuffix.PublicSuffixType[] $VALUES -> $VALUES
    com.google.thirdparty.publicsuffix.PublicSuffixType[] values() -> values
    com.google.thirdparty.publicsuffix.PublicSuffixType valueOf(java.lang.String) -> valueOf
    char getLeafNodeCode() -> getLeafNodeCode
    char getInnerNodeCode() -> getInnerNodeCode
    com.google.thirdparty.publicsuffix.PublicSuffixType fromCode(char) -> fromCode
    com.google.thirdparty.publicsuffix.PublicSuffixType fromIsPrivate(boolean) -> fromIsPrivate
com.google.thirdparty.publicsuffix.TrieParser -> com.google.thirdparty.publicsuffix.TrieParser:
    com.google.common.base.Joiner PREFIX_JOINER -> PREFIX_JOINER
    com.google.common.collect.ImmutableMap parseTrie(java.lang.CharSequence) -> parseTrie
    int doParseTrieToBuilder(java.util.List,java.lang.CharSequence,com.google.common.collect.ImmutableMap$Builder) -> doParseTrieToBuilder
    java.lang.CharSequence reverse(java.lang.CharSequence) -> reverse
    void swap(char[],int,int) -> swap
